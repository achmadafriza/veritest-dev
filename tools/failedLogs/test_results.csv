REQUEST_ID,ELAPSED_TIME,RESULT_STATUS,RESULT
AbsIdempotence_1-1,30173,MALFORMED,"IsabelleResult(requestID=AbsIdempotence_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AbsIdempotence_1-2,40133,MALFORMED,"IsabelleResult(requestID=AbsIdempotence_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AbsIdempotence_1-3,36001,MALFORMED,"IsabelleResult(requestID=AbsIdempotence_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AbsIdempotence_1-4,39008,MALFORMED,"IsabelleResult(requestID=AbsIdempotence_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AbsIdempotence_1-5,38989,MALFORMED,"IsabelleResult(requestID=AbsIdempotence_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AbsNegate_1-1,38999,MALFORMED,"IsabelleResult(requestID=AbsNegate_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AbsNegate_1-2,44991,MALFORMED,"IsabelleResult(requestID=AbsNegate_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AbsNegate_1-3,33009,MALFORMED,"IsabelleResult(requestID=AbsNegate_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AbsNegate_1-4,38990,MALFORMED,"IsabelleResult(requestID=AbsNegate_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AbsNegate_1-5,45011,MALFORMED,"IsabelleResult(requestID=AbsNegate_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AddLeftNegateToSub_1-1,107997,FOUND_PROOF,"IsabelleResult(requestID=AddLeftNegateToSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddLeftNegateToSub(2) rewrite_termination.simps(1) apply blast, using exp_add_left_negate_to_sub by blast], isabelleMessages=null, stackTrace=null)"
AddLeftNegateToSub_1-2,119999,FOUND_PROOF,"IsabelleResult(requestID=AddLeftNegateToSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddLeftNegateToSub(2) apply auto[1], using exp_add_left_negate_to_sub by auto], isabelleMessages=null, stackTrace=null)"
AddLeftNegateToSub_1-3,109880,FOUND_PROOF,"IsabelleResult(requestID=AddLeftNegateToSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddLeftNegateToSub(2) apply auto[1], using exp_add_left_negate_to_sub by auto], isabelleMessages=null, stackTrace=null)"
AddLeftNegateToSub_1-4,109110,FOUND_PROOF,"IsabelleResult(requestID=AddLeftNegateToSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddLeftNegateToSub(2) apply auto[1], using exp_add_left_negate_to_sub by auto], isabelleMessages=null, stackTrace=null)"
AddLeftNegateToSub_1-5,123012,FOUND_PROOF,"IsabelleResult(requestID=AddLeftNegateToSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddLeftNegateToSub(2) rewrite_termination.simps(1) apply blast, using exp_add_left_negate_to_sub by auto], isabelleMessages=null, stackTrace=null)"
AddNeutral_1-1,85973,FOUND_PROOF,"IsabelleResult(requestID=AddNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null)"
AddNeutral_1-2,66083,FOUND_PROOF,"IsabelleResult(requestID=AddNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null)"
AddNeutral_1-3,66950,FOUND_PROOF,"IsabelleResult(requestID=AddNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (meson AddNeutral_Exp)], isabelleMessages=null, stackTrace=null)"
AddNeutral_1-4,68990,FOUND_PROOF,"IsabelleResult(requestID=AddNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null)"
AddNeutral_1-5,71040,FOUND_PROOF,"IsabelleResult(requestID=AddNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by presburger], isabelleMessages=null, stackTrace=null)"
AddNeutral_2-1,66148,FOUND_PROOF,"IsabelleResult(requestID=AddNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null)"
AddNeutral_2-2,68998,FOUND_PROOF,"IsabelleResult(requestID=AddNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null)"
AddNeutral_2-3,68868,FOUND_PROOF,"IsabelleResult(requestID=AddNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null)"
AddNeutral_2-4,68952,FOUND_PROOF,"IsabelleResult(requestID=AddNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null)"
AddNeutral_2-5,69004,FOUND_PROOF,"IsabelleResult(requestID=AddNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null)"
AddNot2_1-1,124494,FAILED,"IsabelleResult(requestID=AddNot2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp b l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAdd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null)"
AddNot2_1-2,123374,FAILED,"IsabelleResult(requestID=AddNot2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp b l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAdd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null)"
AddNot2_1-3,122780,FAILED,"IsabelleResult(requestID=AddNot2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp b l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAdd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null)"
AddNot2_1-4,123483,FAILED,"IsabelleResult(requestID=AddNot2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp b l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAdd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null)"
AddNot2_1-5,122488,FAILED,"IsabelleResult(requestID=AddNot2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp b l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAdd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null)"
AddNot_1-1,71977,FAILED,"IsabelleResult(requestID=AddNot_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null)"
AddNot_1-2,66235,FAILED,"IsabelleResult(requestID=AddNot_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null)"
AddNot_1-3,65895,FAILED,"IsabelleResult(requestID=AddNot_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null)"
AddNot_1-4,68948,FAILED,"IsabelleResult(requestID=AddNot_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null)"
AddNot_1-5,71995,FAILED,"IsabelleResult(requestID=AddNot_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null)"
AddRightNegateToSub_1-1,66785,FAILED,"IsabelleResult(requestID=AddRightNegateToSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub x e)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size e))))
     2. BinaryExpr BinAdd x (UnaryExpr UnaryNeg e) \<sqsupseteq> BinaryExpr BinSub x e
    variables:
        e, x :: IRExpr], stackTrace=null)"
AddRightNegateToSub_1-2,71887,FAILED,"IsabelleResult(requestID=AddRightNegateToSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub x e)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size e))))
     2. BinaryExpr BinAdd x (UnaryExpr UnaryNeg e) \<sqsupseteq> BinaryExpr BinSub x e
    variables:
        e, x :: IRExpr], stackTrace=null)"
AddRightNegateToSub_1-3,69053,FAILED,"IsabelleResult(requestID=AddRightNegateToSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub x e)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size e))))
     2. BinaryExpr BinAdd x (UnaryExpr UnaryNeg e) \<sqsupseteq> BinaryExpr BinSub x e
    variables:
        e, x :: IRExpr], stackTrace=null)"
AddRightNegateToSub_1-4,66063,FAILED,"IsabelleResult(requestID=AddRightNegateToSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub x e)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size e))))
     2. BinaryExpr BinAdd x (UnaryExpr UnaryNeg e) \<sqsupseteq> BinaryExpr BinSub x e
    variables:
        e, x :: IRExpr], stackTrace=null)"
AddRightNegateToSub_1-5,71847,FAILED,"IsabelleResult(requestID=AddRightNegateToSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub x e)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size e))))
     2. BinaryExpr BinAdd x (UnaryExpr UnaryNeg e) \<sqsupseteq> BinaryExpr BinSub x e
    variables:
        e, x :: IRExpr], stackTrace=null)"
AddShiftConstantRight_1-1,69132,FAILED,"IsabelleResult(requestID=AddShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr v) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr v) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr v)
    variables:
        v :: Value
        y :: IRExpr], stackTrace=null)"
AddShiftConstantRight_1-2,66054,FAILED,"IsabelleResult(requestID=AddShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr v) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr v) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr v)
    variables:
        v :: Value
        y :: IRExpr], stackTrace=null)"
AddShiftConstantRight_1-3,68944,FAILED,"IsabelleResult(requestID=AddShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr v) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr v) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr v)
    variables:
        v :: Value
        y :: IRExpr], stackTrace=null)"
AddShiftConstantRight_1-4,71920,FAILED,"IsabelleResult(requestID=AddShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr v) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr v) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr v)
    variables:
        v :: Value
        y :: IRExpr], stackTrace=null)"
AddShiftConstantRight_1-5,69087,FAILED,"IsabelleResult(requestID=AddShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr v) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr v) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr v)
    variables:
        v :: Value
        y :: IRExpr], stackTrace=null)"
AddShiftConstantRight_2-1,68992,FAILED,"IsabelleResult(requestID=AddShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr c) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr c) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr c)
    variables:
        c :: Value
        y :: IRExpr], stackTrace=null)"
AddShiftConstantRight_2-2,71939,FAILED,"IsabelleResult(requestID=AddShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr c) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr c) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr c)
    variables:
        c :: Value
        y :: IRExpr], stackTrace=null)"
AddShiftConstantRight_2-3,69036,FAILED,"IsabelleResult(requestID=AddShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr c) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr c) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr c)
    variables:
        c :: Value
        y :: IRExpr], stackTrace=null)"
AddShiftConstantRight_2-4,71958,FAILED,"IsabelleResult(requestID=AddShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr c) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr c) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr c)
    variables:
        c :: Value
        y :: IRExpr], stackTrace=null)"
AddShiftConstantRight_2-5,72013,FAILED,"IsabelleResult(requestID=AddShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr c) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr c) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr c)
    variables:
        c :: Value
        y :: IRExpr], stackTrace=null)"
AndEqual_1-1,65003,FOUND_PROOF,"IsabelleResult(requestID=AndEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_equal by blast], isabelleMessages=null, stackTrace=null)"
AndEqual_1-2,65576,FOUND_PROOF,"IsabelleResult(requestID=AndEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_equal by blast], isabelleMessages=null, stackTrace=null)"
AndEqual_1-3,74068,FOUND_PROOF,"IsabelleResult(requestID=AndEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis exp_and_equal)], isabelleMessages=null, stackTrace=null)"
AndEqual_1-4,64307,FOUND_PROOF,"IsabelleResult(requestID=AndEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_equal by blast], isabelleMessages=null, stackTrace=null)"
AndEqual_1-5,63087,FOUND_PROOF,"IsabelleResult(requestID=AndEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_equal by blast], isabelleMessages=null, stackTrace=null)"
AndEqual_2-1,29531,MALFORMED,"IsabelleResult(requestID=AndEqual_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""intexp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndEqual_2-2,39000,MALFORMED,"IsabelleResult(requestID=AndEqual_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""intexp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndEqual_2-3,38999,MALFORMED,"IsabelleResult(requestID=AndEqual_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""intexp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndEqual_2-4,42000,MALFORMED,"IsabelleResult(requestID=AndEqual_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""intexp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndEqual_2-5,36001,MALFORMED,"IsabelleResult(requestID=AndEqual_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""intexp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndLeftFallthrough_1-1,38998,MALFORMED,"IsabelleResult(requestID=AndLeftFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndLeftFallthrough_1-2,45000,MALFORMED,"IsabelleResult(requestID=AndLeftFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndLeftFallthrough_1-3,33000,MALFORMED,"IsabelleResult(requestID=AndLeftFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndLeftFallthrough_1-4,41999,MALFORMED,"IsabelleResult(requestID=AndLeftFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndLeftFallthrough_1-5,36000,MALFORMED,"IsabelleResult(requestID=AndLeftFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndNeutral_1-1,76825,FOUND_PROOF,"IsabelleResult(requestID=AndNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (meson exp_and_neutral)], isabelleMessages=null, stackTrace=null)"
AndNeutral_1-2,73319,FOUND_PROOF,"IsabelleResult(requestID=AndNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_neutral by blast], isabelleMessages=null, stackTrace=null)"
AndNeutral_1-3,69294,FOUND_PROOF,"IsabelleResult(requestID=AndNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_neutral by blast], isabelleMessages=null, stackTrace=null)"
AndNeutral_1-4,68994,FOUND_PROOF,"IsabelleResult(requestID=AndNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_neutral by blast], isabelleMessages=null, stackTrace=null)"
AndNeutral_1-5,67640,FOUND_PROOF,"IsabelleResult(requestID=AndNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_neutral by auto], isabelleMessages=null, stackTrace=null)"
AndNeutral_2-1,30932,MALFORMED,"IsabelleResult(requestID=AndNeutral_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""i32exp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndNeutral_2-2,41992,MALFORMED,"IsabelleResult(requestID=AndNeutral_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""i32exp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndNeutral_2-3,36008,MALFORMED,"IsabelleResult(requestID=AndNeutral_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""i32exp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndNeutral_2-4,47990,MALFORMED,"IsabelleResult(requestID=AndNeutral_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""i32exp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndNeutral_2-5,30000,MALFORMED,"IsabelleResult(requestID=AndNeutral_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""i32exp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndNots_1-1,82747,FAILED,"IsabelleResult(requestID=AndNots_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinOr x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinAnd (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinOr x y)
    variables:
        x, y :: IRExpr], stackTrace=null)"
AndNots_1-2,71966,FAILED,"IsabelleResult(requestID=AndNots_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinOr x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinAnd (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinOr x y)
    variables:
        x, y :: IRExpr], stackTrace=null)"
AndNots_1-3,66257,FAILED,"IsabelleResult(requestID=AndNots_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinOr x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinAnd (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinOr x y)
    variables:
        x, y :: IRExpr], stackTrace=null)"
AndNots_1-4,71784,FAILED,"IsabelleResult(requestID=AndNots_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinOr x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinAnd (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinOr x y)
    variables:
        x, y :: IRExpr], stackTrace=null)"
AndNots_1-5,69002,FAILED,"IsabelleResult(requestID=AndNots_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinOr x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinAnd (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinOr x y)
    variables:
        x, y :: IRExpr], stackTrace=null)"
AndRightFallthrough_1-1,28249,MALFORMED,"IsabelleResult(requestID=AndRightFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndRightFallthrough_1-2,38990,MALFORMED,"IsabelleResult(requestID=AndRightFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndRightFallthrough_1-3,39010,MALFORMED,"IsabelleResult(requestID=AndRightFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndRightFallthrough_1-4,38990,MALFORMED,"IsabelleResult(requestID=AndRightFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndRightFallthrough_1-5,39001,MALFORMED,"IsabelleResult(requestID=AndRightFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
AndSelf2_1-1,77568,FAILED,"IsabelleResult(requestID=AndSelf2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
AndSelf2_1-2,63154,FAILED,"IsabelleResult(requestID=AndSelf2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
AndSelf2_1-3,68976,FAILED,"IsabelleResult(requestID=AndSelf2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
AndSelf2_1-4,66020,FAILED,"IsabelleResult(requestID=AndSelf2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
AndSelf2_1-5,60249,FAILED,"IsabelleResult(requestID=AndSelf2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
AndSelf_1-1,137752,FAILED,"IsabelleResult(requestID=AndSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAnd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
AndSelf_1-2,154671,FAILED,"IsabelleResult(requestID=AndSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAnd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
AndSelf_1-3,136584,FAILED,"IsabelleResult(requestID=AndSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAnd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
AndSelf_1-4,150865,FAILED,"IsabelleResult(requestID=AndSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAnd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
AndSelf_1-5,146184,FAILED,"IsabelleResult(requestID=AndSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAnd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
AndShiftConstantRight_1-1,73388,FAILED,"IsabelleResult(requestID=AndShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAnd (ConstantExpr x) y)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
AndShiftConstantRight_1-2,69078,FAILED,"IsabelleResult(requestID=AndShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAnd (ConstantExpr x) y)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
AndShiftConstantRight_1-3,68981,FAILED,"IsabelleResult(requestID=AndShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAnd (ConstantExpr x) y)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
AndShiftConstantRight_1-4,69005,FAILED,"IsabelleResult(requestID=AndShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAnd (ConstantExpr x) y)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
AndShiftConstantRight_1-5,71903,FAILED,"IsabelleResult(requestID=AndShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAnd (ConstantExpr x) y)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
AndShiftConstantRight_2-1,69174,FAILED,"IsabelleResult(requestID=AndShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
AndShiftConstantRight_2-2,65979,FAILED,"IsabelleResult(requestID=AndShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
AndShiftConstantRight_2-3,68954,FAILED,"IsabelleResult(requestID=AndShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
AndShiftConstantRight_2-4,70485,FAILED,"IsabelleResult(requestID=AndShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
AndShiftConstantRight_2-5,73458,FAILED,"IsabelleResult(requestID=AndShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
AndSignExtend_1-1,66514,FOUND_PROOF,"IsabelleResult(requestID=AndSignExtend_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sign_extend by force], isabelleMessages=null, stackTrace=null)"
AndSignExtend_1-2,68932,FOUND_PROOF,"IsabelleResult(requestID=AndSignExtend_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sign_extend by force], isabelleMessages=null, stackTrace=null)"
AndSignExtend_1-3,72110,FOUND_PROOF,"IsabelleResult(requestID=AndSignExtend_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sign_extend by force], isabelleMessages=null, stackTrace=null)"
AndSignExtend_1-4,68962,FOUND_PROOF,"IsabelleResult(requestID=AndSignExtend_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sign_extend by auto], isabelleMessages=null, stackTrace=null)"
AndSignExtend_1-5,69035,FOUND_PROOF,"IsabelleResult(requestID=AndSignExtend_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sign_extend by auto], isabelleMessages=null, stackTrace=null)"
BinaryFoldConstant_1-1,96107,FOUND_PROOF,"IsabelleResult(requestID=BinaryFoldConstant_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) by auto], isabelleMessages=null, stackTrace=null)"
BinaryFoldConstant_1-2,95882,FOUND_PROOF,"IsabelleResult(requestID=BinaryFoldConstant_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
BinaryFoldConstant_1-3,95923,FOUND_PROOF,"IsabelleResult(requestID=BinaryFoldConstant_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) by force], isabelleMessages=null, stackTrace=null)"
BinaryFoldConstant_1-4,99061,FOUND_PROOF,"IsabelleResult(requestID=BinaryFoldConstant_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) by auto], isabelleMessages=null, stackTrace=null)"
BinaryFoldConstant_1-5,96030,FOUND_PROOF,"IsabelleResult(requestID=BinaryFoldConstant_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
BinaryFoldConstant_2-1,90079,FOUND_PROOF,"IsabelleResult(requestID=BinaryFoldConstant_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
BinaryFoldConstant_2-2,95995,FOUND_PROOF,"IsabelleResult(requestID=BinaryFoldConstant_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
BinaryFoldConstant_2-3,96020,FOUND_PROOF,"IsabelleResult(requestID=BinaryFoldConstant_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
BinaryFoldConstant_2-4,96081,FOUND_PROOF,"IsabelleResult(requestID=BinaryFoldConstant_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
BinaryFoldConstant_2-5,95850,FOUND_PROOF,"IsabelleResult(requestID=BinaryFoldConstant_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
ConditionalEliminateKnownLess_1-1,66966,FOUND_PROOF,"IsabelleResult(requestID=ConditionalEliminateKnownLess_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalEliminateKnownLess(1) by fastforce], isabelleMessages=null, stackTrace=null)"
ConditionalEliminateKnownLess_1-2,73759,FOUND_PROOF,"IsabelleResult(requestID=ConditionalEliminateKnownLess_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis ConditionalEliminateKnownLess(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null)"
ConditionalEliminateKnownLess_1-3,70232,FOUND_PROOF,"IsabelleResult(requestID=ConditionalEliminateKnownLess_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null)"
ConditionalEliminateKnownLess_1-4,73938,FOUND_PROOF,"IsabelleResult(requestID=ConditionalEliminateKnownLess_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null)"
ConditionalEliminateKnownLess_1-5,72030,FOUND_PROOF,"IsabelleResult(requestID=ConditionalEliminateKnownLess_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalEliminateKnownLess(1) by force], isabelleMessages=null, stackTrace=null)"
ConditionalEliminateKnownLess_2-1,34029,MALFORMED,"IsabelleResult(requestID=ConditionalEliminateKnownLess_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
ConditionalEliminateKnownLess_2-2,39009,MALFORMED,"IsabelleResult(requestID=ConditionalEliminateKnownLess_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
ConditionalEliminateKnownLess_2-3,39001,MALFORMED,"IsabelleResult(requestID=ConditionalEliminateKnownLess_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
ConditionalEliminateKnownLess_2-4,44991,MALFORMED,"IsabelleResult(requestID=ConditionalEliminateKnownLess_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
ConditionalEliminateKnownLess_2-5,35999,MALFORMED,"IsabelleResult(requestID=ConditionalEliminateKnownLess_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
ConditionalEliminateKnownLess_3-1,36007,MALFORMED,"IsabelleResult(requestID=ConditionalEliminateKnownLess_3, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
ConditionalEliminateKnownLess_3-2,38991,MALFORMED,"IsabelleResult(requestID=ConditionalEliminateKnownLess_3, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
ConditionalEliminateKnownLess_3-3,38999,MALFORMED,"IsabelleResult(requestID=ConditionalEliminateKnownLess_3, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
ConditionalEliminateKnownLess_3-4,42000,MALFORMED,"IsabelleResult(requestID=ConditionalEliminateKnownLess_3, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
ConditionalEliminateKnownLess_3-5,36000,MALFORMED,"IsabelleResult(requestID=ConditionalEliminateKnownLess_3, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
ConditionalEqualBranches_1-1,39007,FOUND_AUTO_PROOF,"IsabelleResult(requestID=ConditionalEqualBranches_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
ConditionalEqualBranches_1-2,38991,FOUND_AUTO_PROOF,"IsabelleResult(requestID=ConditionalEqualBranches_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
ConditionalEqualBranches_1-3,38999,FOUND_AUTO_PROOF,"IsabelleResult(requestID=ConditionalEqualBranches_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
ConditionalEqualBranches_1-4,39000,FOUND_AUTO_PROOF,"IsabelleResult(requestID=ConditionalEqualBranches_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
ConditionalEqualBranches_1-5,39010,FOUND_AUTO_PROOF,"IsabelleResult(requestID=ConditionalEqualBranches_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
ConditionalEqualBranches_2-1,38987,FOUND_AUTO_PROOF,"IsabelleResult(requestID=ConditionalEqualBranches_2, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
ConditionalEqualBranches_2-2,39000,FOUND_AUTO_PROOF,"IsabelleResult(requestID=ConditionalEqualBranches_2, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
ConditionalEqualBranches_2-3,39011,FOUND_AUTO_PROOF,"IsabelleResult(requestID=ConditionalEqualBranches_2, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
ConditionalEqualBranches_2-4,38989,FOUND_AUTO_PROOF,"IsabelleResult(requestID=ConditionalEqualBranches_2, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
ConditionalEqualBranches_2-5,39010,FOUND_AUTO_PROOF,"IsabelleResult(requestID=ConditionalEqualBranches_2, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
ConditionalEqualIsRHS_1-1,80748,FAILED,"IsabelleResult(requestID=ConditionalEqualIsRHS_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        x, y :: IRExpr], stackTrace=null)"
ConditionalEqualIsRHS_1-2,69119,FAILED,"IsabelleResult(requestID=ConditionalEqualIsRHS_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        x, y :: IRExpr], stackTrace=null)"
ConditionalEqualIsRHS_1-3,71968,FAILED,"IsabelleResult(requestID=ConditionalEqualIsRHS_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        x, y :: IRExpr], stackTrace=null)"
ConditionalEqualIsRHS_1-4,71912,FAILED,"IsabelleResult(requestID=ConditionalEqualIsRHS_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        x, y :: IRExpr], stackTrace=null)"
ConditionalEqualIsRHS_1-5,69139,FAILED,"IsabelleResult(requestID=ConditionalEqualIsRHS_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        x, y :: IRExpr], stackTrace=null)"
ConditionalEqualIsRHS_2-1,71928,FAILED,"IsabelleResult(requestID=ConditionalEqualIsRHS_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. type x = Integer \<and> type_safe x y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        type_safe :: IRExpr \<Rightarrow> IRExpr \<Rightarrow> bool
        Integer :: 'a
        x, y :: IRExpr
        type :: IRExpr \<Rightarrow> 'a], stackTrace=null)"
ConditionalEqualIsRHS_2-2,69090,FAILED,"IsabelleResult(requestID=ConditionalEqualIsRHS_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. type x = Integer \<and> type_safe x y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        type_safe :: IRExpr \<Rightarrow> IRExpr \<Rightarrow> bool
        Integer :: 'a
        x, y :: IRExpr
        type :: IRExpr \<Rightarrow> 'a], stackTrace=null)"
ConditionalEqualIsRHS_2-3,69089,FAILED,"IsabelleResult(requestID=ConditionalEqualIsRHS_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. type x = Integer \<and> type_safe x y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        type_safe :: IRExpr \<Rightarrow> IRExpr \<Rightarrow> bool
        Integer :: 'a
        x, y :: IRExpr
        type :: IRExpr \<Rightarrow> 'a], stackTrace=null)"
ConditionalEqualIsRHS_2-4,66023,FAILED,"IsabelleResult(requestID=ConditionalEqualIsRHS_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. type x = Integer \<and> type_safe x y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        type_safe :: IRExpr \<Rightarrow> IRExpr \<Rightarrow> bool
        Integer :: 'a
        x, y :: IRExpr
        type :: IRExpr \<Rightarrow> 'a], stackTrace=null)"
ConditionalEqualIsRHS_2-5,71877,FAILED,"IsabelleResult(requestID=ConditionalEqualIsRHS_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. type x = Integer \<and> type_safe x y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        type_safe :: IRExpr \<Rightarrow> IRExpr \<Rightarrow> bool
        Integer :: 'a
        x, y :: IRExpr
        type :: IRExpr \<Rightarrow> 'a], stackTrace=null)"
ConditionalExtractCondition2_1-1,69661,FOUND_PROOF,"IsabelleResult(requestID=ConditionalExtractCondition2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalExtractCondition2(1) rewrite_preservation.simps(2) by blast], isabelleMessages=null, stackTrace=null)"
ConditionalExtractCondition2_1-2,64540,FOUND_PROOF,"IsabelleResult(requestID=ConditionalExtractCondition2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalExtractCondition2(1) rewrite_preservation.simps(2) by blast], isabelleMessages=null, stackTrace=null)"
ConditionalExtractCondition2_1-3,70245,FOUND_PROOF,"IsabelleResult(requestID=ConditionalExtractCondition2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalExtractCondition2(1) rewrite_preservation.simps(2) by blast], isabelleMessages=null, stackTrace=null)"
ConditionalExtractCondition2_1-4,64710,FOUND_PROOF,"IsabelleResult(requestID=ConditionalExtractCondition2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalExtractCondition2(1) by auto], isabelleMessages=null, stackTrace=null)"
ConditionalExtractCondition2_1-5,64180,FOUND_PROOF,"IsabelleResult(requestID=ConditionalExtractCondition2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalExtractCondition2(1) rewrite_preservation.simps(2) by blast], isabelleMessages=null, stackTrace=null)"
ConditionalExtractCondition_1-1,68641,FAILED,"IsabelleResult(requestID=ConditionalExtractCondition_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. isBoolean c \<longrightarrow>
        ConditionalExpr c (ConstantExpr (IntVal (32::nat) (1::64 word)))
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        c
    variables:
        c :: IRExpr], stackTrace=null)"
ConditionalExtractCondition_1-2,68873,FAILED,"IsabelleResult(requestID=ConditionalExtractCondition_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. isBoolean c \<longrightarrow>
        ConditionalExpr c (ConstantExpr (IntVal (32::nat) (1::64 word)))
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        c
    variables:
        c :: IRExpr], stackTrace=null)"
ConditionalExtractCondition_1-3,68998,FAILED,"IsabelleResult(requestID=ConditionalExtractCondition_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. isBoolean c \<longrightarrow>
        ConditionalExpr c (ConstantExpr (IntVal (32::nat) (1::64 word)))
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        c
    variables:
        c :: IRExpr], stackTrace=null)"
ConditionalExtractCondition_1-4,71967,FAILED,"IsabelleResult(requestID=ConditionalExtractCondition_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. isBoolean c \<longrightarrow>
        ConditionalExpr c (ConstantExpr (IntVal (32::nat) (1::64 word)))
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        c
    variables:
        c :: IRExpr], stackTrace=null)"
ConditionalExtractCondition_1-5,66032,FAILED,"IsabelleResult(requestID=ConditionalExtractCondition_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. isBoolean c \<longrightarrow>
        ConditionalExpr c (ConstantExpr (IntVal (32::nat) (1::64 word)))
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        c
    variables:
        c :: IRExpr], stackTrace=null)"
ConditionalIntegerEquals_1_1-1,75382,FAILED,"IsabelleResult(requestID=ConditionalIntegerEquals_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Canonicalization.size c
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x \<sqsupseteq> c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null)"
ConditionalIntegerEquals_1_1-2,74997,FAILED,"IsabelleResult(requestID=ConditionalIntegerEquals_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Canonicalization.size c
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x \<sqsupseteq> c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null)"
ConditionalIntegerEquals_1_1-3,74914,FAILED,"IsabelleResult(requestID=ConditionalIntegerEquals_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Canonicalization.size c
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x \<sqsupseteq> c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null)"
ConditionalIntegerEquals_1_1-4,75116,FAILED,"IsabelleResult(requestID=ConditionalIntegerEquals_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Canonicalization.size c
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x \<sqsupseteq> c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null)"
ConditionalIntegerEquals_1_1-5,72032,FAILED,"IsabelleResult(requestID=ConditionalIntegerEquals_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Canonicalization.size c
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x \<sqsupseteq> c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null)"
ConditionalIntegerEquals_2_1-1,71879,FAILED,"IsabelleResult(requestID=ConditionalIntegerEquals_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Suc (Suc (Canonicalization.size c))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y \<sqsupseteq>
        UnaryExpr UnaryLogicNegation c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null)"
ConditionalIntegerEquals_2_1-2,75007,FAILED,"IsabelleResult(requestID=ConditionalIntegerEquals_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Suc (Suc (Canonicalization.size c))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y \<sqsupseteq>
        UnaryExpr UnaryLogicNegation c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null)"
ConditionalIntegerEquals_2_1-3,75014,FAILED,"IsabelleResult(requestID=ConditionalIntegerEquals_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Suc (Suc (Canonicalization.size c))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y \<sqsupseteq>
        UnaryExpr UnaryLogicNegation c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null)"
ConditionalIntegerEquals_2_1-4,72155,FAILED,"IsabelleResult(requestID=ConditionalIntegerEquals_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Suc (Suc (Canonicalization.size c))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y \<sqsupseteq>
        UnaryExpr UnaryLogicNegation c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null)"
ConditionalIntegerEquals_2_1-5,72074,FAILED,"IsabelleResult(requestID=ConditionalIntegerEquals_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Suc (Suc (Canonicalization.size c))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y \<sqsupseteq>
        UnaryExpr UnaryLogicNegation c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null)"
DefaultFalseBranch_1-1,29288,FOUND_AUTO_PROOF,"IsabelleResult(requestID=DefaultFalseBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
DefaultFalseBranch_1-2,38999,FOUND_AUTO_PROOF,"IsabelleResult(requestID=DefaultFalseBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
DefaultFalseBranch_1-3,45010,FOUND_AUTO_PROOF,"IsabelleResult(requestID=DefaultFalseBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
DefaultFalseBranch_1-4,35989,FOUND_AUTO_PROOF,"IsabelleResult(requestID=DefaultFalseBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
DefaultFalseBranch_1-5,36001,FOUND_AUTO_PROOF,"IsabelleResult(requestID=DefaultFalseBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
DefaultTrueBranch_1-1,41996,FOUND_AUTO_PROOF,"IsabelleResult(requestID=DefaultTrueBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
DefaultTrueBranch_1-2,36011,FOUND_AUTO_PROOF,"IsabelleResult(requestID=DefaultTrueBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
DefaultTrueBranch_1-3,42000,FOUND_AUTO_PROOF,"IsabelleResult(requestID=DefaultTrueBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
DefaultTrueBranch_1-4,35991,FOUND_AUTO_PROOF,"IsabelleResult(requestID=DefaultTrueBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
DefaultTrueBranch_1-5,42009,FOUND_AUTO_PROOF,"IsabelleResult(requestID=DefaultTrueBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
DistributeSubtraction_1-1,79473,FAILED,"IsabelleResult(requestID=DistributeSubtraction_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null)"
DistributeSubtraction_1-2,66214,FAILED,"IsabelleResult(requestID=DistributeSubtraction_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null)"
DistributeSubtraction_1-3,71784,FAILED,"IsabelleResult(requestID=DistributeSubtraction_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null)"
DistributeSubtraction_1-4,69090,FAILED,"IsabelleResult(requestID=DistributeSubtraction_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null)"
DistributeSubtraction_1-5,69049,FAILED,"IsabelleResult(requestID=DistributeSubtraction_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null)"
DivItself_1-1,129052,FAILED,"IsabelleResult(requestID=DivItself_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        Suc (0::nat) < Canonicalization.size (BinaryExpr BinDiv x x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<longrightarrow>
        BinaryExpr BinDiv x x \<sqsupseteq> ConstantExpr (IntVal b (1::64 word))
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null)"
DivItself_1-2,121728,FAILED,"IsabelleResult(requestID=DivItself_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        Suc (0::nat) < Canonicalization.size (BinaryExpr BinDiv x x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<longrightarrow>
        BinaryExpr BinDiv x x \<sqsupseteq> ConstantExpr (IntVal b (1::64 word))
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null)"
DivItself_1-3,138857,FAILED,"IsabelleResult(requestID=DivItself_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        Suc (0::nat) < Canonicalization.size (BinaryExpr BinDiv x x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<longrightarrow>
        BinaryExpr BinDiv x x \<sqsupseteq> ConstantExpr (IntVal b (1::64 word))
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null)"
DivItself_1-4,131010,FAILED,"IsabelleResult(requestID=DivItself_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        Suc (0::nat) < Canonicalization.size (BinaryExpr BinDiv x x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<longrightarrow>
        BinaryExpr BinDiv x x \<sqsupseteq> ConstantExpr (IntVal b (1::64 word))
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null)"
DivItself_1-5,131918,FAILED,"IsabelleResult(requestID=DivItself_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        Suc (0::nat) < Canonicalization.size (BinaryExpr BinDiv x x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<longrightarrow>
        BinaryExpr BinDiv x x \<sqsupseteq> ConstantExpr (IntVal b (1::64 word))
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null)"
EliminateRHS_64_1-1,71526,FAILED,"IsabelleResult(requestID=EliminateRHS_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (64::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinLeftShift x (ConstantExpr y) \<sqsupseteq> x
    variables:
        y :: Value
        hi, lo :: int
        x :: IRExpr], stackTrace=null)"
EliminateRHS_64_1-2,71949,FAILED,"IsabelleResult(requestID=EliminateRHS_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (64::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinLeftShift x (ConstantExpr y) \<sqsupseteq> x
    variables:
        y :: Value
        hi, lo :: int
        x :: IRExpr], stackTrace=null)"
EliminateRHS_64_1-3,69050,FAILED,"IsabelleResult(requestID=EliminateRHS_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (64::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinLeftShift x (ConstantExpr y) \<sqsupseteq> x
    variables:
        y :: Value
        hi, lo :: int
        x :: IRExpr], stackTrace=null)"
EliminateRHS_64_1-4,71917,FAILED,"IsabelleResult(requestID=EliminateRHS_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (64::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinLeftShift x (ConstantExpr y) \<sqsupseteq> x
    variables:
        y :: Value
        hi, lo :: int
        x :: IRExpr], stackTrace=null)"
EliminateRHS_64_1-5,71846,FAILED,"IsabelleResult(requestID=EliminateRHS_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (64::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinLeftShift x (ConstantExpr y) \<sqsupseteq> x
    variables:
        y :: Value
        hi, lo :: int
        x :: IRExpr], stackTrace=null)"
EliminateRedundantFalse_1-1,65536,FOUND_PROOF,"IsabelleResult(requestID=EliminateRedundantFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_elim_redundant_false by blast], isabelleMessages=null, stackTrace=null)"
EliminateRedundantFalse_1-2,65551,FOUND_PROOF,"IsabelleResult(requestID=EliminateRedundantFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_elim_redundant_false by blast], isabelleMessages=null, stackTrace=null)"
EliminateRedundantFalse_1-3,70111,FOUND_PROOF,"IsabelleResult(requestID=EliminateRedundantFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_elim_redundant_false by blast], isabelleMessages=null, stackTrace=null)"
EliminateRedundantFalse_1-4,69237,FOUND_PROOF,"IsabelleResult(requestID=EliminateRedundantFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_elim_redundant_false by blast], isabelleMessages=null, stackTrace=null)"
EliminateRedundantFalse_1-5,67128,FOUND_PROOF,"IsabelleResult(requestID=EliminateRedundantFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_elim_redundant_false by presburger], isabelleMessages=null, stackTrace=null)"
EliminateRedundantFalse_2-1,67431,FOUND_PROOF,"IsabelleResult(requestID=EliminateRedundantFalse_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_eliminate_redundant_false by presburger], isabelleMessages=null, stackTrace=null)"
EliminateRedundantFalse_2-2,75233,FOUND_PROOF,"IsabelleResult(requestID=EliminateRedundantFalse_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_eliminate_redundant_false by blast], isabelleMessages=null, stackTrace=null)"
EliminateRedundantFalse_2-3,64855,FOUND_PROOF,"IsabelleResult(requestID=EliminateRedundantFalse_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_eliminate_redundant_false by presburger], isabelleMessages=null, stackTrace=null)"
EliminateRedundantFalse_2-4,68813,FOUND_PROOF,"IsabelleResult(requestID=EliminateRedundantFalse_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_eliminate_redundant_false by presburger], isabelleMessages=null, stackTrace=null)"
EliminateRedundantFalse_2-5,66129,FOUND_PROOF,"IsabelleResult(requestID=EliminateRedundantFalse_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_eliminate_redundant_false by blast], isabelleMessages=null, stackTrace=null)"
EliminateRedundantNegative_1-1,74364,FAILED,"IsabelleResult(requestID=EliminateRedundantNegative_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinMul x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. BinaryExpr BinMul (UnaryExpr UnaryNeg x) (UnaryExpr UnaryNeg y) \<sqsupseteq>
        BinaryExpr BinMul x y
    variables:
        x, y :: IRExpr], stackTrace=null)"
EliminateRedundantNegative_1-2,71954,FAILED,"IsabelleResult(requestID=EliminateRedundantNegative_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinMul x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. BinaryExpr BinMul (UnaryExpr UnaryNeg x) (UnaryExpr UnaryNeg y) \<sqsupseteq>
        BinaryExpr BinMul x y
    variables:
        x, y :: IRExpr], stackTrace=null)"
EliminateRedundantNegative_1-3,69143,FAILED,"IsabelleResult(requestID=EliminateRedundantNegative_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinMul x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. BinaryExpr BinMul (UnaryExpr UnaryNeg x) (UnaryExpr UnaryNeg y) \<sqsupseteq>
        BinaryExpr BinMul x y
    variables:
        x, y :: IRExpr], stackTrace=null)"
EliminateRedundantNegative_1-4,71881,FAILED,"IsabelleResult(requestID=EliminateRedundantNegative_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinMul x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. BinaryExpr BinMul (UnaryExpr UnaryNeg x) (UnaryExpr UnaryNeg y) \<sqsupseteq>
        BinaryExpr BinMul x y
    variables:
        x, y :: IRExpr], stackTrace=null)"
EliminateRedundantNegative_1-5,69101,FAILED,"IsabelleResult(requestID=EliminateRedundantNegative_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinMul x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. BinaryExpr BinMul (UnaryExpr UnaryNeg x) (UnaryExpr UnaryNeg y) \<sqsupseteq>
        BinaryExpr BinMul x y
    variables:
        x, y :: IRExpr], stackTrace=null)"
MaskOutRHS_1-1,39008,NO_SUBGOAL,"IsabelleResult(requestID=MaskOutRHS_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
MaskOutRHS_1-2,38997,NO_SUBGOAL,"IsabelleResult(requestID=MaskOutRHS_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
MaskOutRHS_1-3,39002,NO_SUBGOAL,"IsabelleResult(requestID=MaskOutRHS_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
MaskOutRHS_1-4,38991,NO_SUBGOAL,"IsabelleResult(requestID=MaskOutRHS_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
MaskOutRHS_1-5,39000,NO_SUBGOAL,"IsabelleResult(requestID=MaskOutRHS_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
MulEliminator_1-1,76942,FOUND_PROOF,"IsabelleResult(requestID=MulEliminator_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_zero_64 by auto], isabelleMessages=null, stackTrace=null)"
MulEliminator_1-2,70055,FOUND_PROOF,"IsabelleResult(requestID=MulEliminator_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_zero_64 by auto], isabelleMessages=null, stackTrace=null)"
MulEliminator_1-3,77999,FOUND_PROOF,"IsabelleResult(requestID=MulEliminator_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_zero_64 by blast], isabelleMessages=null, stackTrace=null)"
MulEliminator_1-4,76816,FOUND_PROOF,"IsabelleResult(requestID=MulEliminator_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_zero_64 by blast], isabelleMessages=null, stackTrace=null)"
MulEliminator_1-5,72146,FOUND_PROOF,"IsabelleResult(requestID=MulEliminator_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_zero_64 by presburger], isabelleMessages=null, stackTrace=null)"
MulEliminator_2-1,31046,MALFORMED,"IsabelleResult(requestID=MulEliminator_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""i32exp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
MulEliminator_2-2,38989,MALFORMED,"IsabelleResult(requestID=MulEliminator_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""i32exp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
MulEliminator_2-3,38999,MALFORMED,"IsabelleResult(requestID=MulEliminator_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""i32exp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
MulEliminator_2-4,42011,MALFORMED,"IsabelleResult(requestID=MulEliminator_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""i32exp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
MulEliminator_2-5,35990,MALFORMED,"IsabelleResult(requestID=MulEliminator_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: ""i32exp""\<^here>, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
MulNegate_1-1,76856,FOUND_PROOF,"IsabelleResult(requestID=MulNegate_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_negative by presburger], isabelleMessages=null, stackTrace=null)"
MulNegate_1-2,71985,FOUND_PROOF,"IsabelleResult(requestID=MulNegate_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_negative by auto], isabelleMessages=null, stackTrace=null)"
MulNegate_1-3,70156,FOUND_PROOF,"IsabelleResult(requestID=MulNegate_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_negative by auto], isabelleMessages=null, stackTrace=null)"
MulNegate_1-4,73958,FOUND_PROOF,"IsabelleResult(requestID=MulNegate_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_negative by auto], isabelleMessages=null, stackTrace=null)"
MulNegate_1-5,72083,FOUND_PROOF,"IsabelleResult(requestID=MulNegate_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_negative by presburger], isabelleMessages=null, stackTrace=null)"
MulNegate_2-1,33956,MALFORMED,"IsabelleResult(requestID=MulNegate_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
MulNegate_2-2,42001,MALFORMED,"IsabelleResult(requestID=MulNegate_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
MulNegate_2-3,35999,MALFORMED,"IsabelleResult(requestID=MulNegate_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
MulNegate_2-4,39010,MALFORMED,"IsabelleResult(requestID=MulNegate_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
MulNegate_2-5,39000,MALFORMED,"IsabelleResult(requestID=MulNegate_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
MulNeutral_1-1,74081,FOUND_PROOF,"IsabelleResult(requestID=MulNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by blast], isabelleMessages=null, stackTrace=null)"
MulNeutral_1-2,65954,FOUND_PROOF,"IsabelleResult(requestID=MulNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by blast], isabelleMessages=null, stackTrace=null)"
MulNeutral_1-3,68994,FOUND_PROOF,"IsabelleResult(requestID=MulNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by presburger], isabelleMessages=null, stackTrace=null)"
MulNeutral_1-4,69034,FOUND_PROOF,"IsabelleResult(requestID=MulNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by blast], isabelleMessages=null, stackTrace=null)"
MulNeutral_1-5,70152,FOUND_PROOF,"IsabelleResult(requestID=MulNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by blast], isabelleMessages=null, stackTrace=null)"
MulNeutral_2-1,67971,FOUND_PROOF,"IsabelleResult(requestID=MulNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by blast], isabelleMessages=null, stackTrace=null)"
MulNeutral_2-2,70185,FOUND_PROOF,"IsabelleResult(requestID=MulNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by blast], isabelleMessages=null, stackTrace=null)"
MulNeutral_2-3,62614,FOUND_PROOF,"IsabelleResult(requestID=MulNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (meson exp_multiply_neutral)], isabelleMessages=null, stackTrace=null)"
MulNeutral_2-4,67605,FOUND_PROOF,"IsabelleResult(requestID=MulNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by presburger], isabelleMessages=null, stackTrace=null)"
MulNeutral_2-5,66375,FOUND_PROOF,"IsabelleResult(requestID=MulNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by presburger], isabelleMessages=null, stackTrace=null)"
MulPower2Add1_1-1,75275,FAILED,"IsabelleResult(requestID=MulPower2Add1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinAdd
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinAdd
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2Add1_1-2,71983,FAILED,"IsabelleResult(requestID=MulPower2Add1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinAdd
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinAdd
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2Add1_1-3,72018,FAILED,"IsabelleResult(requestID=MulPower2Add1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinAdd
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinAdd
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2Add1_1-4,72002,FAILED,"IsabelleResult(requestID=MulPower2Add1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinAdd
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinAdd
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2Add1_1-5,71998,FAILED,"IsabelleResult(requestID=MulPower2Add1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinAdd
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinAdd
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2Sub1_1-1,71498,FAILED,"IsabelleResult(requestID=MulPower2Sub1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinSub
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinSub
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2Sub1_1-2,69429,FAILED,"IsabelleResult(requestID=MulPower2Sub1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinSub
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinSub
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2Sub1_1-3,62881,FAILED,"IsabelleResult(requestID=MulPower2Sub1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinSub
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinSub
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2Sub1_1-4,71693,FAILED,"IsabelleResult(requestID=MulPower2Sub1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinSub
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinSub
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2Sub1_1-5,69210,FAILED,"IsabelleResult(requestID=MulPower2Sub1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinSub
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinSub
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2_1-1,66785,FAILED,"IsabelleResult(requestID=MulPower2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. i < (64::64 word) \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        (0::64 word) < i \<Longrightarrow>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<Longrightarrow> False
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i))) \<sqsupseteq>
        BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2_1-2,69094,FAILED,"IsabelleResult(requestID=MulPower2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. i < (64::64 word) \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        (0::64 word) < i \<Longrightarrow>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<Longrightarrow> False
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i))) \<sqsupseteq>
        BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2_1-3,66000,FAILED,"IsabelleResult(requestID=MulPower2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. i < (64::64 word) \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        (0::64 word) < i \<Longrightarrow>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<Longrightarrow> False
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i))) \<sqsupseteq>
        BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2_1-4,68907,FAILED,"IsabelleResult(requestID=MulPower2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. i < (64::64 word) \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        (0::64 word) < i \<Longrightarrow>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<Longrightarrow> False
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i))) \<sqsupseteq>
        BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
MulPower2_1-5,69070,FAILED,"IsabelleResult(requestID=MulPower2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. i < (64::64 word) \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        (0::64 word) < i \<Longrightarrow>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<Longrightarrow> False
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i))) \<sqsupseteq>
        BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null)"
NegateCancel_1-1,72430,FAILED,"IsabelleResult(requestID=NegateCancel_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. UnaryExpr UnaryNeg (UnaryExpr UnaryNeg x) \<sqsupseteq> x
    variables:
        x :: IRExpr], stackTrace=null)"
NegateCancel_1-2,71997,FAILED,"IsabelleResult(requestID=NegateCancel_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. UnaryExpr UnaryNeg (UnaryExpr UnaryNeg x) \<sqsupseteq> x
    variables:
        x :: IRExpr], stackTrace=null)"
NegateCancel_1-3,69229,FAILED,"IsabelleResult(requestID=NegateCancel_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. UnaryExpr UnaryNeg (UnaryExpr UnaryNeg x) \<sqsupseteq> x
    variables:
        x :: IRExpr], stackTrace=null)"
NegateCancel_1-4,65922,FAILED,"IsabelleResult(requestID=NegateCancel_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. UnaryExpr UnaryNeg (UnaryExpr UnaryNeg x) \<sqsupseteq> x
    variables:
        x :: IRExpr], stackTrace=null)"
NegateCancel_1-5,72264,FAILED,"IsabelleResult(requestID=NegateCancel_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. UnaryExpr UnaryNeg (UnaryExpr UnaryNeg x) \<sqsupseteq> x
    variables:
        x :: IRExpr], stackTrace=null)"
NegateConditionFlipBranches_1-1,72079,FAILED,"IsabelleResult(requestID=NegateConditionFlipBranches_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (UnaryExpr UnaryLogicNegation e) x y \<sqsupseteq>
        ConditionalExpr e y x
    variables:
        e, x, y :: IRExpr], stackTrace=null)"
NegateConditionFlipBranches_1-2,68997,FAILED,"IsabelleResult(requestID=NegateConditionFlipBranches_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (UnaryExpr UnaryLogicNegation e) x y \<sqsupseteq>
        ConditionalExpr e y x
    variables:
        e, x, y :: IRExpr], stackTrace=null)"
NegateConditionFlipBranches_1-3,71899,FAILED,"IsabelleResult(requestID=NegateConditionFlipBranches_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (UnaryExpr UnaryLogicNegation e) x y \<sqsupseteq>
        ConditionalExpr e y x
    variables:
        e, x, y :: IRExpr], stackTrace=null)"
NegateConditionFlipBranches_1-4,72040,FAILED,"IsabelleResult(requestID=NegateConditionFlipBranches_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (UnaryExpr UnaryLogicNegation e) x y \<sqsupseteq>
        ConditionalExpr e y x
    variables:
        e, x, y :: IRExpr], stackTrace=null)"
NegateConditionFlipBranches_1-5,72066,FAILED,"IsabelleResult(requestID=NegateConditionFlipBranches_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (UnaryExpr UnaryLogicNegation e) x y \<sqsupseteq>
        ConditionalExpr e y x
    variables:
        e, x, y :: IRExpr], stackTrace=null)"
NegativeShift_1-1,66862,FAILED,"IsabelleResult(requestID=NegativeShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b' lo hi \<and> unat y = b' - Suc (0::nat) \<longrightarrow>
        UnaryExpr UnaryNeg
         (BinaryExpr BinRightShift x (ConstantExpr (IntVal b (take_bit b y)))) \<sqsupseteq>
        BinaryExpr BinURightShift x (ConstantExpr (IntVal b (take_bit b y)))
    variables:
        y :: 64 word
        hi, lo :: int
        b, b' :: nat
        x :: IRExpr], stackTrace=null)"
NegativeShift_1-2,68955,FAILED,"IsabelleResult(requestID=NegativeShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b' lo hi \<and> unat y = b' - Suc (0::nat) \<longrightarrow>
        UnaryExpr UnaryNeg
         (BinaryExpr BinRightShift x (ConstantExpr (IntVal b (take_bit b y)))) \<sqsupseteq>
        BinaryExpr BinURightShift x (ConstantExpr (IntVal b (take_bit b y)))
    variables:
        y :: 64 word
        hi, lo :: int
        b, b' :: nat
        x :: IRExpr], stackTrace=null)"
NegativeShift_1-3,71972,FAILED,"IsabelleResult(requestID=NegativeShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b' lo hi \<and> unat y = b' - Suc (0::nat) \<longrightarrow>
        UnaryExpr UnaryNeg
         (BinaryExpr BinRightShift x (ConstantExpr (IntVal b (take_bit b y)))) \<sqsupseteq>
        BinaryExpr BinURightShift x (ConstantExpr (IntVal b (take_bit b y)))
    variables:
        y :: 64 word
        hi, lo :: int
        b, b' :: nat
        x :: IRExpr], stackTrace=null)"
NegativeShift_1-4,72099,FAILED,"IsabelleResult(requestID=NegativeShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b' lo hi \<and> unat y = b' - Suc (0::nat) \<longrightarrow>
        UnaryExpr UnaryNeg
         (BinaryExpr BinRightShift x (ConstantExpr (IntVal b (take_bit b y)))) \<sqsupseteq>
        BinaryExpr BinURightShift x (ConstantExpr (IntVal b (take_bit b y)))
    variables:
        y :: 64 word
        hi, lo :: int
        b, b' :: nat
        x :: IRExpr], stackTrace=null)"
NegativeShift_1-5,71856,FAILED,"IsabelleResult(requestID=NegativeShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b' lo hi \<and> unat y = b' - Suc (0::nat) \<longrightarrow>
        UnaryExpr UnaryNeg
         (BinaryExpr BinRightShift x (ConstantExpr (IntVal b (take_bit b y)))) \<sqsupseteq>
        BinaryExpr BinURightShift x (ConstantExpr (IntVal b (take_bit b y)))
    variables:
        y :: 64 word
        hi, lo :: int
        b, b' :: nat
        x :: IRExpr], stackTrace=null)"
NeverEqNotSelf_1-1,136948,FAILED,"IsabelleResult(requestID=NeverEqNotSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x)
     2. stamp_expr x = IntegerStamp (32::nat) xl xh \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        xh, xl :: int
        x :: IRExpr], stackTrace=null)"
NeverEqNotSelf_1-2,137428,FAILED,"IsabelleResult(requestID=NeverEqNotSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x)
     2. stamp_expr x = IntegerStamp (32::nat) xl xh \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        xh, xl :: int
        x :: IRExpr], stackTrace=null)"
NeverEqNotSelf_1-3,138451,FAILED,"IsabelleResult(requestID=NeverEqNotSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x)
     2. stamp_expr x = IntegerStamp (32::nat) xl xh \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        xh, xl :: int
        x :: IRExpr], stackTrace=null)"
NeverEqNotSelf_1-4,137244,FAILED,"IsabelleResult(requestID=NeverEqNotSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x)
     2. stamp_expr x = IntegerStamp (32::nat) xl xh \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        xh, xl :: int
        x :: IRExpr], stackTrace=null)"
NeverEqNotSelf_1-5,139626,FAILED,"IsabelleResult(requestID=NeverEqNotSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x)
     2. stamp_expr x = IntegerStamp (32::nat) xl xh \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        xh, xl :: int
        x :: IRExpr], stackTrace=null)"
NotCancel_1-1,69178,FOUND_PROOF,"IsabelleResult(requestID=NotCancel_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_not_cancel by blast], isabelleMessages=null, stackTrace=null)"
NotCancel_1-2,62817,FOUND_PROOF,"IsabelleResult(requestID=NotCancel_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_not_cancel by presburger], isabelleMessages=null, stackTrace=null)"
NotCancel_1-3,68085,FOUND_PROOF,"IsabelleResult(requestID=NotCancel_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_not_cancel by presburger], isabelleMessages=null, stackTrace=null)"
NotCancel_1-4,68973,FOUND_PROOF,"IsabelleResult(requestID=NotCancel_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_not_cancel by presburger], isabelleMessages=null, stackTrace=null)"
NotCancel_1-5,68955,FOUND_PROOF,"IsabelleResult(requestID=NotCancel_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_not_cancel by blast], isabelleMessages=null, stackTrace=null)"
NotXorToXor_1-1,197778,FAILED,"IsabelleResult(requestID=NotXorToXor_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) lx hx \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (32::nat) ly hy \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinXor x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. stamp_expr x = IntegerStamp (32::nat) lx hx \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (32::nat) ly hy \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        BinaryExpr BinXor x y
    variables:
        hx, hy, lx, ly :: int
        x, y :: IRExpr], stackTrace=null)"
NotXorToXor_1-2,197136,FAILED,"IsabelleResult(requestID=NotXorToXor_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) lx hx \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (32::nat) ly hy \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinXor x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. stamp_expr x = IntegerStamp (32::nat) lx hx \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (32::nat) ly hy \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        BinaryExpr BinXor x y
    variables:
        hx, hy, lx, ly :: int
        x, y :: IRExpr], stackTrace=null)"
NotXorToXor_1-3,170260,FAILED,"IsabelleResult(requestID=NotXorToXor_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) lx hx \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (32::nat) ly hy \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinXor x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. stamp_expr x = IntegerStamp (32::nat) lx hx \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (32::nat) ly hy \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        BinaryExpr BinXor x y
    variables:
        hx, hy, lx, ly :: int
        x, y :: IRExpr], stackTrace=null)"
NotXorToXor_1-4,214080,FAILED,"IsabelleResult(requestID=NotXorToXor_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) lx hx \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (32::nat) ly hy \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinXor x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. stamp_expr x = IntegerStamp (32::nat) lx hx \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (32::nat) ly hy \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        BinaryExpr BinXor x y
    variables:
        hx, hy, lx, ly :: int
        x, y :: IRExpr], stackTrace=null)"
NotXorToXor_1-5,160750,FAILED,"IsabelleResult(requestID=NotXorToXor_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) lx hx \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (32::nat) ly hy \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinXor x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. stamp_expr x = IntegerStamp (32::nat) lx hx \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (32::nat) ly hy \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        BinaryExpr BinXor x y
    variables:
        hx, hy, lx, ly :: int
        x, y :: IRExpr], stackTrace=null)"
OrEqual_1-1,66886,FOUND_PROOF,"IsabelleResult(requestID=OrEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_or_equal by blast], isabelleMessages=null, stackTrace=null)"
OrEqual_1-2,65654,FOUND_PROOF,"IsabelleResult(requestID=OrEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_or_equal by blast], isabelleMessages=null, stackTrace=null)"
OrEqual_1-3,63180,FOUND_PROOF,"IsabelleResult(requestID=OrEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_or_equal by blast], isabelleMessages=null, stackTrace=null)"
OrEqual_1-4,67823,FOUND_PROOF,"IsabelleResult(requestID=OrEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (meson exp_or_equal)], isabelleMessages=null, stackTrace=null)"
OrEqual_1-5,70382,FOUND_PROOF,"IsabelleResult(requestID=OrEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_or_equal by blast], isabelleMessages=null, stackTrace=null)"
OrInverse2_1-1,135380,FAILED,"IsabelleResult(requestID=OrInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinOr (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
OrInverse2_1-2,137374,FAILED,"IsabelleResult(requestID=OrInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinOr (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
OrInverse2_1-3,137224,FAILED,"IsabelleResult(requestID=OrInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinOr (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
OrInverse2_1-4,135820,FAILED,"IsabelleResult(requestID=OrInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinOr (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
OrInverse2_1-5,137066,FAILED,"IsabelleResult(requestID=OrInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinOr (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
OrInverse_1-1,62881,FAILED,"IsabelleResult(requestID=OrInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
OrInverse_1-2,62973,FAILED,"IsabelleResult(requestID=OrInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
OrInverse_1-3,62966,FAILED,"IsabelleResult(requestID=OrInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
OrInverse_1-4,68839,FAILED,"IsabelleResult(requestID=OrInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
OrInverse_1-5,66045,FAILED,"IsabelleResult(requestID=OrInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
OrNotOperands_1-1,71498,FAILED,"IsabelleResult(requestID=OrNotOperands_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAnd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinOr (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinAnd x y)
    variables:
        x, y :: IRExpr], stackTrace=null)"
OrNotOperands_1-2,69000,FAILED,"IsabelleResult(requestID=OrNotOperands_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAnd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinOr (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinAnd x y)
    variables:
        x, y :: IRExpr], stackTrace=null)"
OrNotOperands_1-3,69000,FAILED,"IsabelleResult(requestID=OrNotOperands_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAnd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinOr (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinAnd x y)
    variables:
        x, y :: IRExpr], stackTrace=null)"
OrNotOperands_1-4,72001,FAILED,"IsabelleResult(requestID=OrNotOperands_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAnd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinOr (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinAnd x y)
    variables:
        x, y :: IRExpr], stackTrace=null)"
OrNotOperands_1-5,66176,FAILED,"IsabelleResult(requestID=OrNotOperands_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAnd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinOr (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinAnd x y)
    variables:
        x, y :: IRExpr], stackTrace=null)"
OrShiftConstantRight_1-1,71503,FAILED,"IsabelleResult(requestID=OrShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinOr (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinOr (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinOr y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
OrShiftConstantRight_1-2,71992,FAILED,"IsabelleResult(requestID=OrShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinOr (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinOr (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinOr y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
OrShiftConstantRight_1-3,66168,FAILED,"IsabelleResult(requestID=OrShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinOr (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinOr (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinOr y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
OrShiftConstantRight_1-4,69016,FAILED,"IsabelleResult(requestID=OrShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinOr (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinOr (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinOr y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
OrShiftConstantRight_1-5,63094,FAILED,"IsabelleResult(requestID=OrShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinOr (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinOr (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinOr y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
RedundantAddSub_1-1,66194,FOUND_PROOF,"IsabelleResult(requestID=RedundantAddSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add2 by blast], isabelleMessages=null, stackTrace=null)"
RedundantAddSub_1-2,70086,FOUND_PROOF,"IsabelleResult(requestID=RedundantAddSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add2 by blast], isabelleMessages=null, stackTrace=null)"
RedundantAddSub_1-3,73953,FOUND_PROOF,"IsabelleResult(requestID=RedundantAddSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantAddSub_Exp by presburger], isabelleMessages=null, stackTrace=null)"
RedundantAddSub_1-4,72119,FOUND_PROOF,"IsabelleResult(requestID=RedundantAddSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantAddSub_Exp by blast], isabelleMessages=null, stackTrace=null)"
RedundantAddSub_1-5,69929,FOUND_PROOF,"IsabelleResult(requestID=RedundantAddSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (meson RedundantAddSub_Exp)], isabelleMessages=null, stackTrace=null)"
RedundantAddSub_2-1,38998,MALFORMED,"IsabelleResult(requestID=RedundantAddSub_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
RedundantAddSub_2-2,39000,MALFORMED,"IsabelleResult(requestID=RedundantAddSub_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
RedundantAddSub_2-3,38999,MALFORMED,"IsabelleResult(requestID=RedundantAddSub_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
RedundantAddSub_2-4,39001,MALFORMED,"IsabelleResult(requestID=RedundantAddSub_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
RedundantAddSub_2-5,38999,MALFORMED,"IsabelleResult(requestID=RedundantAddSub_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
RedundantSubAdd2_1-1,131998,FOUND_PROOF,"IsabelleResult(requestID=RedundantSubAdd2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_Suc_eq size_binary_lhs trans_less_add2), using RedundantSubAdd2(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
RedundantSubAdd2_1-2,144000,FOUND_PROOF,"IsabelleResult(requestID=RedundantSubAdd2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_eq_plus1 add.commute size_binary_lhs trans_less_add2), using RedundantSubAdd2(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
RedundantSubAdd2_1-3,147000,FOUND_PROOF,"IsabelleResult(requestID=RedundantSubAdd2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_SucI size_binary_lhs trans_less_add2), by (metis RedundantSubAdd2(1) rewrite_preservation.simps(1))], isabelleMessages=null, stackTrace=null)"
RedundantSubAdd2_1-4,147000,FOUND_PROOF,"IsabelleResult(requestID=RedundantSubAdd2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_SucI size_binary_lhs trans_less_add2), using RedundantSubAdd2(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
RedundantSubAdd2_1-5,132010,FOUND_PROOF,"IsabelleResult(requestID=RedundantSubAdd2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using less_Suc_eq size_binary_lhs trans_less_add2 apply presburger, by (metis RedundantSubAdd2(1) rewrite_preservation.simps(1))], isabelleMessages=null, stackTrace=null)"
RedundantSubAdd_1-1,86040,FOUND_PROOF,"IsabelleResult(requestID=RedundantSubAdd_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantSubAdd_Exp by blast], isabelleMessages=null, stackTrace=null)"
RedundantSubAdd_1-2,65989,FOUND_PROOF,"IsabelleResult(requestID=RedundantSubAdd_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantSubAdd_Exp by presburger], isabelleMessages=null, stackTrace=null)"
RedundantSubAdd_1-3,68947,FOUND_PROOF,"IsabelleResult(requestID=RedundantSubAdd_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantSubAdd_Exp by blast], isabelleMessages=null, stackTrace=null)"
RedundantSubAdd_1-4,69118,FOUND_PROOF,"IsabelleResult(requestID=RedundantSubAdd_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantSubAdd_Exp by blast], isabelleMessages=null, stackTrace=null)"
RedundantSubAdd_1-5,65929,FOUND_PROOF,"IsabelleResult(requestID=RedundantSubAdd_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantSubAdd_Exp by presburger], isabelleMessages=null, stackTrace=null)"
RedundantSubAdd_2-1,30962,MALFORMED,"IsabelleResult(requestID=RedundantSubAdd_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
RedundantSubAdd_2-2,39000,MALFORMED,"IsabelleResult(requestID=RedundantSubAdd_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
RedundantSubAdd_2-3,39000,MALFORMED,"IsabelleResult(requestID=RedundantSubAdd_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
RedundantSubAdd_2-4,39009,MALFORMED,"IsabelleResult(requestID=RedundantSubAdd_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
RedundantSubAdd_2-5,38991,MALFORMED,"IsabelleResult(requestID=RedundantSubAdd_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
ReturnXOnZeroShift_1-1,68576,FAILED,"IsabelleResult(requestID=ReturnXOnZeroShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinRightShift x
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        x
    variables:
        hi, lo :: int
        x :: IRExpr], stackTrace=null)"
ReturnXOnZeroShift_1-2,71932,FAILED,"IsabelleResult(requestID=ReturnXOnZeroShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinRightShift x
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        x
    variables:
        hi, lo :: int
        x :: IRExpr], stackTrace=null)"
ReturnXOnZeroShift_1-3,71970,FAILED,"IsabelleResult(requestID=ReturnXOnZeroShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinRightShift x
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        x
    variables:
        hi, lo :: int
        x :: IRExpr], stackTrace=null)"
ReturnXOnZeroShift_1-4,72031,FAILED,"IsabelleResult(requestID=ReturnXOnZeroShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinRightShift x
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        x
    variables:
        hi, lo :: int
        x :: IRExpr], stackTrace=null)"
ReturnXOnZeroShift_1-5,72051,FAILED,"IsabelleResult(requestID=ReturnXOnZeroShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinRightShift x
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        x
    variables:
        hi, lo :: int
        x :: IRExpr], stackTrace=null)"
SubAfterAddLeft_1-1,65257,FOUND_PROOF,"IsabelleResult(requestID=SubAfterAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add2 by blast], isabelleMessages=null, stackTrace=null)"
SubAfterAddLeft_1-2,75000,FOUND_PROOF,"IsabelleResult(requestID=SubAfterAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantAddSub_Exp by presburger], isabelleMessages=null, stackTrace=null)"
SubAfterAddLeft_1-3,75000,FOUND_PROOF,"IsabelleResult(requestID=SubAfterAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add2 by blast], isabelleMessages=null, stackTrace=null)"
SubAfterAddLeft_1-4,72000,FOUND_PROOF,"IsabelleResult(requestID=SubAfterAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantAddSub_Exp by blast], isabelleMessages=null, stackTrace=null)"
SubAfterAddLeft_1-5,73983,FOUND_PROOF,"IsabelleResult(requestID=SubAfterAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add2 by blast], isabelleMessages=null, stackTrace=null)"
SubAfterAddRight_1-1,67015,FOUND_PROOF,"IsabelleResult(requestID=SubAfterAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add by presburger], isabelleMessages=null, stackTrace=null)"
SubAfterAddRight_1-2,68999,FOUND_PROOF,"IsabelleResult(requestID=SubAfterAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (meson exp_sub_after_right_add)], isabelleMessages=null, stackTrace=null)"
SubAfterAddRight_1-3,74073,FOUND_PROOF,"IsabelleResult(requestID=SubAfterAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add by blast], isabelleMessages=null, stackTrace=null)"
SubAfterAddRight_1-4,70282,FOUND_PROOF,"IsabelleResult(requestID=SubAfterAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add by blast], isabelleMessages=null, stackTrace=null)"
SubAfterAddRight_1-5,67757,FOUND_PROOF,"IsabelleResult(requestID=SubAfterAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add by presburger], isabelleMessages=null, stackTrace=null)"
SubAfterSubLeft_1-1,71440,FAILED,"IsabelleResult(requestID=SubAfterSubLeft_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinSub (BinaryExpr BinSub x y) x)
     2. BinaryExpr BinSub (BinaryExpr BinSub x y) x \<sqsupseteq> UnaryExpr UnaryNeg y
    variables:
        x, y :: IRExpr], stackTrace=null)"
SubAfterSubLeft_1-2,72130,FAILED,"IsabelleResult(requestID=SubAfterSubLeft_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinSub (BinaryExpr BinSub x y) x)
     2. BinaryExpr BinSub (BinaryExpr BinSub x y) x \<sqsupseteq> UnaryExpr UnaryNeg y
    variables:
        x, y :: IRExpr], stackTrace=null)"
SubAfterSubLeft_1-3,71852,FAILED,"IsabelleResult(requestID=SubAfterSubLeft_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinSub (BinaryExpr BinSub x y) x)
     2. BinaryExpr BinSub (BinaryExpr BinSub x y) x \<sqsupseteq> UnaryExpr UnaryNeg y
    variables:
        x, y :: IRExpr], stackTrace=null)"
SubAfterSubLeft_1-4,69170,FAILED,"IsabelleResult(requestID=SubAfterSubLeft_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinSub (BinaryExpr BinSub x y) x)
     2. BinaryExpr BinSub (BinaryExpr BinSub x y) x \<sqsupseteq> UnaryExpr UnaryNeg y
    variables:
        x, y :: IRExpr], stackTrace=null)"
SubAfterSubLeft_1-5,65988,FAILED,"IsabelleResult(requestID=SubAfterSubLeft_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinSub (BinaryExpr BinSub x y) x)
     2. BinaryExpr BinSub (BinaryExpr BinSub x y) x \<sqsupseteq> UnaryExpr UnaryNeg y
    variables:
        x, y :: IRExpr], stackTrace=null)"
SubNegativeConstant_1-1,28301,NO_SUBGOAL,"IsabelleResult(requestID=SubNegativeConstant_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
SubNegativeConstant_1-2,39001,NO_SUBGOAL,"IsabelleResult(requestID=SubNegativeConstant_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
SubNegativeConstant_1-3,39010,NO_SUBGOAL,"IsabelleResult(requestID=SubNegativeConstant_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
SubNegativeConstant_1-4,38991,NO_SUBGOAL,"IsabelleResult(requestID=SubNegativeConstant_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
SubNegativeConstant_1-5,39000,NO_SUBGOAL,"IsabelleResult(requestID=SubNegativeConstant_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
SubNegativeConstant_2-1,47996,FOUND_COUNTEREXAMPLE,"IsabelleResult(requestID=SubNegativeConstant_2, status=FOUND_COUNTEREXAMPLE, message=null, counterexample=Nitpick found a counterexample:
      Empty assignment, proofs=null, isabelleMessages=null, stackTrace=null)"
SubNegativeConstant_2-2,39000,FOUND_COUNTEREXAMPLE,"IsabelleResult(requestID=SubNegativeConstant_2, status=FOUND_COUNTEREXAMPLE, message=null, counterexample=Nitpick found a counterexample:
      Empty assignment, proofs=null, isabelleMessages=null, stackTrace=null)"
SubNegativeConstant_2-3,39010,FOUND_COUNTEREXAMPLE,"IsabelleResult(requestID=SubNegativeConstant_2, status=FOUND_COUNTEREXAMPLE, message=null, counterexample=Nitpick found a counterexample:
      Empty assignment, proofs=null, isabelleMessages=null, stackTrace=null)"
SubNegativeConstant_2-4,38990,FOUND_COUNTEREXAMPLE,"IsabelleResult(requestID=SubNegativeConstant_2, status=FOUND_COUNTEREXAMPLE, message=null, counterexample=Nitpick found a counterexample:
      Empty assignment, proofs=null, isabelleMessages=null, stackTrace=null)"
SubNegativeConstant_2-5,39000,FOUND_COUNTEREXAMPLE,"IsabelleResult(requestID=SubNegativeConstant_2, status=FOUND_COUNTEREXAMPLE, message=null, counterexample=Nitpick found a counterexample:
      Empty assignment, proofs=null, isabelleMessages=null, stackTrace=null)"
SubNegativeValue_1-1,73398,FAILED,"IsabelleResult(requestID=SubNegativeValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAdd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinSub x (UnaryExpr UnaryNeg y) \<sqsupseteq> BinaryExpr BinAdd x y
    variables:
        x, y :: IRExpr], stackTrace=null)"
SubNegativeValue_1-2,72014,FAILED,"IsabelleResult(requestID=SubNegativeValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAdd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinSub x (UnaryExpr UnaryNeg y) \<sqsupseteq> BinaryExpr BinAdd x y
    variables:
        x, y :: IRExpr], stackTrace=null)"
SubNegativeValue_1-3,71995,FAILED,"IsabelleResult(requestID=SubNegativeValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAdd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinSub x (UnaryExpr UnaryNeg y) \<sqsupseteq> BinaryExpr BinAdd x y
    variables:
        x, y :: IRExpr], stackTrace=null)"
SubNegativeValue_1-4,71991,FAILED,"IsabelleResult(requestID=SubNegativeValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAdd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinSub x (UnaryExpr UnaryNeg y) \<sqsupseteq> BinaryExpr BinAdd x y
    variables:
        x, y :: IRExpr], stackTrace=null)"
SubNegativeValue_1-5,72009,FAILED,"IsabelleResult(requestID=SubNegativeValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAdd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinSub x (UnaryExpr UnaryNeg y) \<sqsupseteq> BinaryExpr BinAdd x y
    variables:
        x, y :: IRExpr], stackTrace=null)"
SubSelfIsZero_1-1,67346,FAILED,"IsabelleResult(requestID=SubSelfIsZero_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        wf_stamp (BinaryExpr BinSub x x) \<Longrightarrow>
        Canonicalization.size
         (forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x))
           (0::'a))
        < Canonicalization.size (BinaryExpr BinSub x x)
     2. wf_stamp x \<and> wf_stamp (BinaryExpr BinSub x x) \<longrightarrow>
        BinaryExpr BinSub x x \<sqsupseteq>
        forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x)) (0::'a)
    variables:
        forPrimitive :: Stamp \<Rightarrow> 'a \<Rightarrow> IRExpr
        x :: IRExpr], stackTrace=null)"
SubSelfIsZero_1-2,66230,FAILED,"IsabelleResult(requestID=SubSelfIsZero_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        wf_stamp (BinaryExpr BinSub x x) \<Longrightarrow>
        Canonicalization.size
         (forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x))
           (0::'a))
        < Canonicalization.size (BinaryExpr BinSub x x)
     2. wf_stamp x \<and> wf_stamp (BinaryExpr BinSub x x) \<longrightarrow>
        BinaryExpr BinSub x x \<sqsupseteq>
        forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x)) (0::'a)
    variables:
        forPrimitive :: Stamp \<Rightarrow> 'a \<Rightarrow> IRExpr
        x :: IRExpr], stackTrace=null)"
SubSelfIsZero_1-3,68843,FAILED,"IsabelleResult(requestID=SubSelfIsZero_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        wf_stamp (BinaryExpr BinSub x x) \<Longrightarrow>
        Canonicalization.size
         (forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x))
           (0::'a))
        < Canonicalization.size (BinaryExpr BinSub x x)
     2. wf_stamp x \<and> wf_stamp (BinaryExpr BinSub x x) \<longrightarrow>
        BinaryExpr BinSub x x \<sqsupseteq>
        forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x)) (0::'a)
    variables:
        forPrimitive :: Stamp \<Rightarrow> 'a \<Rightarrow> IRExpr
        x :: IRExpr], stackTrace=null)"
SubSelfIsZero_1-4,71897,FAILED,"IsabelleResult(requestID=SubSelfIsZero_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        wf_stamp (BinaryExpr BinSub x x) \<Longrightarrow>
        Canonicalization.size
         (forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x))
           (0::'a))
        < Canonicalization.size (BinaryExpr BinSub x x)
     2. wf_stamp x \<and> wf_stamp (BinaryExpr BinSub x x) \<longrightarrow>
        BinaryExpr BinSub x x \<sqsupseteq>
        forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x)) (0::'a)
    variables:
        forPrimitive :: Stamp \<Rightarrow> 'a \<Rightarrow> IRExpr
        x :: IRExpr], stackTrace=null)"
SubSelfIsZero_1-5,66030,FAILED,"IsabelleResult(requestID=SubSelfIsZero_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        wf_stamp (BinaryExpr BinSub x x) \<Longrightarrow>
        Canonicalization.size
         (forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x))
           (0::'a))
        < Canonicalization.size (BinaryExpr BinSub x x)
     2. wf_stamp x \<and> wf_stamp (BinaryExpr BinSub x x) \<longrightarrow>
        BinaryExpr BinSub x x \<sqsupseteq>
        forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x)) (0::'a)
    variables:
        forPrimitive :: Stamp \<Rightarrow> 'a \<Rightarrow> IRExpr
        x :: IRExpr], stackTrace=null)"
SubSelfIsZero_2-1,147238,FOUND_PROOF,"IsabelleResult(requestID=SubSelfIsZero_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI order.asym size_binary_rhs size_pos), using SubSelfIsZero(1) by force], isabelleMessages=null, stackTrace=null)"
SubSelfIsZero_2-2,192000,FOUND_PROOF,"IsabelleResult(requestID=SubSelfIsZero_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI less_numeral_extra(3) less_one size_binary_lhs size_pos), using SubSelfIsZero(1) by auto], isabelleMessages=null, stackTrace=null)"
SubSelfIsZero_2-3,173999,FOUND_PROOF,"IsabelleResult(requestID=SubSelfIsZero_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI less_numeral_extra(3) less_one size_binary_rhs size_pos), using SubSelfIsZero(1) by force], isabelleMessages=null, stackTrace=null)"
SubSelfIsZero_2-4,174011,FOUND_PROOF,"IsabelleResult(requestID=SubSelfIsZero_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI order.asym size_binary_rhs size_pos), using SubSelfIsZero(1) by auto], isabelleMessages=null, stackTrace=null)"
SubSelfIsZero_2-5,200990,FOUND_PROOF,"IsabelleResult(requestID=SubSelfIsZero_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI order.asym size_binary_rhs size_pos), using SubSelfIsZero(1) by auto], isabelleMessages=null, stackTrace=null)"
SubThenAddLeft_1-1,121835,FOUND_PROOF,"IsabelleResult(requestID=SubThenAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddLeft(1) by auto], isabelleMessages=null, stackTrace=null)"
SubThenAddLeft_1-2,72232,FOUND_PROOF,"IsabelleResult(requestID=SubThenAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddLeft(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
SubThenAddLeft_1-3,68909,FOUND_PROOF,"IsabelleResult(requestID=SubThenAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddLeft(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
SubThenAddLeft_1-4,70032,FOUND_PROOF,"IsabelleResult(requestID=SubThenAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddLeft(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
SubThenAddLeft_1-5,71999,FOUND_PROOF,"IsabelleResult(requestID=SubThenAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddLeft(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
SubThenAddRight_1-1,71988,FOUND_PROOF,"IsabelleResult(requestID=SubThenAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddRight(1) by force], isabelleMessages=null, stackTrace=null)"
SubThenAddRight_1-2,70977,FOUND_PROOF,"IsabelleResult(requestID=SubThenAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddRight(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null)"
SubThenAddRight_1-3,67022,FOUND_PROOF,"IsabelleResult(requestID=SubThenAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddRight(1) by auto], isabelleMessages=null, stackTrace=null)"
SubThenAddRight_1-4,73802,FOUND_PROOF,"IsabelleResult(requestID=SubThenAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddRight(1) by force], isabelleMessages=null, stackTrace=null)"
SubThenAddRight_1-5,70208,FOUND_PROOF,"IsabelleResult(requestID=SubThenAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddRight(1) by auto], isabelleMessages=null, stackTrace=null)"
SubThenSubLeft_1-1,122997,FOUND_PROOF,"IsabelleResult(requestID=SubThenSubLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_Suc_eq size_binary_rhs trans_less_add2), using exp_sub_then_left_sub by blast], isabelleMessages=null, stackTrace=null)"
SubThenSubLeft_1-2,155991,FOUND_PROOF,"IsabelleResult(requestID=SubThenSubLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_Suc_eq size_binary_rhs trans_less_add2), using exp_sub_then_left_sub by blast], isabelleMessages=null, stackTrace=null)"
SubThenSubLeft_1-3,174000,FOUND_PROOF,"IsabelleResult(requestID=SubThenSubLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_SucI size_binary_rhs trans_less_add2), using exp_sub_then_left_sub by presburger], isabelleMessages=null, stackTrace=null)"
SubThenSubLeft_1-4,159001,FOUND_PROOF,"IsabelleResult(requestID=SubThenSubLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_SucI size_binary_rhs trans_less_add2), using exp_sub_then_left_sub by presburger], isabelleMessages=null, stackTrace=null)"
SubThenSubLeft_1-5,153009,FOUND_PROOF,"IsabelleResult(requestID=SubThenSubLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_Suc_eq size_binary_rhs trans_less_add2), using exp_sub_then_left_sub by presburger], isabelleMessages=null, stackTrace=null)"
SubtractZero_1-1,101987,FOUND_PROOF,"IsabelleResult(requestID=SubtractZero_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubtractZero_Exp by blast], isabelleMessages=null, stackTrace=null)"
SubtractZero_1-2,71060,FOUND_PROOF,"IsabelleResult(requestID=SubtractZero_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubtractZero_Exp by presburger], isabelleMessages=null, stackTrace=null)"
SubtractZero_1-3,65986,FOUND_PROOF,"IsabelleResult(requestID=SubtractZero_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubtractZero_Exp by blast], isabelleMessages=null, stackTrace=null)"
SubtractZero_1-4,66102,FOUND_PROOF,"IsabelleResult(requestID=SubtractZero_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubtractZero_Exp by presburger], isabelleMessages=null, stackTrace=null)"
SubtractZero_1-5,65939,FOUND_PROOF,"IsabelleResult(requestID=SubtractZero_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubtractZero_Exp by blast], isabelleMessages=null, stackTrace=null)"
UnaryConstantFold_1-1,30921,MALFORMED,"IsabelleResult(requestID=UnaryConstantFold_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
UnaryConstantFold_1-2,38992,MALFORMED,"IsabelleResult(requestID=UnaryConstantFold_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
UnaryConstantFold_1-3,39010,MALFORMED,"IsabelleResult(requestID=UnaryConstantFold_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
UnaryConstantFold_1-4,38989,MALFORMED,"IsabelleResult(requestID=UnaryConstantFold_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
UnaryConstantFold_1-5,39000,MALFORMED,"IsabelleResult(requestID=UnaryConstantFold_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "".""\<^here> -- using reset state], stackTrace=null)"
WrongAddSub_1-1,78610,FAILED,"IsabelleResult(requestID=WrongAddSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinSub (BinaryExpr BinAdd b a) b \<sqsupseteq> b
    variables:
        a, b :: IRExpr], stackTrace=null)"
WrongAddSub_1-2,66131,FAILED,"IsabelleResult(requestID=WrongAddSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinSub (BinaryExpr BinAdd b a) b \<sqsupseteq> b
    variables:
        a, b :: IRExpr], stackTrace=null)"
WrongAddSub_1-3,71817,FAILED,"IsabelleResult(requestID=WrongAddSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinSub (BinaryExpr BinAdd b a) b \<sqsupseteq> b
    variables:
        a, b :: IRExpr], stackTrace=null)"
WrongAddSub_1-4,72202,FAILED,"IsabelleResult(requestID=WrongAddSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinSub (BinaryExpr BinAdd b a) b \<sqsupseteq> b
    variables:
        a, b :: IRExpr], stackTrace=null)"
WrongAddSub_1-5,68885,FAILED,"IsabelleResult(requestID=WrongAddSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinSub (BinaryExpr BinAdd b a) b \<sqsupseteq> b
    variables:
        a, b :: IRExpr], stackTrace=null)"
XorEqNeg1_64_1-1,73202,FAILED,"IsabelleResult(requestID=XorEqNeg1_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x + Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor x y)
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (- (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (UnaryExpr UnaryNot y)
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null)"
XorEqNeg1_64_1-2,65909,FAILED,"IsabelleResult(requestID=XorEqNeg1_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x + Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor x y)
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (- (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (UnaryExpr UnaryNot y)
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null)"
XorEqNeg1_64_1-3,71761,FAILED,"IsabelleResult(requestID=XorEqNeg1_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x + Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor x y)
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (- (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (UnaryExpr UnaryNot y)
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null)"
XorEqNeg1_64_1-4,69162,FAILED,"IsabelleResult(requestID=XorEqNeg1_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x + Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor x y)
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (- (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (UnaryExpr UnaryNot y)
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null)"
XorEqNeg1_64_1-5,69051,FAILED,"IsabelleResult(requestID=XorEqNeg1_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x + Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor x y)
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (- (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (UnaryExpr UnaryNot y)
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null)"
XorEqZero_64_1-1,130434,FAILED,"IsabelleResult(requestID=XorEqZero_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals x y)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (0::64 word))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x y
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null)"
XorEqZero_64_1-2,132163,FAILED,"IsabelleResult(requestID=XorEqZero_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals x y)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (0::64 word))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x y
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null)"
XorEqZero_64_1-3,137715,FAILED,"IsabelleResult(requestID=XorEqZero_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals x y)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (0::64 word))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x y
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null)"
XorEqZero_64_1-4,134691,FAILED,"IsabelleResult(requestID=XorEqZero_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals x y)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (0::64 word))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x y
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null)"
XorEqZero_64_1-5,132431,FAILED,"IsabelleResult(requestID=XorEqZero_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals x y)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (0::64 word))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x y
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough1_1-1,70526,FAILED,"IsabelleResult(requestID=XorFallThrough1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough1_1-2,71923,FAILED,"IsabelleResult(requestID=XorFallThrough1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough1_1-3,66099,FAILED,"IsabelleResult(requestID=XorFallThrough1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough1_1-4,71902,FAILED,"IsabelleResult(requestID=XorFallThrough1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough1_1-5,69014,FAILED,"IsabelleResult(requestID=XorFallThrough1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough2_1-1,65339,FAILED,"IsabelleResult(requestID=XorFallThrough2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals x (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough2_1-2,71779,FAILED,"IsabelleResult(requestID=XorFallThrough2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals x (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough2_1-3,66150,FAILED,"IsabelleResult(requestID=XorFallThrough2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals x (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough2_1-4,71851,FAILED,"IsabelleResult(requestID=XorFallThrough2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals x (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough2_1-5,66281,FAILED,"IsabelleResult(requestID=XorFallThrough2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals x (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough3_1-1,72681,FAILED,"IsabelleResult(requestID=XorFallThrough3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough3_1-2,71921,FAILED,"IsabelleResult(requestID=XorFallThrough3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough3_1-3,66111,FAILED,"IsabelleResult(requestID=XorFallThrough3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough3_1-4,69133,FAILED,"IsabelleResult(requestID=XorFallThrough3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough3_1-5,68772,FAILED,"IsabelleResult(requestID=XorFallThrough3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough4_1-1,71101,FAILED,"IsabelleResult(requestID=XorFallThrough4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals y (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough4_1-2,69204,FAILED,"IsabelleResult(requestID=XorFallThrough4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals y (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough4_1-3,71779,FAILED,"IsabelleResult(requestID=XorFallThrough4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals y (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough4_1-4,72008,FAILED,"IsabelleResult(requestID=XorFallThrough4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals y (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorFallThrough4_1-5,69154,FAILED,"IsabelleResult(requestID=XorFallThrough4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals y (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null)"
XorInverse2_1-1,146103,FAILED,"IsabelleResult(requestID=XorInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinXor (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
XorInverse2_1-2,148577,FAILED,"IsabelleResult(requestID=XorInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinXor (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
XorInverse2_1-3,145396,FAILED,"IsabelleResult(requestID=XorInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinXor (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
XorInverse2_1-4,137851,FAILED,"IsabelleResult(requestID=XorInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinXor (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
XorInverse2_1-5,147416,FAILED,"IsabelleResult(requestID=XorInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinXor (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
XorInverse_1-1,68179,FAILED,"IsabelleResult(requestID=XorInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
XorInverse_1-2,68826,FAILED,"IsabelleResult(requestID=XorInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
XorInverse_1-3,66134,FAILED,"IsabelleResult(requestID=XorInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
XorInverse_1-4,68842,FAILED,"IsabelleResult(requestID=XorInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
XorInverse_1-5,69008,FAILED,"IsabelleResult(requestID=XorInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null)"
XorIsEqual_64_1_1-1,225923,FAILED,"IsabelleResult(requestID=XorIsEqual_64_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_1_1-2,250848,FAILED,"IsabelleResult(requestID=XorIsEqual_64_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_1_1-3,169803,FAILED,"IsabelleResult(requestID=XorIsEqual_64_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_1_1-4,247738,FAILED,"IsabelleResult(requestID=XorIsEqual_64_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_1_1-5,247656,FAILED,"IsabelleResult(requestID=XorIsEqual_64_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_2_1-1,72290,FAILED,"IsabelleResult(requestID=XorIsEqual_64_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_2_1-2,71952,FAILED,"IsabelleResult(requestID=XorIsEqual_64_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_2_1-3,72295,FAILED,"IsabelleResult(requestID=XorIsEqual_64_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_2_1-4,71435,FAILED,"IsabelleResult(requestID=XorIsEqual_64_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_2_1-5,72064,FAILED,"IsabelleResult(requestID=XorIsEqual_64_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_3_1-1,69085,FAILED,"IsabelleResult(requestID=XorIsEqual_64_3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_3_1-2,72057,FAILED,"IsabelleResult(requestID=XorIsEqual_64_3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_3_1-3,71856,FAILED,"IsabelleResult(requestID=XorIsEqual_64_3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_3_1-4,72214,FAILED,"IsabelleResult(requestID=XorIsEqual_64_3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_3_1-5,72211,FAILED,"IsabelleResult(requestID=XorIsEqual_64_3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_4_1-1,708200,FAILED,"IsabelleResult(requestID=XorIsEqual_64_4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_4_1-2,146785,FAILED,"IsabelleResult(requestID=XorIsEqual_64_4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_4_1-3,172372,FAILED,"IsabelleResult(requestID=XorIsEqual_64_4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_4_1-4,146098,FAILED,"IsabelleResult(requestID=XorIsEqual_64_4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorIsEqual_64_4_1-5,177913,FAILED,"IsabelleResult(requestID=XorIsEqual_64_4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null)"
XorSelfIsFalse_1-1,125941,FOUND_PROOF,"IsabelleResult(requestID=XorSelfIsFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI less_numeral_extra(3) less_one size_binary_lhs size_pos), using exp_xor_self_is_false by auto], isabelleMessages=null, stackTrace=null)"
XorSelfIsFalse_1-2,155999,FOUND_PROOF,"IsabelleResult(requestID=XorSelfIsFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI less_numeral_extra(3) less_one size_binary_lhs size_pos), using exp_xor_self_is_false by auto], isabelleMessages=null, stackTrace=null)"
XorSelfIsFalse_1-3,147000,FOUND_PROOF,"IsabelleResult(requestID=XorSelfIsFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI not_less_eq size_binary_rhs size_pos), using default_stamp exp_xor_self_is_false by presburger], isabelleMessages=null, stackTrace=null)"
XorSelfIsFalse_1-4,126000,FOUND_PROOF,"IsabelleResult(requestID=XorSelfIsFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI not_less_eq size_binary_lhs size_pos), using default_stamp exp_xor_self_is_false by presburger], isabelleMessages=null, stackTrace=null)"
XorSelfIsFalse_1-5,126009,FOUND_PROOF,"IsabelleResult(requestID=XorSelfIsFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI not_less_eq size_binary_lhs size_pos), using default_stamp exp_xor_self_is_false by presburger], isabelleMessages=null, stackTrace=null)"
XorShiftConstantRight_1-1,82412,FAILED,"IsabelleResult(requestID=XorShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinXor (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinXor y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
XorShiftConstantRight_1-2,72039,FAILED,"IsabelleResult(requestID=XorShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinXor (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinXor y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
XorShiftConstantRight_1-3,66161,FAILED,"IsabelleResult(requestID=XorShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinXor (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinXor y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
XorShiftConstantRight_1-4,71780,FAILED,"IsabelleResult(requestID=XorShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinXor (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinXor y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
XorShiftConstantRight_1-5,72086,FAILED,"IsabelleResult(requestID=XorShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinXor (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinXor y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null)"
ZeroSubtractValue_1-1,65768,FAILED,"IsabelleResult(requestID=ZeroSubtractValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        \<not> is_ConstantExpr x \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<and> \<not> is_ConstantExpr x \<longrightarrow>
        BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x \<sqsupseteq>
        UnaryExpr UnaryNeg x
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null)"
ZeroSubtractValue_1-2,68998,FAILED,"IsabelleResult(requestID=ZeroSubtractValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        \<not> is_ConstantExpr x \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<and> \<not> is_ConstantExpr x \<longrightarrow>
        BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x \<sqsupseteq>
        UnaryExpr UnaryNeg x
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null)"
ZeroSubtractValue_1-3,71881,FAILED,"IsabelleResult(requestID=ZeroSubtractValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        \<not> is_ConstantExpr x \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<and> \<not> is_ConstantExpr x \<longrightarrow>
        BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x \<sqsupseteq>
        UnaryExpr UnaryNeg x
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null)"
ZeroSubtractValue_1-4,72032,FAILED,"IsabelleResult(requestID=ZeroSubtractValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        \<not> is_ConstantExpr x \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<and> \<not> is_ConstantExpr x \<longrightarrow>
        BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x \<sqsupseteq>
        UnaryExpr UnaryNeg x
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null)"
ZeroSubtractValue_1-5,72018,FAILED,"IsabelleResult(requestID=ZeroSubtractValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        \<not> is_ConstantExpr x \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<and> \<not> is_ConstantExpr x \<longrightarrow>
        BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x \<sqsupseteq>
        UnaryExpr UnaryNeg x
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null)"
condition_bounds_x_1-1,69314,FOUND_PROOF,"IsabelleResult(requestID=condition_bounds_x_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null)"
condition_bounds_x_1-2,69016,FOUND_PROOF,"IsabelleResult(requestID=condition_bounds_x_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null)"
condition_bounds_x_1-3,68687,FOUND_PROOF,"IsabelleResult(requestID=condition_bounds_x_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null)"
condition_bounds_x_1-4,69211,FOUND_PROOF,"IsabelleResult(requestID=condition_bounds_x_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null)"
condition_bounds_x_1-5,69180,FOUND_PROOF,"IsabelleResult(requestID=condition_bounds_x_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null)"
condition_bounds_y_1-1,65921,FOUND_PROOF,"IsabelleResult(requestID=condition_bounds_y_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_y(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null)"
condition_bounds_y_1-2,68651,FOUND_PROOF,"IsabelleResult(requestID=condition_bounds_y_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_y(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null)"
condition_bounds_y_1-3,66268,FOUND_PROOF,"IsabelleResult(requestID=condition_bounds_y_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_y(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null)"
condition_bounds_y_1-4,66137,FOUND_PROOF,"IsabelleResult(requestID=condition_bounds_y_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_y(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null)"
condition_bounds_y_1-5,65984,FOUND_PROOF,"IsabelleResult(requestID=condition_bounds_y_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_y(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null)"
distribute_sub_1-1,71812,FAILED,"IsabelleResult(requestID=distribute_sub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null)"
distribute_sub_1-2,69245,FAILED,"IsabelleResult(requestID=distribute_sub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null)"
distribute_sub_1-3,65964,FAILED,"IsabelleResult(requestID=distribute_sub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null)"
distribute_sub_1-4,71836,FAILED,"IsabelleResult(requestID=distribute_sub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null)"
distribute_sub_1-5,71951,FAILED,"IsabelleResult(requestID=distribute_sub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null)"
flipX2_1-1,29240,FOUND_AUTO_PROOF,"IsabelleResult(requestID=flipX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
flipX2_1-2,42000,FOUND_AUTO_PROOF,"IsabelleResult(requestID=flipX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
flipX2_1-3,35990,FOUND_AUTO_PROOF,"IsabelleResult(requestID=flipX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
flipX2_1-4,42011,FOUND_AUTO_PROOF,"IsabelleResult(requestID=flipX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
flipX2_1-5,35999,FOUND_AUTO_PROOF,"IsabelleResult(requestID=flipX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
flipX_1-1,39006,FOUND_AUTO_PROOF,"IsabelleResult(requestID=flipX_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
flipX_1-2,44992,FOUND_PROOF,"IsabelleResult(requestID=flipX_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
flipX_1-3,32998,FOUND_AUTO_PROOF,"IsabelleResult(requestID=flipX_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
flipX_1-4,38991,FOUND_AUTO_PROOF,"IsabelleResult(requestID=flipX_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
flipX_1-5,39000,FOUND_AUTO_PROOF,"IsabelleResult(requestID=flipX_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
normalizeX2_1-1,28798,FOUND_AUTO_PROOF,"IsabelleResult(requestID=normalizeX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
normalizeX2_1-2,39003,FOUND_AUTO_PROOF,"IsabelleResult(requestID=normalizeX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
normalizeX2_1-3,38988,FOUND_AUTO_PROOF,"IsabelleResult(requestID=normalizeX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
normalizeX2_1-4,48002,FOUND_PROOF,"IsabelleResult(requestID=normalizeX2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
normalizeX2_1-5,29999,FOUND_AUTO_PROOF,"IsabelleResult(requestID=normalizeX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null)"
normalizeX_1-1,78550,FOUND_PROOF,"IsabelleResult(requestID=normalizeX_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using normalizeX(1) by auto], isabelleMessages=null, stackTrace=null)"
normalizeX_1-2,68490,FOUND_PROOF,"IsabelleResult(requestID=normalizeX_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using normalizeX(1) by auto], isabelleMessages=null, stackTrace=null)"
normalizeX_1-3,69621,FOUND_PROOF,"IsabelleResult(requestID=normalizeX_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using normalizeX(1) by auto], isabelleMessages=null, stackTrace=null)"
normalizeX_1-4,67266,FOUND_PROOF,"IsabelleResult(requestID=normalizeX_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using normalizeX(1) by fastforce], isabelleMessages=null, stackTrace=null)"
normalizeX_1-5,67071,FOUND_PROOF,"IsabelleResult(requestID=normalizeX_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using normalizeX(1) by auto], isabelleMessages=null, stackTrace=null)"
opt_DivisionByOneIsSelf32_1-1,66090,FAILED,"IsabelleResult(requestID=opt_DivisionByOneIsSelf32_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinDiv x (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq> x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null)"
opt_DivisionByOneIsSelf32_1-2,71809,FAILED,"IsabelleResult(requestID=opt_DivisionByOneIsSelf32_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinDiv x (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq> x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null)"
opt_DivisionByOneIsSelf32_1-3,71973,FAILED,"IsabelleResult(requestID=opt_DivisionByOneIsSelf32_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinDiv x (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq> x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null)"
opt_DivisionByOneIsSelf32_1-4,66220,FAILED,"IsabelleResult(requestID=opt_DivisionByOneIsSelf32_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinDiv x (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq> x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null)"
opt_DivisionByOneIsSelf32_1-5,71729,FAILED,"IsabelleResult(requestID=opt_DivisionByOneIsSelf32_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinDiv x (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq> x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null)"
opt_conditional_eliminate_known_less_1-1,72728,FAILED,"IsabelleResult(requestID=opt_conditional_eliminate_known_less_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. (stamp_under (stamp_expr x) (stamp_expr y) \<or>
         stpi_upper (stamp_expr x) = stpi_lower (stamp_expr y)) \<and>
        wf_stamp x \<and> wf_stamp y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerLessThan x y) x y \<sqsupseteq> x
    variables:
        x, y :: IRExpr], stackTrace=null)"
opt_conditional_eliminate_known_less_1-2,69000,FAILED,"IsabelleResult(requestID=opt_conditional_eliminate_known_less_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. (stamp_under (stamp_expr x) (stamp_expr y) \<or>
         stpi_upper (stamp_expr x) = stpi_lower (stamp_expr y)) \<and>
        wf_stamp x \<and> wf_stamp y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerLessThan x y) x y \<sqsupseteq> x
    variables:
        x, y :: IRExpr], stackTrace=null)"
opt_conditional_eliminate_known_less_1-3,66110,FAILED,"IsabelleResult(requestID=opt_conditional_eliminate_known_less_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. (stamp_under (stamp_expr x) (stamp_expr y) \<or>
         stpi_upper (stamp_expr x) = stpi_lower (stamp_expr y)) \<and>
        wf_stamp x \<and> wf_stamp y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerLessThan x y) x y \<sqsupseteq> x
    variables:
        x, y :: IRExpr], stackTrace=null)"
opt_conditional_eliminate_known_less_1-4,71773,FAILED,"IsabelleResult(requestID=opt_conditional_eliminate_known_less_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. (stamp_under (stamp_expr x) (stamp_expr y) \<or>
         stpi_upper (stamp_expr x) = stpi_lower (stamp_expr y)) \<and>
        wf_stamp x \<and> wf_stamp y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerLessThan x y) x y \<sqsupseteq> x
    variables:
        x, y :: IRExpr], stackTrace=null)"
opt_conditional_eliminate_known_less_1-5,72027,FAILED,"IsabelleResult(requestID=opt_conditional_eliminate_known_less_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. (stamp_under (stamp_expr x) (stamp_expr y) \<or>
         stpi_upper (stamp_expr x) = stpi_lower (stamp_expr y)) \<and>
        wf_stamp x \<and> wf_stamp y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerLessThan x y) x y \<sqsupseteq> x
    variables:
        x, y :: IRExpr], stackTrace=null)"
opt_normalize_x_original_1-1,71183,FAILED,"IsabelleResult(requestID=opt_normalize_x_original_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) (0::int) (1::int) \<and> wf_stamp x \<longrightarrow>
        ConditionalExpr
         (BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal32 (0::'a))))
         (ConstantExpr (IntVal32 (0::'a))) (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq>
        x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null)"
opt_normalize_x_original_1-2,66180,FAILED,"IsabelleResult(requestID=opt_normalize_x_original_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) (0::int) (1::int) \<and> wf_stamp x \<longrightarrow>
        ConditionalExpr
         (BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal32 (0::'a))))
         (ConstantExpr (IntVal32 (0::'a))) (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq>
        x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null)"
opt_normalize_x_original_1-3,69012,FAILED,"IsabelleResult(requestID=opt_normalize_x_original_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) (0::int) (1::int) \<and> wf_stamp x \<longrightarrow>
        ConditionalExpr
         (BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal32 (0::'a))))
         (ConstantExpr (IntVal32 (0::'a))) (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq>
        x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null)"
opt_normalize_x_original_1-4,71829,FAILED,"IsabelleResult(requestID=opt_normalize_x_original_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) (0::int) (1::int) \<and> wf_stamp x \<longrightarrow>
        ConditionalExpr
         (BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal32 (0::'a))))
         (ConstantExpr (IntVal32 (0::'a))) (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq>
        x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null)"
opt_normalize_x_original_1-5,66069,FAILED,"IsabelleResult(requestID=opt_normalize_x_original_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) (0::int) (1::int) \<and> wf_stamp x \<longrightarrow>
        ConditionalExpr
         (BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal32 (0::'a))))
         (ConstantExpr (IntVal32 (0::'a))) (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq>
        x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null)"
redundant_lhs_add_1-1,95659,FAILED,"IsabelleResult(requestID=redundant_lhs_add_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinAdd x y) z)
     2. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinAdd x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_add_1-2,86760,FAILED,"IsabelleResult(requestID=redundant_lhs_add_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinAdd x y) z)
     2. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinAdd x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_add_1-3,83644,FAILED,"IsabelleResult(requestID=redundant_lhs_add_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinAdd x y) z)
     2. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinAdd x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_add_1-4,82606,FAILED,"IsabelleResult(requestID=redundant_lhs_add_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinAdd x y) z)
     2. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinAdd x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_add_1-5,83844,FAILED,"IsabelleResult(requestID=redundant_lhs_add_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinAdd x y) z)
     2. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinAdd x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_x_or_1-1,86704,FAILED,"IsabelleResult(requestID=redundant_lhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd y z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd y z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_x_or_1-2,80912,FAILED,"IsabelleResult(requestID=redundant_lhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd y z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd y z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_x_or_1-3,88957,FAILED,"IsabelleResult(requestID=redundant_lhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd y z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd y z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_x_or_1-4,72667,FAILED,"IsabelleResult(requestID=redundant_lhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd y z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd y z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_x_or_1-5,80624,FAILED,"IsabelleResult(requestID=redundant_lhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd y z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd y z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_y_or_1-1,81068,FAILED,"IsabelleResult(requestID=redundant_lhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_y_or_1-2,73933,FAILED,"IsabelleResult(requestID=redundant_lhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_y_or_1-3,80347,FAILED,"IsabelleResult(requestID=redundant_lhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_y_or_1-4,77314,FAILED,"IsabelleResult(requestID=redundant_lhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_lhs_y_or_1-5,81215,FAILED,"IsabelleResult(requestID=redundant_lhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_rhs_x_or_1-1,82754,FAILED,"IsabelleResult(requestID=redundant_rhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z y)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z y
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_rhs_x_or_1-2,76239,FAILED,"IsabelleResult(requestID=redundant_rhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z y)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z y
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_rhs_x_or_1-3,77880,FAILED,"IsabelleResult(requestID=redundant_rhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z y)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z y
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_rhs_x_or_1-4,87581,FAILED,"IsabelleResult(requestID=redundant_rhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z y)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z y
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_rhs_x_or_1-5,76757,FAILED,"IsabelleResult(requestID=redundant_rhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z y)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z y
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_rhs_y_or_1-1,77401,FAILED,"IsabelleResult(requestID=redundant_rhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z x)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z x
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_rhs_y_or_1-2,82806,FAILED,"IsabelleResult(requestID=redundant_rhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z x)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z x
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_rhs_y_or_1-3,79326,FAILED,"IsabelleResult(requestID=redundant_rhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z x)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z x
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_rhs_y_or_1-4,82471,FAILED,"IsabelleResult(requestID=redundant_rhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z x)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z x
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
redundant_rhs_y_or_1-5,81693,FAILED,"IsabelleResult(requestID=redundant_rhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z x)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z x
    variables:
        x, y, z :: IRExpr], stackTrace=null)"
