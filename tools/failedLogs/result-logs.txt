    2024-05-02T13:21:10.430+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AbsIdempotence_1-1: TestResult(requestId=AbsIdempotence_1-1, elapsedTime=30173, resultStatus=MALFORMED, result=IsabelleResult(requestID=AbsIdempotence_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.435+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AbsIdempotence_1-2: TestResult(requestId=AbsIdempotence_1-2, elapsedTime=40133, resultStatus=MALFORMED, result=IsabelleResult(requestID=AbsIdempotence_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.435+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AbsIdempotence_1-3: TestResult(requestId=AbsIdempotence_1-3, elapsedTime=36001, resultStatus=MALFORMED, result=IsabelleResult(requestID=AbsIdempotence_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.435+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AbsIdempotence_1-4: TestResult(requestId=AbsIdempotence_1-4, elapsedTime=39008, resultStatus=MALFORMED, result=IsabelleResult(requestID=AbsIdempotence_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.435+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AbsIdempotence_1-5: TestResult(requestId=AbsIdempotence_1-5, elapsedTime=38989, resultStatus=MALFORMED, result=IsabelleResult(requestID=AbsIdempotence_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.435+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AbsNegate_1-1: TestResult(requestId=AbsNegate_1-1, elapsedTime=38999, resultStatus=MALFORMED, result=IsabelleResult(requestID=AbsNegate_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AbsNegate_1-2: TestResult(requestId=AbsNegate_1-2, elapsedTime=44991, resultStatus=MALFORMED, result=IsabelleResult(requestID=AbsNegate_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AbsNegate_1-3: TestResult(requestId=AbsNegate_1-3, elapsedTime=33009, resultStatus=MALFORMED, result=IsabelleResult(requestID=AbsNegate_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AbsNegate_1-4: TestResult(requestId=AbsNegate_1-4, elapsedTime=38990, resultStatus=MALFORMED, result=IsabelleResult(requestID=AbsNegate_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AbsNegate_1-5: TestResult(requestId=AbsNegate_1-5, elapsedTime=45011, resultStatus=MALFORMED, result=IsabelleResult(requestID=AbsNegate_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddLeftNegateToSub_1-1: TestResult(requestId=AddLeftNegateToSub_1-1, elapsedTime=107997, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddLeftNegateToSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddLeftNegateToSub(2) rewrite_termination.simps(1) apply blast, using exp_add_left_negate_to_sub by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddLeftNegateToSub_1-2: TestResult(requestId=AddLeftNegateToSub_1-2, elapsedTime=119999, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddLeftNegateToSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddLeftNegateToSub(2) apply auto[1], using exp_add_left_negate_to_sub by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddLeftNegateToSub_1-3: TestResult(requestId=AddLeftNegateToSub_1-3, elapsedTime=109880, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddLeftNegateToSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddLeftNegateToSub(2) apply auto[1], using exp_add_left_negate_to_sub by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddLeftNegateToSub_1-4: TestResult(requestId=AddLeftNegateToSub_1-4, elapsedTime=109110, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddLeftNegateToSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddLeftNegateToSub(2) apply auto[1], using exp_add_left_negate_to_sub by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddLeftNegateToSub_1-5: TestResult(requestId=AddLeftNegateToSub_1-5, elapsedTime=123012, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddLeftNegateToSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddLeftNegateToSub(2) rewrite_termination.simps(1) apply blast, using exp_add_left_negate_to_sub by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNeutral_1-1: TestResult(requestId=AddNeutral_1-1, elapsedTime=85973, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNeutral_1-2: TestResult(requestId=AddNeutral_1-2, elapsedTime=66083, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNeutral_1-3: TestResult(requestId=AddNeutral_1-3, elapsedTime=66950, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (meson AddNeutral_Exp)], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNeutral_1-4: TestResult(requestId=AddNeutral_1-4, elapsedTime=68990, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNeutral_1-5: TestResult(requestId=AddNeutral_1-5, elapsedTime=71040, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNeutral_2-1: TestResult(requestId=AddNeutral_2-1, elapsedTime=66148, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNeutral_2-2: TestResult(requestId=AddNeutral_2-2, elapsedTime=68998, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNeutral_2-3: TestResult(requestId=AddNeutral_2-3, elapsedTime=68868, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNeutral_2-4: TestResult(requestId=AddNeutral_2-4, elapsedTime=68952, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNeutral_2-5: TestResult(requestId=AddNeutral_2-5, elapsedTime=69004, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AddNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using AddNeutral_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNot2_1-1: TestResult(requestId=AddNot2_1-1, elapsedTime=124494, resultStatus=FAILED, result=IsabelleResult(requestID=AddNot2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp b l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAdd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNot2_1-2: TestResult(requestId=AddNot2_1-2, elapsedTime=123374, resultStatus=FAILED, result=IsabelleResult(requestID=AddNot2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp b l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAdd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNot2_1-3: TestResult(requestId=AddNot2_1-3, elapsedTime=122780, resultStatus=FAILED, result=IsabelleResult(requestID=AddNot2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp b l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAdd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNot2_1-4: TestResult(requestId=AddNot2_1-4, elapsedTime=123483, resultStatus=FAILED, result=IsabelleResult(requestID=AddNot2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp b l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAdd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNot2_1-5: TestResult(requestId=AddNot2_1-5, elapsedTime=122488, resultStatus=FAILED, result=IsabelleResult(requestID=AddNot2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp b l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAdd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNot_1-1: TestResult(requestId=AddNot_1-1, elapsedTime=71977, resultStatus=FAILED, result=IsabelleResult(requestID=AddNot_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNot_1-2: TestResult(requestId=AddNot_1-2, elapsedTime=66235, resultStatus=FAILED, result=IsabelleResult(requestID=AddNot_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.436+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNot_1-3: TestResult(requestId=AddNot_1-3, elapsedTime=65895, resultStatus=FAILED, result=IsabelleResult(requestID=AddNot_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNot_1-4: TestResult(requestId=AddNot_1-4, elapsedTime=68948, resultStatus=FAILED, result=IsabelleResult(requestID=AddNot_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddNot_1-5: TestResult(requestId=AddNot_1-5, elapsedTime=71995, resultStatus=FAILED, result=IsabelleResult(requestID=AddNot_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp b l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAdd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal b (mask b))
    variables:
        h, l :: int
        b :: nat
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddRightNegateToSub_1-1: TestResult(requestId=AddRightNegateToSub_1-1, elapsedTime=66785, resultStatus=FAILED, result=IsabelleResult(requestID=AddRightNegateToSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub x e)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size e))))
     2. BinaryExpr BinAdd x (UnaryExpr UnaryNeg e) \<sqsupseteq> BinaryExpr BinSub x e
    variables:
        e, x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddRightNegateToSub_1-2: TestResult(requestId=AddRightNegateToSub_1-2, elapsedTime=71887, resultStatus=FAILED, result=IsabelleResult(requestID=AddRightNegateToSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub x e)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size e))))
     2. BinaryExpr BinAdd x (UnaryExpr UnaryNeg e) \<sqsupseteq> BinaryExpr BinSub x e
    variables:
        e, x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddRightNegateToSub_1-3: TestResult(requestId=AddRightNegateToSub_1-3, elapsedTime=69053, resultStatus=FAILED, result=IsabelleResult(requestID=AddRightNegateToSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub x e)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size e))))
     2. BinaryExpr BinAdd x (UnaryExpr UnaryNeg e) \<sqsupseteq> BinaryExpr BinSub x e
    variables:
        e, x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddRightNegateToSub_1-4: TestResult(requestId=AddRightNegateToSub_1-4, elapsedTime=66063, resultStatus=FAILED, result=IsabelleResult(requestID=AddRightNegateToSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub x e)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size e))))
     2. BinaryExpr BinAdd x (UnaryExpr UnaryNeg e) \<sqsupseteq> BinaryExpr BinSub x e
    variables:
        e, x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddRightNegateToSub_1-5: TestResult(requestId=AddRightNegateToSub_1-5, elapsedTime=71847, resultStatus=FAILED, result=IsabelleResult(requestID=AddRightNegateToSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub x e)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size e))))
     2. BinaryExpr BinAdd x (UnaryExpr UnaryNeg e) \<sqsupseteq> BinaryExpr BinSub x e
    variables:
        e, x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddShiftConstantRight_1-1: TestResult(requestId=AddShiftConstantRight_1-1, elapsedTime=69132, resultStatus=FAILED, result=IsabelleResult(requestID=AddShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr v) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr v) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr v)
    variables:
        v :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddShiftConstantRight_1-2: TestResult(requestId=AddShiftConstantRight_1-2, elapsedTime=66054, resultStatus=FAILED, result=IsabelleResult(requestID=AddShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr v) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr v) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr v)
    variables:
        v :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddShiftConstantRight_1-3: TestResult(requestId=AddShiftConstantRight_1-3, elapsedTime=68944, resultStatus=FAILED, result=IsabelleResult(requestID=AddShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr v) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr v) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr v)
    variables:
        v :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddShiftConstantRight_1-4: TestResult(requestId=AddShiftConstantRight_1-4, elapsedTime=71920, resultStatus=FAILED, result=IsabelleResult(requestID=AddShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr v) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr v) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr v)
    variables:
        v :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddShiftConstantRight_1-5: TestResult(requestId=AddShiftConstantRight_1-5, elapsedTime=69087, resultStatus=FAILED, result=IsabelleResult(requestID=AddShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr v) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr v) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr v)
    variables:
        v :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddShiftConstantRight_2-1: TestResult(requestId=AddShiftConstantRight_2-1, elapsedTime=68992, resultStatus=FAILED, result=IsabelleResult(requestID=AddShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr c) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr c) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr c)
    variables:
        c :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddShiftConstantRight_2-2: TestResult(requestId=AddShiftConstantRight_2-2, elapsedTime=71939, resultStatus=FAILED, result=IsabelleResult(requestID=AddShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr c) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr c) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr c)
    variables:
        c :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddShiftConstantRight_2-3: TestResult(requestId=AddShiftConstantRight_2-3, elapsedTime=69036, resultStatus=FAILED, result=IsabelleResult(requestID=AddShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr c) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr c) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr c)
    variables:
        c :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddShiftConstantRight_2-4: TestResult(requestId=AddShiftConstantRight_2-4, elapsedTime=71958, resultStatus=FAILED, result=IsabelleResult(requestID=AddShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr c) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr c) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr c)
    variables:
        c :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AddShiftConstantRight_2-5: TestResult(requestId=AddShiftConstantRight_2-5, elapsedTime=72013, resultStatus=FAILED, result=IsabelleResult(requestID=AddShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr c) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr c) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr c)
    variables:
        c :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndEqual_1-1: TestResult(requestId=AndEqual_1-1, elapsedTime=65003, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_equal by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndEqual_1-2: TestResult(requestId=AndEqual_1-2, elapsedTime=65576, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_equal by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndEqual_1-3: TestResult(requestId=AndEqual_1-3, elapsedTime=74068, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis exp_and_equal)], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndEqual_1-4: TestResult(requestId=AndEqual_1-4, elapsedTime=64307, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_equal by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndEqual_1-5: TestResult(requestId=AndEqual_1-5, elapsedTime=63087, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_equal by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndEqual_2-1: TestResult(requestId=AndEqual_2-1, elapsedTime=29531, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndEqual_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "intexp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndEqual_2-2: TestResult(requestId=AndEqual_2-2, elapsedTime=39000, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndEqual_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "intexp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndEqual_2-3: TestResult(requestId=AndEqual_2-3, elapsedTime=38999, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndEqual_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "intexp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndEqual_2-4: TestResult(requestId=AndEqual_2-4, elapsedTime=42000, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndEqual_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "intexp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndEqual_2-5: TestResult(requestId=AndEqual_2-5, elapsedTime=36001, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndEqual_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "intexp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndLeftFallthrough_1-1: TestResult(requestId=AndLeftFallthrough_1-1, elapsedTime=38998, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndLeftFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndLeftFallthrough_1-2: TestResult(requestId=AndLeftFallthrough_1-2, elapsedTime=45000, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndLeftFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndLeftFallthrough_1-3: TestResult(requestId=AndLeftFallthrough_1-3, elapsedTime=33000, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndLeftFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndLeftFallthrough_1-4: TestResult(requestId=AndLeftFallthrough_1-4, elapsedTime=41999, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndLeftFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndLeftFallthrough_1-5: TestResult(requestId=AndLeftFallthrough_1-5, elapsedTime=36000, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndLeftFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNeutral_1-1: TestResult(requestId=AndNeutral_1-1, elapsedTime=76825, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (meson exp_and_neutral)], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNeutral_1-2: TestResult(requestId=AndNeutral_1-2, elapsedTime=73319, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_neutral by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNeutral_1-3: TestResult(requestId=AndNeutral_1-3, elapsedTime=69294, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_neutral by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNeutral_1-4: TestResult(requestId=AndNeutral_1-4, elapsedTime=68994, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_neutral by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNeutral_1-5: TestResult(requestId=AndNeutral_1-5, elapsedTime=67640, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_and_neutral by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNeutral_2-1: TestResult(requestId=AndNeutral_2-1, elapsedTime=30932, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndNeutral_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "i32exp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNeutral_2-2: TestResult(requestId=AndNeutral_2-2, elapsedTime=41992, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndNeutral_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "i32exp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNeutral_2-3: TestResult(requestId=AndNeutral_2-3, elapsedTime=36008, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndNeutral_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "i32exp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNeutral_2-4: TestResult(requestId=AndNeutral_2-4, elapsedTime=47990, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndNeutral_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "i32exp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNeutral_2-5: TestResult(requestId=AndNeutral_2-5, elapsedTime=30000, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndNeutral_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "i32exp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNots_1-1: TestResult(requestId=AndNots_1-1, elapsedTime=82747, resultStatus=FAILED, result=IsabelleResult(requestID=AndNots_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinOr x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinAnd (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinOr x y)
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNots_1-2: TestResult(requestId=AndNots_1-2, elapsedTime=71966, resultStatus=FAILED, result=IsabelleResult(requestID=AndNots_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinOr x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinAnd (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinOr x y)
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNots_1-3: TestResult(requestId=AndNots_1-3, elapsedTime=66257, resultStatus=FAILED, result=IsabelleResult(requestID=AndNots_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinOr x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinAnd (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinOr x y)
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNots_1-4: TestResult(requestId=AndNots_1-4, elapsedTime=71784, resultStatus=FAILED, result=IsabelleResult(requestID=AndNots_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinOr x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinAnd (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinOr x y)
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndNots_1-5: TestResult(requestId=AndNots_1-5, elapsedTime=69002, resultStatus=FAILED, result=IsabelleResult(requestID=AndNots_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinOr x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinAnd (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinOr x y)
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndRightFallthrough_1-1: TestResult(requestId=AndRightFallthrough_1-1, elapsedTime=28249, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndRightFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndRightFallthrough_1-2: TestResult(requestId=AndRightFallthrough_1-2, elapsedTime=38990, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndRightFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndRightFallthrough_1-3: TestResult(requestId=AndRightFallthrough_1-3, elapsedTime=39010, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndRightFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndRightFallthrough_1-4: TestResult(requestId=AndRightFallthrough_1-4, elapsedTime=38990, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndRightFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndRightFallthrough_1-5: TestResult(requestId=AndRightFallthrough_1-5, elapsedTime=39001, resultStatus=MALFORMED, result=IsabelleResult(requestID=AndRightFallthrough_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSelf2_1-1: TestResult(requestId=AndSelf2_1-1, elapsedTime=77568, resultStatus=FAILED, result=IsabelleResult(requestID=AndSelf2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSelf2_1-2: TestResult(requestId=AndSelf2_1-2, elapsedTime=63154, resultStatus=FAILED, result=IsabelleResult(requestID=AndSelf2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSelf2_1-3: TestResult(requestId=AndSelf2_1-3, elapsedTime=68976, resultStatus=FAILED, result=IsabelleResult(requestID=AndSelf2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSelf2_1-4: TestResult(requestId=AndSelf2_1-4, elapsedTime=66020, resultStatus=FAILED, result=IsabelleResult(requestID=AndSelf2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSelf2_1-5: TestResult(requestId=AndSelf2_1-5, elapsedTime=60249, resultStatus=FAILED, result=IsabelleResult(requestID=AndSelf2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSelf_1-1: TestResult(requestId=AndSelf_1-1, elapsedTime=137752, resultStatus=FAILED, result=IsabelleResult(requestID=AndSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAnd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSelf_1-2: TestResult(requestId=AndSelf_1-2, elapsedTime=154671, resultStatus=FAILED, result=IsabelleResult(requestID=AndSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAnd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.437+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSelf_1-3: TestResult(requestId=AndSelf_1-3, elapsedTime=136584, resultStatus=FAILED, result=IsabelleResult(requestID=AndSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAnd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSelf_1-4: TestResult(requestId=AndSelf_1-4, elapsedTime=150865, resultStatus=FAILED, result=IsabelleResult(requestID=AndSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAnd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSelf_1-5: TestResult(requestId=AndSelf_1-5, elapsedTime=146184, resultStatus=FAILED, result=IsabelleResult(requestID=AndSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinAnd (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinAnd (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndShiftConstantRight_1-1: TestResult(requestId=AndShiftConstantRight_1-1, elapsedTime=73388, resultStatus=FAILED, result=IsabelleResult(requestID=AndShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAnd (ConstantExpr x) y)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndShiftConstantRight_1-2: TestResult(requestId=AndShiftConstantRight_1-2, elapsedTime=69078, resultStatus=FAILED, result=IsabelleResult(requestID=AndShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAnd (ConstantExpr x) y)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndShiftConstantRight_1-3: TestResult(requestId=AndShiftConstantRight_1-3, elapsedTime=68981, resultStatus=FAILED, result=IsabelleResult(requestID=AndShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAnd (ConstantExpr x) y)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndShiftConstantRight_1-4: TestResult(requestId=AndShiftConstantRight_1-4, elapsedTime=69005, resultStatus=FAILED, result=IsabelleResult(requestID=AndShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAnd (ConstantExpr x) y)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndShiftConstantRight_1-5: TestResult(requestId=AndShiftConstantRight_1-5, elapsedTime=71903, resultStatus=FAILED, result=IsabelleResult(requestID=AndShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAnd (ConstantExpr x) y)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndShiftConstantRight_2-1: TestResult(requestId=AndShiftConstantRight_2-1, elapsedTime=69174, resultStatus=FAILED, result=IsabelleResult(requestID=AndShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndShiftConstantRight_2-2: TestResult(requestId=AndShiftConstantRight_2-2, elapsedTime=65979, resultStatus=FAILED, result=IsabelleResult(requestID=AndShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndShiftConstantRight_2-3: TestResult(requestId=AndShiftConstantRight_2-3, elapsedTime=68954, resultStatus=FAILED, result=IsabelleResult(requestID=AndShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndShiftConstantRight_2-4: TestResult(requestId=AndShiftConstantRight_2-4, elapsedTime=70485, resultStatus=FAILED, result=IsabelleResult(requestID=AndShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndShiftConstantRight_2-5: TestResult(requestId=AndShiftConstantRight_2-5, elapsedTime=73458, resultStatus=FAILED, result=IsabelleResult(requestID=AndShiftConstantRight_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinAdd (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinAdd (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinAdd y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSignExtend_1-1: TestResult(requestId=AndSignExtend_1-1, elapsedTime=66514, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndSignExtend_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sign_extend by force], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSignExtend_1-2: TestResult(requestId=AndSignExtend_1-2, elapsedTime=68932, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndSignExtend_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sign_extend by force], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSignExtend_1-3: TestResult(requestId=AndSignExtend_1-3, elapsedTime=72110, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndSignExtend_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sign_extend by force], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSignExtend_1-4: TestResult(requestId=AndSignExtend_1-4, elapsedTime=68962, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndSignExtend_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sign_extend by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result AndSignExtend_1-5: TestResult(requestId=AndSignExtend_1-5, elapsedTime=69035, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=AndSignExtend_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sign_extend by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result BinaryFoldConstant_1-1: TestResult(requestId=BinaryFoldConstant_1-1, elapsedTime=96107, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=BinaryFoldConstant_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result BinaryFoldConstant_1-2: TestResult(requestId=BinaryFoldConstant_1-2, elapsedTime=95882, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=BinaryFoldConstant_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result BinaryFoldConstant_1-3: TestResult(requestId=BinaryFoldConstant_1-3, elapsedTime=95923, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=BinaryFoldConstant_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) by force], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result BinaryFoldConstant_1-4: TestResult(requestId=BinaryFoldConstant_1-4, elapsedTime=99061, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=BinaryFoldConstant_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result BinaryFoldConstant_1-5: TestResult(requestId=BinaryFoldConstant_1-5, elapsedTime=96030, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=BinaryFoldConstant_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result BinaryFoldConstant_2-1: TestResult(requestId=BinaryFoldConstant_2-1, elapsedTime=90079, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=BinaryFoldConstant_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.438+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result BinaryFoldConstant_2-2: TestResult(requestId=BinaryFoldConstant_2-2, elapsedTime=95995, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=BinaryFoldConstant_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result BinaryFoldConstant_2-3: TestResult(requestId=BinaryFoldConstant_2-3, elapsedTime=96020, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=BinaryFoldConstant_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result BinaryFoldConstant_2-4: TestResult(requestId=BinaryFoldConstant_2-4, elapsedTime=96081, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=BinaryFoldConstant_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result BinaryFoldConstant_2-5: TestResult(requestId=BinaryFoldConstant_2-5, elapsedTime=95850, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=BinaryFoldConstant_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using BinaryFoldConstant(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_1-1: TestResult(requestId=ConditionalEliminateKnownLess_1-1, elapsedTime=66966, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalEliminateKnownLess(1) by fastforce], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_1-2: TestResult(requestId=ConditionalEliminateKnownLess_1-2, elapsedTime=73759, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis ConditionalEliminateKnownLess(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_1-3: TestResult(requestId=ConditionalEliminateKnownLess_1-3, elapsedTime=70232, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_1-4: TestResult(requestId=ConditionalEliminateKnownLess_1-4, elapsedTime=73938, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_1-5: TestResult(requestId=ConditionalEliminateKnownLess_1-5, elapsedTime=72030, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalEliminateKnownLess(1) by force], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_2-1: TestResult(requestId=ConditionalEliminateKnownLess_2-1, elapsedTime=34029, resultStatus=MALFORMED, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_2-2: TestResult(requestId=ConditionalEliminateKnownLess_2-2, elapsedTime=39009, resultStatus=MALFORMED, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_2-3: TestResult(requestId=ConditionalEliminateKnownLess_2-3, elapsedTime=39001, resultStatus=MALFORMED, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_2-4: TestResult(requestId=ConditionalEliminateKnownLess_2-4, elapsedTime=44991, resultStatus=MALFORMED, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_2-5: TestResult(requestId=ConditionalEliminateKnownLess_2-5, elapsedTime=35999, resultStatus=MALFORMED, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_3-1: TestResult(requestId=ConditionalEliminateKnownLess_3-1, elapsedTime=36007, resultStatus=MALFORMED, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_3, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_3-2: TestResult(requestId=ConditionalEliminateKnownLess_3-2, elapsedTime=38991, resultStatus=MALFORMED, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_3, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_3-3: TestResult(requestId=ConditionalEliminateKnownLess_3-3, elapsedTime=38999, resultStatus=MALFORMED, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_3, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_3-4: TestResult(requestId=ConditionalEliminateKnownLess_3-4, elapsedTime=42000, resultStatus=MALFORMED, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_3, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEliminateKnownLess_3-5: TestResult(requestId=ConditionalEliminateKnownLess_3-5, elapsedTime=36000, resultStatus=MALFORMED, result=IsabelleResult(requestID=ConditionalEliminateKnownLess_3, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualBranches_1-1: TestResult(requestId=ConditionalEqualBranches_1-1, elapsedTime=39007, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=ConditionalEqualBranches_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualBranches_1-2: TestResult(requestId=ConditionalEqualBranches_1-2, elapsedTime=38991, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=ConditionalEqualBranches_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualBranches_1-3: TestResult(requestId=ConditionalEqualBranches_1-3, elapsedTime=38999, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=ConditionalEqualBranches_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualBranches_1-4: TestResult(requestId=ConditionalEqualBranches_1-4, elapsedTime=39000, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=ConditionalEqualBranches_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualBranches_1-5: TestResult(requestId=ConditionalEqualBranches_1-5, elapsedTime=39010, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=ConditionalEqualBranches_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualBranches_2-1: TestResult(requestId=ConditionalEqualBranches_2-1, elapsedTime=38987, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=ConditionalEqualBranches_2, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualBranches_2-2: TestResult(requestId=ConditionalEqualBranches_2-2, elapsedTime=39000, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=ConditionalEqualBranches_2, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualBranches_2-3: TestResult(requestId=ConditionalEqualBranches_2-3, elapsedTime=39011, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=ConditionalEqualBranches_2, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualBranches_2-4: TestResult(requestId=ConditionalEqualBranches_2-4, elapsedTime=38989, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=ConditionalEqualBranches_2, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualBranches_2-5: TestResult(requestId=ConditionalEqualBranches_2-5, elapsedTime=39010, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=ConditionalEqualBranches_2, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualIsRHS_1-1: TestResult(requestId=ConditionalEqualIsRHS_1-1, elapsedTime=80748, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalEqualIsRHS_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualIsRHS_1-2: TestResult(requestId=ConditionalEqualIsRHS_1-2, elapsedTime=69119, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalEqualIsRHS_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualIsRHS_1-3: TestResult(requestId=ConditionalEqualIsRHS_1-3, elapsedTime=71968, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalEqualIsRHS_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualIsRHS_1-4: TestResult(requestId=ConditionalEqualIsRHS_1-4, elapsedTime=71912, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalEqualIsRHS_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualIsRHS_1-5: TestResult(requestId=ConditionalEqualIsRHS_1-5, elapsedTime=69139, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalEqualIsRHS_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualIsRHS_2-1: TestResult(requestId=ConditionalEqualIsRHS_2-1, elapsedTime=71928, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalEqualIsRHS_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. type x = Integer \<and> type_safe x y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        type_safe :: IRExpr \<Rightarrow> IRExpr \<Rightarrow> bool
        Integer :: 'a
        x, y :: IRExpr
        type :: IRExpr \<Rightarrow> 'a], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualIsRHS_2-2: TestResult(requestId=ConditionalEqualIsRHS_2-2, elapsedTime=69090, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalEqualIsRHS_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. type x = Integer \<and> type_safe x y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        type_safe :: IRExpr \<Rightarrow> IRExpr \<Rightarrow> bool
        Integer :: 'a
        x, y :: IRExpr
        type :: IRExpr \<Rightarrow> 'a], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualIsRHS_2-3: TestResult(requestId=ConditionalEqualIsRHS_2-3, elapsedTime=69089, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalEqualIsRHS_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. type x = Integer \<and> type_safe x y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        type_safe :: IRExpr \<Rightarrow> IRExpr \<Rightarrow> bool
        Integer :: 'a
        x, y :: IRExpr
        type :: IRExpr \<Rightarrow> 'a], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualIsRHS_2-4: TestResult(requestId=ConditionalEqualIsRHS_2-4, elapsedTime=66023, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalEqualIsRHS_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. type x = Integer \<and> type_safe x y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        type_safe :: IRExpr \<Rightarrow> IRExpr \<Rightarrow> bool
        Integer :: 'a
        x, y :: IRExpr
        type :: IRExpr \<Rightarrow> 'a], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalEqualIsRHS_2-5: TestResult(requestId=ConditionalEqualIsRHS_2-5, elapsedTime=71877, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalEqualIsRHS_2, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. type x = Integer \<and> type_safe x y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerEquals x y) x y \<sqsupseteq> y
    variables:
        type_safe :: IRExpr \<Rightarrow> IRExpr \<Rightarrow> bool
        Integer :: 'a
        x, y :: IRExpr
        type :: IRExpr \<Rightarrow> 'a], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalExtractCondition2_1-1: TestResult(requestId=ConditionalExtractCondition2_1-1, elapsedTime=69661, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=ConditionalExtractCondition2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalExtractCondition2(1) rewrite_preservation.simps(2) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalExtractCondition2_1-2: TestResult(requestId=ConditionalExtractCondition2_1-2, elapsedTime=64540, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=ConditionalExtractCondition2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalExtractCondition2(1) rewrite_preservation.simps(2) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalExtractCondition2_1-3: TestResult(requestId=ConditionalExtractCondition2_1-3, elapsedTime=70245, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=ConditionalExtractCondition2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalExtractCondition2(1) rewrite_preservation.simps(2) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalExtractCondition2_1-4: TestResult(requestId=ConditionalExtractCondition2_1-4, elapsedTime=64710, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=ConditionalExtractCondition2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalExtractCondition2(1) by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalExtractCondition2_1-5: TestResult(requestId=ConditionalExtractCondition2_1-5, elapsedTime=64180, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=ConditionalExtractCondition2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using ConditionalExtractCondition2(1) rewrite_preservation.simps(2) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalExtractCondition_1-1: TestResult(requestId=ConditionalExtractCondition_1-1, elapsedTime=68641, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalExtractCondition_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. isBoolean c \<longrightarrow>
        ConditionalExpr c (ConstantExpr (IntVal (32::nat) (1::64 word)))
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        c
    variables:
        c :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalExtractCondition_1-2: TestResult(requestId=ConditionalExtractCondition_1-2, elapsedTime=68873, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalExtractCondition_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. isBoolean c \<longrightarrow>
        ConditionalExpr c (ConstantExpr (IntVal (32::nat) (1::64 word)))
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        c
    variables:
        c :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalExtractCondition_1-3: TestResult(requestId=ConditionalExtractCondition_1-3, elapsedTime=68998, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalExtractCondition_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. isBoolean c \<longrightarrow>
        ConditionalExpr c (ConstantExpr (IntVal (32::nat) (1::64 word)))
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        c
    variables:
        c :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalExtractCondition_1-4: TestResult(requestId=ConditionalExtractCondition_1-4, elapsedTime=71967, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalExtractCondition_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. isBoolean c \<longrightarrow>
        ConditionalExpr c (ConstantExpr (IntVal (32::nat) (1::64 word)))
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        c
    variables:
        c :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalExtractCondition_1-5: TestResult(requestId=ConditionalExtractCondition_1-5, elapsedTime=66032, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalExtractCondition_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. isBoolean c \<longrightarrow>
        ConditionalExpr c (ConstantExpr (IntVal (32::nat) (1::64 word)))
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        c
    variables:
        c :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalIntegerEquals_1_1-1: TestResult(requestId=ConditionalIntegerEquals_1_1-1, elapsedTime=75382, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalIntegerEquals_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Canonicalization.size c
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x \<sqsupseteq> c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalIntegerEquals_1_1-2: TestResult(requestId=ConditionalIntegerEquals_1_1-2, elapsedTime=74997, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalIntegerEquals_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Canonicalization.size c
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x \<sqsupseteq> c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalIntegerEquals_1_1-3: TestResult(requestId=ConditionalIntegerEquals_1_1-3, elapsedTime=74914, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalIntegerEquals_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Canonicalization.size c
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x \<sqsupseteq> c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalIntegerEquals_1_1-4: TestResult(requestId=ConditionalIntegerEquals_1_1-4, elapsedTime=75116, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalIntegerEquals_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Canonicalization.size c
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x \<sqsupseteq> c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalIntegerEquals_1_1-5: TestResult(requestId=ConditionalIntegerEquals_1_1-5, elapsedTime=72032, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalIntegerEquals_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Canonicalization.size c
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) x \<sqsupseteq> c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalIntegerEquals_2_1-1: TestResult(requestId=ConditionalIntegerEquals_2_1-1, elapsedTime=71879, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalIntegerEquals_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Suc (Suc (Canonicalization.size c))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y \<sqsupseteq>
        UnaryExpr UnaryLogicNegation c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalIntegerEquals_2_1-2: TestResult(requestId=ConditionalIntegerEquals_2_1-2, elapsedTime=75007, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalIntegerEquals_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Suc (Suc (Canonicalization.size c))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y \<sqsupseteq>
        UnaryExpr UnaryLogicNegation c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalIntegerEquals_2_1-3: TestResult(requestId=ConditionalIntegerEquals_2_1-3, elapsedTime=75014, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalIntegerEquals_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Suc (Suc (Canonicalization.size c))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y \<sqsupseteq>
        UnaryExpr UnaryLogicNegation c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalIntegerEquals_2_1-4: TestResult(requestId=ConditionalIntegerEquals_2_1-4, elapsedTime=72155, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalIntegerEquals_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Suc (Suc (Canonicalization.size c))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y \<sqsupseteq>
        UnaryExpr UnaryLogicNegation c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ConditionalIntegerEquals_2_1-5: TestResult(requestId=ConditionalIntegerEquals_2_1-5, elapsedTime=72074, resultStatus=FAILED, result=IsabelleResult(requestID=ConditionalIntegerEquals_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        min xh yh < max xl yl \<Longrightarrow>
        isBoolean c \<Longrightarrow>
        Suc (Suc (Canonicalization.size c))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp b yl yh \<and>
        wf_stamp y \<and>
        is_stamp_empty (join (stamp_expr x) (stamp_expr y)) \<and> isBoolean c \<longrightarrow>
        BinaryExpr BinIntegerEquals (ConditionalExpr c x y) y \<sqsupseteq>
        UnaryExpr UnaryLogicNegation c
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        c, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DefaultFalseBranch_1-1: TestResult(requestId=DefaultFalseBranch_1-1, elapsedTime=29288, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=DefaultFalseBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DefaultFalseBranch_1-2: TestResult(requestId=DefaultFalseBranch_1-2, elapsedTime=38999, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=DefaultFalseBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DefaultFalseBranch_1-3: TestResult(requestId=DefaultFalseBranch_1-3, elapsedTime=45010, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=DefaultFalseBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DefaultFalseBranch_1-4: TestResult(requestId=DefaultFalseBranch_1-4, elapsedTime=35989, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=DefaultFalseBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.439+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DefaultFalseBranch_1-5: TestResult(requestId=DefaultFalseBranch_1-5, elapsedTime=36001, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=DefaultFalseBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DefaultTrueBranch_1-1: TestResult(requestId=DefaultTrueBranch_1-1, elapsedTime=41996, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=DefaultTrueBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DefaultTrueBranch_1-2: TestResult(requestId=DefaultTrueBranch_1-2, elapsedTime=36011, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=DefaultTrueBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DefaultTrueBranch_1-3: TestResult(requestId=DefaultTrueBranch_1-3, elapsedTime=42000, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=DefaultTrueBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DefaultTrueBranch_1-4: TestResult(requestId=DefaultTrueBranch_1-4, elapsedTime=35991, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=DefaultTrueBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DefaultTrueBranch_1-5: TestResult(requestId=DefaultTrueBranch_1-5, elapsedTime=42009, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=DefaultTrueBranch_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DistributeSubtraction_1-1: TestResult(requestId=DistributeSubtraction_1-1, elapsedTime=79473, resultStatus=FAILED, result=IsabelleResult(requestID=DistributeSubtraction_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DistributeSubtraction_1-2: TestResult(requestId=DistributeSubtraction_1-2, elapsedTime=66214, resultStatus=FAILED, result=IsabelleResult(requestID=DistributeSubtraction_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DistributeSubtraction_1-3: TestResult(requestId=DistributeSubtraction_1-3, elapsedTime=71784, resultStatus=FAILED, result=IsabelleResult(requestID=DistributeSubtraction_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DistributeSubtraction_1-4: TestResult(requestId=DistributeSubtraction_1-4, elapsedTime=69090, resultStatus=FAILED, result=IsabelleResult(requestID=DistributeSubtraction_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DistributeSubtraction_1-5: TestResult(requestId=DistributeSubtraction_1-5, elapsedTime=69049, resultStatus=FAILED, result=IsabelleResult(requestID=DistributeSubtraction_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DivItself_1-1: TestResult(requestId=DivItself_1-1, elapsedTime=129052, resultStatus=FAILED, result=IsabelleResult(requestID=DivItself_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        Suc (0::nat) < Canonicalization.size (BinaryExpr BinDiv x x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<longrightarrow>
        BinaryExpr BinDiv x x \<sqsupseteq> ConstantExpr (IntVal b (1::64 word))
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DivItself_1-2: TestResult(requestId=DivItself_1-2, elapsedTime=121728, resultStatus=FAILED, result=IsabelleResult(requestID=DivItself_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        Suc (0::nat) < Canonicalization.size (BinaryExpr BinDiv x x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<longrightarrow>
        BinaryExpr BinDiv x x \<sqsupseteq> ConstantExpr (IntVal b (1::64 word))
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DivItself_1-3: TestResult(requestId=DivItself_1-3, elapsedTime=138857, resultStatus=FAILED, result=IsabelleResult(requestID=DivItself_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        Suc (0::nat) < Canonicalization.size (BinaryExpr BinDiv x x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<longrightarrow>
        BinaryExpr BinDiv x x \<sqsupseteq> ConstantExpr (IntVal b (1::64 word))
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DivItself_1-4: TestResult(requestId=DivItself_1-4, elapsedTime=131010, resultStatus=FAILED, result=IsabelleResult(requestID=DivItself_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        Suc (0::nat) < Canonicalization.size (BinaryExpr BinDiv x x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<longrightarrow>
        BinaryExpr BinDiv x x \<sqsupseteq> ConstantExpr (IntVal b (1::64 word))
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result DivItself_1-5: TestResult(requestId=DivItself_1-5, elapsedTime=131918, resultStatus=FAILED, result=IsabelleResult(requestID=DivItself_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        Suc (0::nat) < Canonicalization.size (BinaryExpr BinDiv x x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<longrightarrow>
        BinaryExpr BinDiv x x \<sqsupseteq> ConstantExpr (IntVal b (1::64 word))
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRHS_64_1-1: TestResult(requestId=EliminateRHS_64_1-1, elapsedTime=71526, resultStatus=FAILED, result=IsabelleResult(requestID=EliminateRHS_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (64::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinLeftShift x (ConstantExpr y) \<sqsupseteq> x
    variables:
        y :: Value
        hi, lo :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRHS_64_1-2: TestResult(requestId=EliminateRHS_64_1-2, elapsedTime=71949, resultStatus=FAILED, result=IsabelleResult(requestID=EliminateRHS_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (64::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinLeftShift x (ConstantExpr y) \<sqsupseteq> x
    variables:
        y :: Value
        hi, lo :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRHS_64_1-3: TestResult(requestId=EliminateRHS_64_1-3, elapsedTime=69050, resultStatus=FAILED, result=IsabelleResult(requestID=EliminateRHS_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (64::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinLeftShift x (ConstantExpr y) \<sqsupseteq> x
    variables:
        y :: Value
        hi, lo :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRHS_64_1-4: TestResult(requestId=EliminateRHS_64_1-4, elapsedTime=71917, resultStatus=FAILED, result=IsabelleResult(requestID=EliminateRHS_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (64::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinLeftShift x (ConstantExpr y) \<sqsupseteq> x
    variables:
        y :: Value
        hi, lo :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRHS_64_1-5: TestResult(requestId=EliminateRHS_64_1-5, elapsedTime=71846, resultStatus=FAILED, result=IsabelleResult(requestID=EliminateRHS_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (64::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinLeftShift x (ConstantExpr y) \<sqsupseteq> x
    variables:
        y :: Value
        hi, lo :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantFalse_1-1: TestResult(requestId=EliminateRedundantFalse_1-1, elapsedTime=65536, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=EliminateRedundantFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_elim_redundant_false by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantFalse_1-2: TestResult(requestId=EliminateRedundantFalse_1-2, elapsedTime=65551, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=EliminateRedundantFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_elim_redundant_false by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantFalse_1-3: TestResult(requestId=EliminateRedundantFalse_1-3, elapsedTime=70111, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=EliminateRedundantFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_elim_redundant_false by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantFalse_1-4: TestResult(requestId=EliminateRedundantFalse_1-4, elapsedTime=69237, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=EliminateRedundantFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_elim_redundant_false by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantFalse_1-5: TestResult(requestId=EliminateRedundantFalse_1-5, elapsedTime=67128, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=EliminateRedundantFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_elim_redundant_false by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantFalse_2-1: TestResult(requestId=EliminateRedundantFalse_2-1, elapsedTime=67431, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=EliminateRedundantFalse_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_eliminate_redundant_false by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantFalse_2-2: TestResult(requestId=EliminateRedundantFalse_2-2, elapsedTime=75233, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=EliminateRedundantFalse_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_eliminate_redundant_false by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantFalse_2-3: TestResult(requestId=EliminateRedundantFalse_2-3, elapsedTime=64855, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=EliminateRedundantFalse_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_eliminate_redundant_false by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantFalse_2-4: TestResult(requestId=EliminateRedundantFalse_2-4, elapsedTime=68813, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=EliminateRedundantFalse_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_eliminate_redundant_false by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantFalse_2-5: TestResult(requestId=EliminateRedundantFalse_2-5, elapsedTime=66129, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=EliminateRedundantFalse_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_eliminate_redundant_false by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantNegative_1-1: TestResult(requestId=EliminateRedundantNegative_1-1, elapsedTime=74364, resultStatus=FAILED, result=IsabelleResult(requestID=EliminateRedundantNegative_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinMul x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. BinaryExpr BinMul (UnaryExpr UnaryNeg x) (UnaryExpr UnaryNeg y) \<sqsupseteq>
        BinaryExpr BinMul x y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantNegative_1-2: TestResult(requestId=EliminateRedundantNegative_1-2, elapsedTime=71954, resultStatus=FAILED, result=IsabelleResult(requestID=EliminateRedundantNegative_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinMul x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. BinaryExpr BinMul (UnaryExpr UnaryNeg x) (UnaryExpr UnaryNeg y) \<sqsupseteq>
        BinaryExpr BinMul x y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantNegative_1-3: TestResult(requestId=EliminateRedundantNegative_1-3, elapsedTime=69143, resultStatus=FAILED, result=IsabelleResult(requestID=EliminateRedundantNegative_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinMul x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. BinaryExpr BinMul (UnaryExpr UnaryNeg x) (UnaryExpr UnaryNeg y) \<sqsupseteq>
        BinaryExpr BinMul x y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantNegative_1-4: TestResult(requestId=EliminateRedundantNegative_1-4, elapsedTime=71881, resultStatus=FAILED, result=IsabelleResult(requestID=EliminateRedundantNegative_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinMul x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. BinaryExpr BinMul (UnaryExpr UnaryNeg x) (UnaryExpr UnaryNeg y) \<sqsupseteq>
        BinaryExpr BinMul x y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result EliminateRedundantNegative_1-5: TestResult(requestId=EliminateRedundantNegative_1-5, elapsedTime=69101, resultStatus=FAILED, result=IsabelleResult(requestID=EliminateRedundantNegative_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinMul x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. BinaryExpr BinMul (UnaryExpr UnaryNeg x) (UnaryExpr UnaryNeg y) \<sqsupseteq>
        BinaryExpr BinMul x y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MaskOutRHS_1-1: TestResult(requestId=MaskOutRHS_1-1, elapsedTime=39008, resultStatus=NO_SUBGOAL, result=IsabelleResult(requestID=MaskOutRHS_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MaskOutRHS_1-2: TestResult(requestId=MaskOutRHS_1-2, elapsedTime=38997, resultStatus=NO_SUBGOAL, result=IsabelleResult(requestID=MaskOutRHS_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MaskOutRHS_1-3: TestResult(requestId=MaskOutRHS_1-3, elapsedTime=39002, resultStatus=NO_SUBGOAL, result=IsabelleResult(requestID=MaskOutRHS_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MaskOutRHS_1-4: TestResult(requestId=MaskOutRHS_1-4, elapsedTime=38991, resultStatus=NO_SUBGOAL, result=IsabelleResult(requestID=MaskOutRHS_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MaskOutRHS_1-5: TestResult(requestId=MaskOutRHS_1-5, elapsedTime=39000, resultStatus=NO_SUBGOAL, result=IsabelleResult(requestID=MaskOutRHS_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulEliminator_1-1: TestResult(requestId=MulEliminator_1-1, elapsedTime=76942, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulEliminator_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_zero_64 by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulEliminator_1-2: TestResult(requestId=MulEliminator_1-2, elapsedTime=70055, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulEliminator_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_zero_64 by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulEliminator_1-3: TestResult(requestId=MulEliminator_1-3, elapsedTime=77999, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulEliminator_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_zero_64 by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulEliminator_1-4: TestResult(requestId=MulEliminator_1-4, elapsedTime=76816, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulEliminator_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_zero_64 by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulEliminator_1-5: TestResult(requestId=MulEliminator_1-5, elapsedTime=72146, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulEliminator_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_zero_64 by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulEliminator_2-1: TestResult(requestId=MulEliminator_2-1, elapsedTime=31046, resultStatus=MALFORMED, result=IsabelleResult(requestID=MulEliminator_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "i32exp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulEliminator_2-2: TestResult(requestId=MulEliminator_2-2, elapsedTime=38989, resultStatus=MALFORMED, result=IsabelleResult(requestID=MulEliminator_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "i32exp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulEliminator_2-3: TestResult(requestId=MulEliminator_2-3, elapsedTime=38999, resultStatus=MALFORMED, result=IsabelleResult(requestID=MulEliminator_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "i32exp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulEliminator_2-4: TestResult(requestId=MulEliminator_2-4, elapsedTime=42011, resultStatus=MALFORMED, result=IsabelleResult(requestID=MulEliminator_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "i32exp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulEliminator_2-5: TestResult(requestId=MulEliminator_2-5, elapsedTime=35990, resultStatus=MALFORMED, result=IsabelleResult(requestID=MulEliminator_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Undefined type name: "i32exp"\<^here>, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNegate_1-1: TestResult(requestId=MulNegate_1-1, elapsedTime=76856, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNegate_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_negative by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNegate_1-2: TestResult(requestId=MulNegate_1-2, elapsedTime=71985, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNegate_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_negative by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNegate_1-3: TestResult(requestId=MulNegate_1-3, elapsedTime=70156, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNegate_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_negative by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNegate_1-4: TestResult(requestId=MulNegate_1-4, elapsedTime=73958, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNegate_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_negative by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNegate_1-5: TestResult(requestId=MulNegate_1-5, elapsedTime=72083, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNegate_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_negative by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNegate_2-1: TestResult(requestId=MulNegate_2-1, elapsedTime=33956, resultStatus=MALFORMED, result=IsabelleResult(requestID=MulNegate_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNegate_2-2: TestResult(requestId=MulNegate_2-2, elapsedTime=42001, resultStatus=MALFORMED, result=IsabelleResult(requestID=MulNegate_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNegate_2-3: TestResult(requestId=MulNegate_2-3, elapsedTime=35999, resultStatus=MALFORMED, result=IsabelleResult(requestID=MulNegate_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNegate_2-4: TestResult(requestId=MulNegate_2-4, elapsedTime=39010, resultStatus=MALFORMED, result=IsabelleResult(requestID=MulNegate_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNegate_2-5: TestResult(requestId=MulNegate_2-5, elapsedTime=39000, resultStatus=MALFORMED, result=IsabelleResult(requestID=MulNegate_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNeutral_1-1: TestResult(requestId=MulNeutral_1-1, elapsedTime=74081, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNeutral_1-2: TestResult(requestId=MulNeutral_1-2, elapsedTime=65954, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNeutral_1-3: TestResult(requestId=MulNeutral_1-3, elapsedTime=68994, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNeutral_1-4: TestResult(requestId=MulNeutral_1-4, elapsedTime=69034, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNeutral_1-5: TestResult(requestId=MulNeutral_1-5, elapsedTime=70152, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNeutral_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNeutral_2-1: TestResult(requestId=MulNeutral_2-1, elapsedTime=67971, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNeutral_2-2: TestResult(requestId=MulNeutral_2-2, elapsedTime=70185, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNeutral_2-3: TestResult(requestId=MulNeutral_2-3, elapsedTime=62614, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (meson exp_multiply_neutral)], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNeutral_2-4: TestResult(requestId=MulNeutral_2-4, elapsedTime=67605, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulNeutral_2-5: TestResult(requestId=MulNeutral_2-5, elapsedTime=66375, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=MulNeutral_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_multiply_neutral by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2Add1_1-1: TestResult(requestId=MulPower2Add1_1-1, elapsedTime=75275, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2Add1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinAdd
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinAdd
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2Add1_1-2: TestResult(requestId=MulPower2Add1_1-2, elapsedTime=71983, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2Add1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinAdd
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinAdd
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2Add1_1-3: TestResult(requestId=MulPower2Add1_1-3, elapsedTime=72018, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2Add1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinAdd
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinAdd
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2Add1_1-4: TestResult(requestId=MulPower2Add1_1-4, elapsedTime=72002, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2Add1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinAdd
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinAdd
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2Add1_1-5: TestResult(requestId=MulPower2Add1_1-5, elapsedTime=71998, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2Add1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinAdd
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i + (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinAdd
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2Sub1_1-1: TestResult(requestId=MulPower2Sub1_1-1, elapsedTime=71498, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2Sub1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinSub
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinSub
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2Sub1_1-2: TestResult(requestId=MulPower2Sub1_1-2, elapsedTime=69429, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2Sub1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinSub
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinSub
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2Sub1_1-3: TestResult(requestId=MulPower2Sub1_1-3, elapsedTime=62881, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2Sub1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinSub
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinSub
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2Sub1_1-4: TestResult(requestId=MulPower2Sub1_1-4, elapsedTime=71693, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2Sub1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinSub
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinSub
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2Sub1_1-5: TestResult(requestId=MulPower2Sub1_1-5, elapsedTime=69210, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2Sub1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. (0::64 word) < i \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        i < (64::64 word) \<Longrightarrow>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<Longrightarrow>
        Canonicalization.size
         (BinaryExpr BinSub
           (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x)
        < Suc (Suc (Canonicalization.size x))
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y =
        ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word))) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr
           (IntVal (64::nat) ((2::64 word) ^ unat i - (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinSub
         (BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))) x
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2_1-1: TestResult(requestId=MulPower2_1-1, elapsedTime=66785, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. i < (64::64 word) \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        (0::64 word) < i \<Longrightarrow>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<Longrightarrow> False
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i))) \<sqsupseteq>
        BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2_1-2: TestResult(requestId=MulPower2_1-2, elapsedTime=69094, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. i < (64::64 word) \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        (0::64 word) < i \<Longrightarrow>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<Longrightarrow> False
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i))) \<sqsupseteq>
        BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.440+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2_1-3: TestResult(requestId=MulPower2_1-3, elapsedTime=66000, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. i < (64::64 word) \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        (0::64 word) < i \<Longrightarrow>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<Longrightarrow> False
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i))) \<sqsupseteq>
        BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2_1-4: TestResult(requestId=MulPower2_1-4, elapsedTime=68907, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. i < (64::64 word) \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        (0::64 word) < i \<Longrightarrow>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<Longrightarrow> False
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i))) \<sqsupseteq>
        BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result MulPower2_1-5: TestResult(requestId=MulPower2_1-5, elapsedTime=69070, resultStatus=FAILED, result=IsabelleResult(requestID=MulPower2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. i < (64::64 word) \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        (0::64 word) < i \<Longrightarrow>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<Longrightarrow> False
     2. (0::64 word) < i \<and>
        stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        i < (64::64 word) \<and>
        y = ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i)) \<longrightarrow>
        BinaryExpr BinMul x
         (ConstantExpr (IntVal (64::nat) ((2::64 word) ^ unat i))) \<sqsupseteq>
        BinaryExpr BinLeftShift x (ConstantExpr (IntVal (64::nat) i))
    variables:
        xh, xl :: int
        x, y :: IRExpr
        i :: 64 word], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegateCancel_1-1: TestResult(requestId=NegateCancel_1-1, elapsedTime=72430, resultStatus=FAILED, result=IsabelleResult(requestID=NegateCancel_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. UnaryExpr UnaryNeg (UnaryExpr UnaryNeg x) \<sqsupseteq> x
    variables:
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegateCancel_1-2: TestResult(requestId=NegateCancel_1-2, elapsedTime=71997, resultStatus=FAILED, result=IsabelleResult(requestID=NegateCancel_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. UnaryExpr UnaryNeg (UnaryExpr UnaryNeg x) \<sqsupseteq> x
    variables:
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegateCancel_1-3: TestResult(requestId=NegateCancel_1-3, elapsedTime=69229, resultStatus=FAILED, result=IsabelleResult(requestID=NegateCancel_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. UnaryExpr UnaryNeg (UnaryExpr UnaryNeg x) \<sqsupseteq> x
    variables:
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegateCancel_1-4: TestResult(requestId=NegateCancel_1-4, elapsedTime=65922, resultStatus=FAILED, result=IsabelleResult(requestID=NegateCancel_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. UnaryExpr UnaryNeg (UnaryExpr UnaryNeg x) \<sqsupseteq> x
    variables:
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegateCancel_1-5: TestResult(requestId=NegateCancel_1-5, elapsedTime=72264, resultStatus=FAILED, result=IsabelleResult(requestID=NegateCancel_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. UnaryExpr UnaryNeg (UnaryExpr UnaryNeg x) \<sqsupseteq> x
    variables:
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegateConditionFlipBranches_1-1: TestResult(requestId=NegateConditionFlipBranches_1-1, elapsedTime=72079, resultStatus=FAILED, result=IsabelleResult(requestID=NegateConditionFlipBranches_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (UnaryExpr UnaryLogicNegation e) x y \<sqsupseteq>
        ConditionalExpr e y x
    variables:
        e, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegateConditionFlipBranches_1-2: TestResult(requestId=NegateConditionFlipBranches_1-2, elapsedTime=68997, resultStatus=FAILED, result=IsabelleResult(requestID=NegateConditionFlipBranches_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (UnaryExpr UnaryLogicNegation e) x y \<sqsupseteq>
        ConditionalExpr e y x
    variables:
        e, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegateConditionFlipBranches_1-3: TestResult(requestId=NegateConditionFlipBranches_1-3, elapsedTime=71899, resultStatus=FAILED, result=IsabelleResult(requestID=NegateConditionFlipBranches_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (UnaryExpr UnaryLogicNegation e) x y \<sqsupseteq>
        ConditionalExpr e y x
    variables:
        e, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegateConditionFlipBranches_1-4: TestResult(requestId=NegateConditionFlipBranches_1-4, elapsedTime=72040, resultStatus=FAILED, result=IsabelleResult(requestID=NegateConditionFlipBranches_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (UnaryExpr UnaryLogicNegation e) x y \<sqsupseteq>
        ConditionalExpr e y x
    variables:
        e, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegateConditionFlipBranches_1-5: TestResult(requestId=NegateConditionFlipBranches_1-5, elapsedTime=72066, resultStatus=FAILED, result=IsabelleResult(requestID=NegateConditionFlipBranches_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. ConditionalExpr (UnaryExpr UnaryLogicNegation e) x y \<sqsupseteq>
        ConditionalExpr e y x
    variables:
        e, x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegativeShift_1-1: TestResult(requestId=NegativeShift_1-1, elapsedTime=66862, resultStatus=FAILED, result=IsabelleResult(requestID=NegativeShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b' lo hi \<and> unat y = b' - Suc (0::nat) \<longrightarrow>
        UnaryExpr UnaryNeg
         (BinaryExpr BinRightShift x (ConstantExpr (IntVal b (take_bit b y)))) \<sqsupseteq>
        BinaryExpr BinURightShift x (ConstantExpr (IntVal b (take_bit b y)))
    variables:
        y :: 64 word
        hi, lo :: int
        b, b' :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegativeShift_1-2: TestResult(requestId=NegativeShift_1-2, elapsedTime=68955, resultStatus=FAILED, result=IsabelleResult(requestID=NegativeShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b' lo hi \<and> unat y = b' - Suc (0::nat) \<longrightarrow>
        UnaryExpr UnaryNeg
         (BinaryExpr BinRightShift x (ConstantExpr (IntVal b (take_bit b y)))) \<sqsupseteq>
        BinaryExpr BinURightShift x (ConstantExpr (IntVal b (take_bit b y)))
    variables:
        y :: 64 word
        hi, lo :: int
        b, b' :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegativeShift_1-3: TestResult(requestId=NegativeShift_1-3, elapsedTime=71972, resultStatus=FAILED, result=IsabelleResult(requestID=NegativeShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b' lo hi \<and> unat y = b' - Suc (0::nat) \<longrightarrow>
        UnaryExpr UnaryNeg
         (BinaryExpr BinRightShift x (ConstantExpr (IntVal b (take_bit b y)))) \<sqsupseteq>
        BinaryExpr BinURightShift x (ConstantExpr (IntVal b (take_bit b y)))
    variables:
        y :: 64 word
        hi, lo :: int
        b, b' :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegativeShift_1-4: TestResult(requestId=NegativeShift_1-4, elapsedTime=72099, resultStatus=FAILED, result=IsabelleResult(requestID=NegativeShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b' lo hi \<and> unat y = b' - Suc (0::nat) \<longrightarrow>
        UnaryExpr UnaryNeg
         (BinaryExpr BinRightShift x (ConstantExpr (IntVal b (take_bit b y)))) \<sqsupseteq>
        BinaryExpr BinURightShift x (ConstantExpr (IntVal b (take_bit b y)))
    variables:
        y :: 64 word
        hi, lo :: int
        b, b' :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NegativeShift_1-5: TestResult(requestId=NegativeShift_1-5, elapsedTime=71856, resultStatus=FAILED, result=IsabelleResult(requestID=NegativeShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b' lo hi \<and> unat y = b' - Suc (0::nat) \<longrightarrow>
        UnaryExpr UnaryNeg
         (BinaryExpr BinRightShift x (ConstantExpr (IntVal b (take_bit b y)))) \<sqsupseteq>
        BinaryExpr BinURightShift x (ConstantExpr (IntVal b (take_bit b y)))
    variables:
        y :: 64 word
        hi, lo :: int
        b, b' :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NeverEqNotSelf_1-1: TestResult(requestId=NeverEqNotSelf_1-1, elapsedTime=136948, resultStatus=FAILED, result=IsabelleResult(requestID=NeverEqNotSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x)
     2. stamp_expr x = IntegerStamp (32::nat) xl xh \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        xh, xl :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NeverEqNotSelf_1-2: TestResult(requestId=NeverEqNotSelf_1-2, elapsedTime=137428, resultStatus=FAILED, result=IsabelleResult(requestID=NeverEqNotSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x)
     2. stamp_expr x = IntegerStamp (32::nat) xl xh \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        xh, xl :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NeverEqNotSelf_1-3: TestResult(requestId=NeverEqNotSelf_1-3, elapsedTime=138451, resultStatus=FAILED, result=IsabelleResult(requestID=NeverEqNotSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x)
     2. stamp_expr x = IntegerStamp (32::nat) xl xh \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        xh, xl :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NeverEqNotSelf_1-4: TestResult(requestId=NeverEqNotSelf_1-4, elapsedTime=137244, resultStatus=FAILED, result=IsabelleResult(requestID=NeverEqNotSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x)
     2. stamp_expr x = IntegerStamp (32::nat) xl xh \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        xh, xl :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NeverEqNotSelf_1-5: TestResult(requestId=NeverEqNotSelf_1-5, elapsedTime=139626, resultStatus=FAILED, result=IsabelleResult(requestID=NeverEqNotSelf_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x)
     2. stamp_expr x = IntegerStamp (32::nat) xl xh \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinIntegerEquals (UnaryExpr UnaryNot x) x \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (0::64 word))
    variables:
        xh, xl :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NotCancel_1-1: TestResult(requestId=NotCancel_1-1, elapsedTime=69178, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=NotCancel_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_not_cancel by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NotCancel_1-2: TestResult(requestId=NotCancel_1-2, elapsedTime=62817, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=NotCancel_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_not_cancel by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NotCancel_1-3: TestResult(requestId=NotCancel_1-3, elapsedTime=68085, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=NotCancel_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_not_cancel by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NotCancel_1-4: TestResult(requestId=NotCancel_1-4, elapsedTime=68973, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=NotCancel_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_not_cancel by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NotCancel_1-5: TestResult(requestId=NotCancel_1-5, elapsedTime=68955, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=NotCancel_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_not_cancel by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NotXorToXor_1-1: TestResult(requestId=NotXorToXor_1-1, elapsedTime=197778, resultStatus=FAILED, result=IsabelleResult(requestID=NotXorToXor_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) lx hx \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (32::nat) ly hy \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinXor x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. stamp_expr x = IntegerStamp (32::nat) lx hx \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (32::nat) ly hy \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        BinaryExpr BinXor x y
    variables:
        hx, hy, lx, ly :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NotXorToXor_1-2: TestResult(requestId=NotXorToXor_1-2, elapsedTime=197136, resultStatus=FAILED, result=IsabelleResult(requestID=NotXorToXor_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) lx hx \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (32::nat) ly hy \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinXor x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. stamp_expr x = IntegerStamp (32::nat) lx hx \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (32::nat) ly hy \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        BinaryExpr BinXor x y
    variables:
        hx, hy, lx, ly :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NotXorToXor_1-3: TestResult(requestId=NotXorToXor_1-3, elapsedTime=170260, resultStatus=FAILED, result=IsabelleResult(requestID=NotXorToXor_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) lx hx \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (32::nat) ly hy \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinXor x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. stamp_expr x = IntegerStamp (32::nat) lx hx \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (32::nat) ly hy \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        BinaryExpr BinXor x y
    variables:
        hx, hy, lx, ly :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NotXorToXor_1-4: TestResult(requestId=NotXorToXor_1-4, elapsedTime=214080, resultStatus=FAILED, result=IsabelleResult(requestID=NotXorToXor_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) lx hx \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (32::nat) ly hy \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinXor x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. stamp_expr x = IntegerStamp (32::nat) lx hx \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (32::nat) ly hy \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        BinaryExpr BinXor x y
    variables:
        hx, hy, lx, ly :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result NotXorToXor_1-5: TestResult(requestId=NotXorToXor_1-5, elapsedTime=160750, resultStatus=FAILED, result=IsabelleResult(requestID=NotXorToXor_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (32::nat) lx hx \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (32::nat) ly hy \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinXor x y)
        < Suc (Suc (Suc (Suc (Suc (Suc (Canonicalization.size x +
                                        Canonicalization.size y))))))
     2. stamp_expr x = IntegerStamp (32::nat) lx hx \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (32::nat) ly hy \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        BinaryExpr BinXor x y
    variables:
        hx, hy, lx, ly :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrEqual_1-1: TestResult(requestId=OrEqual_1-1, elapsedTime=66886, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=OrEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_or_equal by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrEqual_1-2: TestResult(requestId=OrEqual_1-2, elapsedTime=65654, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=OrEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_or_equal by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrEqual_1-3: TestResult(requestId=OrEqual_1-3, elapsedTime=63180, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=OrEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_or_equal by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrEqual_1-4: TestResult(requestId=OrEqual_1-4, elapsedTime=67823, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=OrEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (meson exp_or_equal)], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrEqual_1-5: TestResult(requestId=OrEqual_1-5, elapsedTime=70382, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=OrEqual_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_or_equal by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrInverse2_1-1: TestResult(requestId=OrInverse2_1-1, elapsedTime=135380, resultStatus=FAILED, result=IsabelleResult(requestID=OrInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinOr (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrInverse2_1-2: TestResult(requestId=OrInverse2_1-2, elapsedTime=137374, resultStatus=FAILED, result=IsabelleResult(requestID=OrInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinOr (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrInverse2_1-3: TestResult(requestId=OrInverse2_1-3, elapsedTime=137224, resultStatus=FAILED, result=IsabelleResult(requestID=OrInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinOr (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrInverse2_1-4: TestResult(requestId=OrInverse2_1-4, elapsedTime=135820, resultStatus=FAILED, result=IsabelleResult(requestID=OrInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinOr (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrInverse2_1-5: TestResult(requestId=OrInverse2_1-5, elapsedTime=137066, resultStatus=FAILED, result=IsabelleResult(requestID=OrInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinOr (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrInverse_1-1: TestResult(requestId=OrInverse_1-1, elapsedTime=62881, resultStatus=FAILED, result=IsabelleResult(requestID=OrInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrInverse_1-2: TestResult(requestId=OrInverse_1-2, elapsedTime=62973, resultStatus=FAILED, result=IsabelleResult(requestID=OrInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrInverse_1-3: TestResult(requestId=OrInverse_1-3, elapsedTime=62966, resultStatus=FAILED, result=IsabelleResult(requestID=OrInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrInverse_1-4: TestResult(requestId=OrInverse_1-4, elapsedTime=68839, resultStatus=FAILED, result=IsabelleResult(requestID=OrInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrInverse_1-5: TestResult(requestId=OrInverse_1-5, elapsedTime=66045, resultStatus=FAILED, result=IsabelleResult(requestID=OrInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinOr n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrNotOperands_1-1: TestResult(requestId=OrNotOperands_1-1, elapsedTime=71498, resultStatus=FAILED, result=IsabelleResult(requestID=OrNotOperands_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAnd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinOr (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinAnd x y)
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrNotOperands_1-2: TestResult(requestId=OrNotOperands_1-2, elapsedTime=69000, resultStatus=FAILED, result=IsabelleResult(requestID=OrNotOperands_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAnd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinOr (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinAnd x y)
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrNotOperands_1-3: TestResult(requestId=OrNotOperands_1-3, elapsedTime=69000, resultStatus=FAILED, result=IsabelleResult(requestID=OrNotOperands_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAnd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinOr (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinAnd x y)
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrNotOperands_1-4: TestResult(requestId=OrNotOperands_1-4, elapsedTime=72001, resultStatus=FAILED, result=IsabelleResult(requestID=OrNotOperands_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAnd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinOr (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinAnd x y)
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrNotOperands_1-5: TestResult(requestId=OrNotOperands_1-5, elapsedTime=66176, resultStatus=FAILED, result=IsabelleResult(requestID=OrNotOperands_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAnd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinOr (UnaryExpr UnaryNot x) (UnaryExpr UnaryNot y) \<sqsupseteq>
        UnaryExpr UnaryNot (BinaryExpr BinAnd x y)
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrShiftConstantRight_1-1: TestResult(requestId=OrShiftConstantRight_1-1, elapsedTime=71503, resultStatus=FAILED, result=IsabelleResult(requestID=OrShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinOr (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinOr (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinOr y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrShiftConstantRight_1-2: TestResult(requestId=OrShiftConstantRight_1-2, elapsedTime=71992, resultStatus=FAILED, result=IsabelleResult(requestID=OrShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinOr (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinOr (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinOr y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrShiftConstantRight_1-3: TestResult(requestId=OrShiftConstantRight_1-3, elapsedTime=66168, resultStatus=FAILED, result=IsabelleResult(requestID=OrShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinOr (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinOr (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinOr y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrShiftConstantRight_1-4: TestResult(requestId=OrShiftConstantRight_1-4, elapsedTime=69016, resultStatus=FAILED, result=IsabelleResult(requestID=OrShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinOr (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinOr (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinOr y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result OrShiftConstantRight_1-5: TestResult(requestId=OrShiftConstantRight_1-5, elapsedTime=63094, resultStatus=FAILED, result=IsabelleResult(requestID=OrShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinOr (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinOr (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinOr y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantAddSub_1-1: TestResult(requestId=RedundantAddSub_1-1, elapsedTime=66194, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantAddSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add2 by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantAddSub_1-2: TestResult(requestId=RedundantAddSub_1-2, elapsedTime=70086, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantAddSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add2 by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantAddSub_1-3: TestResult(requestId=RedundantAddSub_1-3, elapsedTime=73953, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantAddSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantAddSub_Exp by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantAddSub_1-4: TestResult(requestId=RedundantAddSub_1-4, elapsedTime=72119, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantAddSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantAddSub_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantAddSub_1-5: TestResult(requestId=RedundantAddSub_1-5, elapsedTime=69929, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantAddSub_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (meson RedundantAddSub_Exp)], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantAddSub_2-1: TestResult(requestId=RedundantAddSub_2-1, elapsedTime=38998, resultStatus=MALFORMED, result=IsabelleResult(requestID=RedundantAddSub_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantAddSub_2-2: TestResult(requestId=RedundantAddSub_2-2, elapsedTime=39000, resultStatus=MALFORMED, result=IsabelleResult(requestID=RedundantAddSub_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantAddSub_2-3: TestResult(requestId=RedundantAddSub_2-3, elapsedTime=38999, resultStatus=MALFORMED, result=IsabelleResult(requestID=RedundantAddSub_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantAddSub_2-4: TestResult(requestId=RedundantAddSub_2-4, elapsedTime=39001, resultStatus=MALFORMED, result=IsabelleResult(requestID=RedundantAddSub_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantAddSub_2-5: TestResult(requestId=RedundantAddSub_2-5, elapsedTime=38999, resultStatus=MALFORMED, result=IsabelleResult(requestID=RedundantAddSub_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd2_1-1: TestResult(requestId=RedundantSubAdd2_1-1, elapsedTime=131998, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantSubAdd2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_Suc_eq size_binary_lhs trans_less_add2), using RedundantSubAdd2(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd2_1-2: TestResult(requestId=RedundantSubAdd2_1-2, elapsedTime=144000, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantSubAdd2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_eq_plus1 add.commute size_binary_lhs trans_less_add2), using RedundantSubAdd2(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd2_1-3: TestResult(requestId=RedundantSubAdd2_1-3, elapsedTime=147000, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantSubAdd2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_SucI size_binary_lhs trans_less_add2), by (metis RedundantSubAdd2(1) rewrite_preservation.simps(1))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd2_1-4: TestResult(requestId=RedundantSubAdd2_1-4, elapsedTime=147000, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantSubAdd2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_SucI size_binary_lhs trans_less_add2), using RedundantSubAdd2(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd2_1-5: TestResult(requestId=RedundantSubAdd2_1-5, elapsedTime=132010, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantSubAdd2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using less_Suc_eq size_binary_lhs trans_less_add2 apply presburger, by (metis RedundantSubAdd2(1) rewrite_preservation.simps(1))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd_1-1: TestResult(requestId=RedundantSubAdd_1-1, elapsedTime=86040, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantSubAdd_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantSubAdd_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd_1-2: TestResult(requestId=RedundantSubAdd_1-2, elapsedTime=65989, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantSubAdd_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantSubAdd_Exp by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd_1-3: TestResult(requestId=RedundantSubAdd_1-3, elapsedTime=68947, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantSubAdd_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantSubAdd_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd_1-4: TestResult(requestId=RedundantSubAdd_1-4, elapsedTime=69118, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantSubAdd_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantSubAdd_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd_1-5: TestResult(requestId=RedundantSubAdd_1-5, elapsedTime=65929, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=RedundantSubAdd_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantSubAdd_Exp by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd_2-1: TestResult(requestId=RedundantSubAdd_2-1, elapsedTime=30962, resultStatus=MALFORMED, result=IsabelleResult(requestID=RedundantSubAdd_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd_2-2: TestResult(requestId=RedundantSubAdd_2-2, elapsedTime=39000, resultStatus=MALFORMED, result=IsabelleResult(requestID=RedundantSubAdd_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd_2-3: TestResult(requestId=RedundantSubAdd_2-3, elapsedTime=39000, resultStatus=MALFORMED, result=IsabelleResult(requestID=RedundantSubAdd_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd_2-4: TestResult(requestId=RedundantSubAdd_2-4, elapsedTime=39009, resultStatus=MALFORMED, result=IsabelleResult(requestID=RedundantSubAdd_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result RedundantSubAdd_2-5: TestResult(requestId=RedundantSubAdd_2-5, elapsedTime=38991, resultStatus=MALFORMED, result=IsabelleResult(requestID=RedundantSubAdd_2, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ReturnXOnZeroShift_1-1: TestResult(requestId=ReturnXOnZeroShift_1-1, elapsedTime=68576, resultStatus=FAILED, result=IsabelleResult(requestID=ReturnXOnZeroShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinRightShift x
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        x
    variables:
        hi, lo :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ReturnXOnZeroShift_1-2: TestResult(requestId=ReturnXOnZeroShift_1-2, elapsedTime=71932, resultStatus=FAILED, result=IsabelleResult(requestID=ReturnXOnZeroShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinRightShift x
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        x
    variables:
        hi, lo :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ReturnXOnZeroShift_1-3: TestResult(requestId=ReturnXOnZeroShift_1-3, elapsedTime=71970, resultStatus=FAILED, result=IsabelleResult(requestID=ReturnXOnZeroShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinRightShift x
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        x
    variables:
        hi, lo :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ReturnXOnZeroShift_1-4: TestResult(requestId=ReturnXOnZeroShift_1-4, elapsedTime=72031, resultStatus=FAILED, result=IsabelleResult(requestID=ReturnXOnZeroShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinRightShift x
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        x
    variables:
        hi, lo :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ReturnXOnZeroShift_1-5: TestResult(requestId=ReturnXOnZeroShift_1-5, elapsedTime=72051, resultStatus=FAILED, result=IsabelleResult(requestID=ReturnXOnZeroShift_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) lo hi \<and> wf_stamp x \<longrightarrow>
        BinaryExpr BinRightShift x
         (ConstantExpr (IntVal (32::nat) (0::64 word))) \<sqsupseteq>
        x
    variables:
        hi, lo :: int
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterAddLeft_1-1: TestResult(requestId=SubAfterAddLeft_1-1, elapsedTime=65257, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubAfterAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add2 by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterAddLeft_1-2: TestResult(requestId=SubAfterAddLeft_1-2, elapsedTime=75000, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubAfterAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantAddSub_Exp by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterAddLeft_1-3: TestResult(requestId=SubAfterAddLeft_1-3, elapsedTime=75000, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubAfterAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add2 by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterAddLeft_1-4: TestResult(requestId=SubAfterAddLeft_1-4, elapsedTime=72000, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubAfterAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using RedundantAddSub_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterAddLeft_1-5: TestResult(requestId=SubAfterAddLeft_1-5, elapsedTime=73983, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubAfterAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add2 by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterAddRight_1-1: TestResult(requestId=SubAfterAddRight_1-1, elapsedTime=67015, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubAfterAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterAddRight_1-2: TestResult(requestId=SubAfterAddRight_1-2, elapsedTime=68999, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubAfterAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (meson exp_sub_after_right_add)], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterAddRight_1-3: TestResult(requestId=SubAfterAddRight_1-3, elapsedTime=74073, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubAfterAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterAddRight_1-4: TestResult(requestId=SubAfterAddRight_1-4, elapsedTime=70282, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubAfterAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterAddRight_1-5: TestResult(requestId=SubAfterAddRight_1-5, elapsedTime=67757, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubAfterAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using exp_sub_after_right_add by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterSubLeft_1-1: TestResult(requestId=SubAfterSubLeft_1-1, elapsedTime=71440, resultStatus=FAILED, result=IsabelleResult(requestID=SubAfterSubLeft_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinSub (BinaryExpr BinSub x y) x)
     2. BinaryExpr BinSub (BinaryExpr BinSub x y) x \<sqsupseteq> UnaryExpr UnaryNeg y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterSubLeft_1-2: TestResult(requestId=SubAfterSubLeft_1-2, elapsedTime=72130, resultStatus=FAILED, result=IsabelleResult(requestID=SubAfterSubLeft_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinSub (BinaryExpr BinSub x y) x)
     2. BinaryExpr BinSub (BinaryExpr BinSub x y) x \<sqsupseteq> UnaryExpr UnaryNeg y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterSubLeft_1-3: TestResult(requestId=SubAfterSubLeft_1-3, elapsedTime=71852, resultStatus=FAILED, result=IsabelleResult(requestID=SubAfterSubLeft_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinSub (BinaryExpr BinSub x y) x)
     2. BinaryExpr BinSub (BinaryExpr BinSub x y) x \<sqsupseteq> UnaryExpr UnaryNeg y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterSubLeft_1-4: TestResult(requestId=SubAfterSubLeft_1-4, elapsedTime=69170, resultStatus=FAILED, result=IsabelleResult(requestID=SubAfterSubLeft_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinSub (BinaryExpr BinSub x y) x)
     2. BinaryExpr BinSub (BinaryExpr BinSub x y) x \<sqsupseteq> UnaryExpr UnaryNeg y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubAfterSubLeft_1-5: TestResult(requestId=SubAfterSubLeft_1-5, elapsedTime=65988, resultStatus=FAILED, result=IsabelleResult(requestID=SubAfterSubLeft_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinSub (BinaryExpr BinSub x y) x)
     2. BinaryExpr BinSub (BinaryExpr BinSub x y) x \<sqsupseteq> UnaryExpr UnaryNeg y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeConstant_1-1: TestResult(requestId=SubNegativeConstant_1-1, elapsedTime=28301, resultStatus=NO_SUBGOAL, result=IsabelleResult(requestID=SubNegativeConstant_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeConstant_1-2: TestResult(requestId=SubNegativeConstant_1-2, elapsedTime=39001, resultStatus=NO_SUBGOAL, result=IsabelleResult(requestID=SubNegativeConstant_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeConstant_1-3: TestResult(requestId=SubNegativeConstant_1-3, elapsedTime=39010, resultStatus=NO_SUBGOAL, result=IsabelleResult(requestID=SubNegativeConstant_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.441+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeConstant_1-4: TestResult(requestId=SubNegativeConstant_1-4, elapsedTime=38991, resultStatus=NO_SUBGOAL, result=IsabelleResult(requestID=SubNegativeConstant_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeConstant_1-5: TestResult(requestId=SubNegativeConstant_1-5, elapsedTime=39000, resultStatus=NO_SUBGOAL, result=IsabelleResult(requestID=SubNegativeConstant_1, status=NO_SUBGOAL, message=Rule has no subgoal to proof!, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeConstant_2-1: TestResult(requestId=SubNegativeConstant_2-1, elapsedTime=47996, resultStatus=FOUND_COUNTEREXAMPLE, result=IsabelleResult(requestID=SubNegativeConstant_2, status=FOUND_COUNTEREXAMPLE, message=null, counterexample=Nitpick found a counterexample:
      Empty assignment, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeConstant_2-2: TestResult(requestId=SubNegativeConstant_2-2, elapsedTime=39000, resultStatus=FOUND_COUNTEREXAMPLE, result=IsabelleResult(requestID=SubNegativeConstant_2, status=FOUND_COUNTEREXAMPLE, message=null, counterexample=Nitpick found a counterexample:
      Empty assignment, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeConstant_2-3: TestResult(requestId=SubNegativeConstant_2-3, elapsedTime=39010, resultStatus=FOUND_COUNTEREXAMPLE, result=IsabelleResult(requestID=SubNegativeConstant_2, status=FOUND_COUNTEREXAMPLE, message=null, counterexample=Nitpick found a counterexample:
      Empty assignment, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeConstant_2-4: TestResult(requestId=SubNegativeConstant_2-4, elapsedTime=38990, resultStatus=FOUND_COUNTEREXAMPLE, result=IsabelleResult(requestID=SubNegativeConstant_2, status=FOUND_COUNTEREXAMPLE, message=null, counterexample=Nitpick found a counterexample:
      Empty assignment, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeConstant_2-5: TestResult(requestId=SubNegativeConstant_2-5, elapsedTime=39000, resultStatus=FOUND_COUNTEREXAMPLE, result=IsabelleResult(requestID=SubNegativeConstant_2, status=FOUND_COUNTEREXAMPLE, message=null, counterexample=Nitpick found a counterexample:
      Empty assignment, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeValue_1-1: TestResult(requestId=SubNegativeValue_1-1, elapsedTime=73398, resultStatus=FAILED, result=IsabelleResult(requestID=SubNegativeValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAdd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinSub x (UnaryExpr UnaryNeg y) \<sqsupseteq> BinaryExpr BinAdd x y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeValue_1-2: TestResult(requestId=SubNegativeValue_1-2, elapsedTime=72014, resultStatus=FAILED, result=IsabelleResult(requestID=SubNegativeValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAdd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinSub x (UnaryExpr UnaryNeg y) \<sqsupseteq> BinaryExpr BinAdd x y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeValue_1-3: TestResult(requestId=SubNegativeValue_1-3, elapsedTime=71995, resultStatus=FAILED, result=IsabelleResult(requestID=SubNegativeValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAdd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinSub x (UnaryExpr UnaryNeg y) \<sqsupseteq> BinaryExpr BinAdd x y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeValue_1-4: TestResult(requestId=SubNegativeValue_1-4, elapsedTime=71991, resultStatus=FAILED, result=IsabelleResult(requestID=SubNegativeValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAdd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinSub x (UnaryExpr UnaryNeg y) \<sqsupseteq> BinaryExpr BinAdd x y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubNegativeValue_1-5: TestResult(requestId=SubNegativeValue_1-5, elapsedTime=72009, resultStatus=FAILED, result=IsabelleResult(requestID=SubNegativeValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinAdd x y)
        < Suc (Suc (Suc (Suc (Canonicalization.size x +
                              Canonicalization.size y))))
     2. BinaryExpr BinSub x (UnaryExpr UnaryNeg y) \<sqsupseteq> BinaryExpr BinAdd x y
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubSelfIsZero_1-1: TestResult(requestId=SubSelfIsZero_1-1, elapsedTime=67346, resultStatus=FAILED, result=IsabelleResult(requestID=SubSelfIsZero_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        wf_stamp (BinaryExpr BinSub x x) \<Longrightarrow>
        Canonicalization.size
         (forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x))
           (0::'a))
        < Canonicalization.size (BinaryExpr BinSub x x)
     2. wf_stamp x \<and> wf_stamp (BinaryExpr BinSub x x) \<longrightarrow>
        BinaryExpr BinSub x x \<sqsupseteq>
        forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x)) (0::'a)
    variables:
        forPrimitive :: Stamp \<Rightarrow> 'a \<Rightarrow> IRExpr
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubSelfIsZero_1-2: TestResult(requestId=SubSelfIsZero_1-2, elapsedTime=66230, resultStatus=FAILED, result=IsabelleResult(requestID=SubSelfIsZero_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        wf_stamp (BinaryExpr BinSub x x) \<Longrightarrow>
        Canonicalization.size
         (forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x))
           (0::'a))
        < Canonicalization.size (BinaryExpr BinSub x x)
     2. wf_stamp x \<and> wf_stamp (BinaryExpr BinSub x x) \<longrightarrow>
        BinaryExpr BinSub x x \<sqsupseteq>
        forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x)) (0::'a)
    variables:
        forPrimitive :: Stamp \<Rightarrow> 'a \<Rightarrow> IRExpr
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubSelfIsZero_1-3: TestResult(requestId=SubSelfIsZero_1-3, elapsedTime=68843, resultStatus=FAILED, result=IsabelleResult(requestID=SubSelfIsZero_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        wf_stamp (BinaryExpr BinSub x x) \<Longrightarrow>
        Canonicalization.size
         (forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x))
           (0::'a))
        < Canonicalization.size (BinaryExpr BinSub x x)
     2. wf_stamp x \<and> wf_stamp (BinaryExpr BinSub x x) \<longrightarrow>
        BinaryExpr BinSub x x \<sqsupseteq>
        forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x)) (0::'a)
    variables:
        forPrimitive :: Stamp \<Rightarrow> 'a \<Rightarrow> IRExpr
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubSelfIsZero_1-4: TestResult(requestId=SubSelfIsZero_1-4, elapsedTime=71897, resultStatus=FAILED, result=IsabelleResult(requestID=SubSelfIsZero_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        wf_stamp (BinaryExpr BinSub x x) \<Longrightarrow>
        Canonicalization.size
         (forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x))
           (0::'a))
        < Canonicalization.size (BinaryExpr BinSub x x)
     2. wf_stamp x \<and> wf_stamp (BinaryExpr BinSub x x) \<longrightarrow>
        BinaryExpr BinSub x x \<sqsupseteq>
        forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x)) (0::'a)
    variables:
        forPrimitive :: Stamp \<Rightarrow> 'a \<Rightarrow> IRExpr
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubSelfIsZero_1-5: TestResult(requestId=SubSelfIsZero_1-5, elapsedTime=66030, resultStatus=FAILED, result=IsabelleResult(requestID=SubSelfIsZero_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        wf_stamp (BinaryExpr BinSub x x) \<Longrightarrow>
        Canonicalization.size
         (forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x))
           (0::'a))
        < Canonicalization.size (BinaryExpr BinSub x x)
     2. wf_stamp x \<and> wf_stamp (BinaryExpr BinSub x x) \<longrightarrow>
        BinaryExpr BinSub x x \<sqsupseteq>
        forPrimitive (stamp_binary BinSub (stamp_expr x) (stamp_expr x)) (0::'a)
    variables:
        forPrimitive :: Stamp \<Rightarrow> 'a \<Rightarrow> IRExpr
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubSelfIsZero_2-1: TestResult(requestId=SubSelfIsZero_2-1, elapsedTime=147238, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubSelfIsZero_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI order.asym size_binary_rhs size_pos), using SubSelfIsZero(1) by force], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubSelfIsZero_2-2: TestResult(requestId=SubSelfIsZero_2-2, elapsedTime=192000, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubSelfIsZero_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI less_numeral_extra(3) less_one size_binary_lhs size_pos), using SubSelfIsZero(1) by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubSelfIsZero_2-3: TestResult(requestId=SubSelfIsZero_2-3, elapsedTime=173999, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubSelfIsZero_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI less_numeral_extra(3) less_one size_binary_rhs size_pos), using SubSelfIsZero(1) by force], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubSelfIsZero_2-4: TestResult(requestId=SubSelfIsZero_2-4, elapsedTime=174011, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubSelfIsZero_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI order.asym size_binary_rhs size_pos), using SubSelfIsZero(1) by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubSelfIsZero_2-5: TestResult(requestId=SubSelfIsZero_2-5, elapsedTime=200990, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubSelfIsZero_2, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI order.asym size_binary_rhs size_pos), using SubSelfIsZero(1) by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenAddLeft_1-1: TestResult(requestId=SubThenAddLeft_1-1, elapsedTime=121835, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddLeft(1) by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenAddLeft_1-2: TestResult(requestId=SubThenAddLeft_1-2, elapsedTime=72232, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddLeft(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenAddLeft_1-3: TestResult(requestId=SubThenAddLeft_1-3, elapsedTime=68909, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddLeft(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenAddLeft_1-4: TestResult(requestId=SubThenAddLeft_1-4, elapsedTime=70032, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddLeft(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenAddLeft_1-5: TestResult(requestId=SubThenAddLeft_1-5, elapsedTime=71999, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenAddLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddLeft(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenAddRight_1-1: TestResult(requestId=SubThenAddRight_1-1, elapsedTime=71988, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddRight(1) by force], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenAddRight_1-2: TestResult(requestId=SubThenAddRight_1-2, elapsedTime=70977, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddRight(1) rewrite_preservation.simps(1) by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenAddRight_1-3: TestResult(requestId=SubThenAddRight_1-3, elapsedTime=67022, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddRight(1) by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenAddRight_1-4: TestResult(requestId=SubThenAddRight_1-4, elapsedTime=73802, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddRight(1) by force], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenAddRight_1-5: TestResult(requestId=SubThenAddRight_1-5, elapsedTime=70208, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenAddRight_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubThenAddRight(1) by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenSubLeft_1-1: TestResult(requestId=SubThenSubLeft_1-1, elapsedTime=122997, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenSubLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_Suc_eq size_binary_rhs trans_less_add2), using exp_sub_then_left_sub by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenSubLeft_1-2: TestResult(requestId=SubThenSubLeft_1-2, elapsedTime=155991, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenSubLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_Suc_eq size_binary_rhs trans_less_add2), using exp_sub_then_left_sub by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenSubLeft_1-3: TestResult(requestId=SubThenSubLeft_1-3, elapsedTime=174000, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenSubLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_SucI size_binary_rhs trans_less_add2), using exp_sub_then_left_sub by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenSubLeft_1-4: TestResult(requestId=SubThenSubLeft_1-4, elapsedTime=159001, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenSubLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_SucI size_binary_rhs trans_less_add2), using exp_sub_then_left_sub by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubThenSubLeft_1-5: TestResult(requestId=SubThenSubLeft_1-5, elapsedTime=153009, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubThenSubLeft_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (simp add: less_Suc_eq size_binary_rhs trans_less_add2), using exp_sub_then_left_sub by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubtractZero_1-1: TestResult(requestId=SubtractZero_1-1, elapsedTime=101987, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubtractZero_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubtractZero_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubtractZero_1-2: TestResult(requestId=SubtractZero_1-2, elapsedTime=71060, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubtractZero_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubtractZero_Exp by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubtractZero_1-3: TestResult(requestId=SubtractZero_1-3, elapsedTime=65986, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubtractZero_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubtractZero_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubtractZero_1-4: TestResult(requestId=SubtractZero_1-4, elapsedTime=66102, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubtractZero_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubtractZero_Exp by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result SubtractZero_1-5: TestResult(requestId=SubtractZero_1-5, elapsedTime=65939, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=SubtractZero_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using SubtractZero_Exp by blast], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result UnaryConstantFold_1-1: TestResult(requestId=UnaryConstantFold_1-1, elapsedTime=30921, resultStatus=MALFORMED, result=IsabelleResult(requestID=UnaryConstantFold_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result UnaryConstantFold_1-2: TestResult(requestId=UnaryConstantFold_1-2, elapsedTime=38992, resultStatus=MALFORMED, result=IsabelleResult(requestID=UnaryConstantFold_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result UnaryConstantFold_1-3: TestResult(requestId=UnaryConstantFold_1-3, elapsedTime=39010, resultStatus=MALFORMED, result=IsabelleResult(requestID=UnaryConstantFold_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result UnaryConstantFold_1-4: TestResult(requestId=UnaryConstantFold_1-4, elapsedTime=38989, resultStatus=MALFORMED, result=IsabelleResult(requestID=UnaryConstantFold_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result UnaryConstantFold_1-5: TestResult(requestId=UnaryConstantFold_1-5, elapsedTime=39000, resultStatus=MALFORMED, result=IsabelleResult(requestID=UnaryConstantFold_1, status=MALFORMED, message=Malformed rule found!, counterexample=null, proofs=null, isabelleMessages=[Inner syntax error\<^here>
    Failed to parse term, Bad context for command "."\<^here> -- using reset state], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result WrongAddSub_1-1: TestResult(requestId=WrongAddSub_1-1, elapsedTime=78610, resultStatus=FAILED, result=IsabelleResult(requestID=WrongAddSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinSub (BinaryExpr BinAdd b a) b \<sqsupseteq> b
    variables:
        a, b :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result WrongAddSub_1-2: TestResult(requestId=WrongAddSub_1-2, elapsedTime=66131, resultStatus=FAILED, result=IsabelleResult(requestID=WrongAddSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinSub (BinaryExpr BinAdd b a) b \<sqsupseteq> b
    variables:
        a, b :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result WrongAddSub_1-3: TestResult(requestId=WrongAddSub_1-3, elapsedTime=71817, resultStatus=FAILED, result=IsabelleResult(requestID=WrongAddSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinSub (BinaryExpr BinAdd b a) b \<sqsupseteq> b
    variables:
        a, b :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result WrongAddSub_1-4: TestResult(requestId=WrongAddSub_1-4, elapsedTime=72202, resultStatus=FAILED, result=IsabelleResult(requestID=WrongAddSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinSub (BinaryExpr BinAdd b a) b \<sqsupseteq> b
    variables:
        a, b :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result WrongAddSub_1-5: TestResult(requestId=WrongAddSub_1-5, elapsedTime=68885, resultStatus=FAILED, result=IsabelleResult(requestID=WrongAddSub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinSub (BinaryExpr BinAdd b a) b \<sqsupseteq> b
    variables:
        a, b :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorEqNeg1_64_1-1: TestResult(requestId=XorEqNeg1_64_1-1, elapsedTime=73202, resultStatus=FAILED, result=IsabelleResult(requestID=XorEqNeg1_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x + Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor x y)
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (- (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (UnaryExpr UnaryNot y)
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorEqNeg1_64_1-2: TestResult(requestId=XorEqNeg1_64_1-2, elapsedTime=65909, resultStatus=FAILED, result=IsabelleResult(requestID=XorEqNeg1_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x + Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor x y)
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (- (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (UnaryExpr UnaryNot y)
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorEqNeg1_64_1-3: TestResult(requestId=XorEqNeg1_64_1-3, elapsedTime=71761, resultStatus=FAILED, result=IsabelleResult(requestID=XorEqNeg1_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x + Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor x y)
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (- (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (UnaryExpr UnaryNot y)
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorEqNeg1_64_1-4: TestResult(requestId=XorEqNeg1_64_1-4, elapsedTime=69162, resultStatus=FAILED, result=IsabelleResult(requestID=XorEqNeg1_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x + Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor x y)
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (- (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (UnaryExpr UnaryNot y)
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorEqNeg1_64_1-5: TestResult(requestId=XorEqNeg1_64_1-5, elapsedTime=69051, resultStatus=FAILED, result=IsabelleResult(requestID=XorEqNeg1_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x + Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor x y)
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (- (1::64 word)))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (UnaryExpr UnaryNot y)
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorEqZero_64_1-1: TestResult(requestId=XorEqZero_64_1-1, elapsedTime=130434, resultStatus=FAILED, result=IsabelleResult(requestID=XorEqZero_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals x y)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (0::64 word))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x y
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorEqZero_64_1-2: TestResult(requestId=XorEqZero_64_1-2, elapsedTime=132163, resultStatus=FAILED, result=IsabelleResult(requestID=XorEqZero_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals x y)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (0::64 word))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x y
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorEqZero_64_1-3: TestResult(requestId=XorEqZero_64_1-3, elapsedTime=137715, resultStatus=FAILED, result=IsabelleResult(requestID=XorEqZero_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals x y)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (0::64 word))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x y
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorEqZero_64_1-4: TestResult(requestId=XorEqZero_64_1-4, elapsedTime=134691, resultStatus=FAILED, result=IsabelleResult(requestID=XorEqZero_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals x y)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (0::64 word))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x y
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorEqZero_64_1-5: TestResult(requestId=XorEqZero_64_1-5, elapsedTime=132431, resultStatus=FAILED, result=IsabelleResult(requestID=XorEqZero_64_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals x y)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp (64::nat) yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (ConstantExpr (IntVal (64::nat) (0::64 word))) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x y
    variables:
        xh, xl, yh, yl :: int
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough1_1-1: TestResult(requestId=XorFallThrough1_1-1, elapsedTime=70526, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough1_1-2: TestResult(requestId=XorFallThrough1_1-2, elapsedTime=71923, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough1_1-3: TestResult(requestId=XorFallThrough1_1-3, elapsedTime=66099, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough1_1-4: TestResult(requestId=XorFallThrough1_1-4, elapsedTime=71902, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough1_1-5: TestResult(requestId=XorFallThrough1_1-5, elapsedTime=69014, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) x \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough2_1-1: TestResult(requestId=XorFallThrough2_1-1, elapsedTime=65339, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals x (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough2_1-2: TestResult(requestId=XorFallThrough2_1-2, elapsedTime=71779, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals x (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough2_1-3: TestResult(requestId=XorFallThrough2_1-3, elapsedTime=66150, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals x (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough2_1-4: TestResult(requestId=XorFallThrough2_1-4, elapsedTime=71851, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals x (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough2_1-5: TestResult(requestId=XorFallThrough2_1-5, elapsedTime=66281, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals x (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough3_1-1: TestResult(requestId=XorFallThrough3_1-1, elapsedTime=72681, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough3_1-2: TestResult(requestId=XorFallThrough3_1-2, elapsedTime=71921, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough3_1-3: TestResult(requestId=XorFallThrough3_1-3, elapsedTime=66111, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough3_1-4: TestResult(requestId=XorFallThrough3_1-4, elapsedTime=69133, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough3_1-5: TestResult(requestId=XorFallThrough3_1-5, elapsedTime=68772, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp b xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp b yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y)
     2. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y) y \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough4_1-1: TestResult(requestId=XorFallThrough4_1-1, elapsedTime=71101, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals y (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough4_1-2: TestResult(requestId=XorFallThrough4_1-2, elapsedTime=69204, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals y (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough4_1-3: TestResult(requestId=XorFallThrough4_1-3, elapsedTime=71779, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals y (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough4_1-4: TestResult(requestId=XorFallThrough4_1-4, elapsedTime=72008, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals y (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorFallThrough4_1-5: TestResult(requestId=XorFallThrough4_1-5, elapsedTime=69154, resultStatus=FAILED, result=IsabelleResult(requestID=XorFallThrough4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp b xl xh \<and>
        wf_stamp x \<and> stamp_expr y = IntegerStamp b yl yh \<and> wf_stamp y \<longrightarrow>
        BinaryExpr BinIntegerEquals y (BinaryExpr BinXor x y) \<sqsupseteq>
        BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal b (0::64 word)))
    variables:
        xh, xl, yh, yl :: int
        b :: nat
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorInverse2_1-1: TestResult(requestId=XorInverse2_1-1, elapsedTime=146103, resultStatus=FAILED, result=IsabelleResult(requestID=XorInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinXor (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorInverse2_1-2: TestResult(requestId=XorInverse2_1-2, elapsedTime=148577, resultStatus=FAILED, result=IsabelleResult(requestID=XorInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinXor (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorInverse2_1-3: TestResult(requestId=XorInverse2_1-3, elapsedTime=145396, resultStatus=FAILED, result=IsabelleResult(requestID=XorInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinXor (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorInverse2_1-4: TestResult(requestId=XorInverse2_1-4, elapsedTime=137851, resultStatus=FAILED, result=IsabelleResult(requestID=XorInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinXor (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorInverse2_1-5: TestResult(requestId=XorInverse2_1-5, elapsedTime=147416, resultStatus=FAILED, result=IsabelleResult(requestID=XorInverse2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<Longrightarrow>
        wf_stamp n \<Longrightarrow>
        Suc (0::nat)
        < Canonicalization.size (BinaryExpr BinXor (UnaryExpr UnaryNot n) n)
     2. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor (UnaryExpr UnaryNot n) n \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorInverse_1-1: TestResult(requestId=XorInverse_1-1, elapsedTime=68179, resultStatus=FAILED, result=IsabelleResult(requestID=XorInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorInverse_1-2: TestResult(requestId=XorInverse_1-2, elapsedTime=68826, resultStatus=FAILED, result=IsabelleResult(requestID=XorInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorInverse_1-3: TestResult(requestId=XorInverse_1-3, elapsedTime=66134, resultStatus=FAILED, result=IsabelleResult(requestID=XorInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorInverse_1-4: TestResult(requestId=XorInverse_1-4, elapsedTime=68842, resultStatus=FAILED, result=IsabelleResult(requestID=XorInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorInverse_1-5: TestResult(requestId=XorInverse_1-5, elapsedTime=69008, resultStatus=FAILED, result=IsabelleResult(requestID=XorInverse_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr n = IntegerStamp (32::nat) l h \<and> wf_stamp n \<longrightarrow>
        BinaryExpr BinXor n (UnaryExpr UnaryNot n) \<sqsupseteq>
        ConstantExpr (IntVal (32::nat) (mask (32::nat)))
    variables:
        h, l :: int
        n :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_1_1-1: TestResult(requestId=XorIsEqual_64_1_1-1, elapsedTime=225923, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_1_1-2: TestResult(requestId=XorIsEqual_64_1_1-2, elapsedTime=250848, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_1_1-3: TestResult(requestId=XorIsEqual_64_1_1-3, elapsedTime=169803, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_1_1-4: TestResult(requestId=XorIsEqual_64_1_1-4, elapsedTime=247738, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_1_1-5: TestResult(requestId=XorIsEqual_64_1_1-5, elapsedTime=247656, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_1_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_2_1-1: TestResult(requestId=XorIsEqual_64_2_1-1, elapsedTime=72290, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_2_1-2: TestResult(requestId=XorIsEqual_64_2_1-2, elapsedTime=71952, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.442+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_2_1-3: TestResult(requestId=XorIsEqual_64_2_1-3, elapsedTime=72295, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_2_1-4: TestResult(requestId=XorIsEqual_64_2_1-4, elapsedTime=71435, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_2_1-5: TestResult(requestId=XorIsEqual_64_2_1-5, elapsedTime=72064, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_2_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor x y) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor x y)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_3_1-1: TestResult(requestId=XorIsEqual_64_3_1-1, elapsedTime=69085, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_3_1-2: TestResult(requestId=XorIsEqual_64_3_1-2, elapsedTime=72057, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_3_1-3: TestResult(requestId=XorIsEqual_64_3_1-3, elapsedTime=71856, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_3_1-4: TestResult(requestId=XorIsEqual_64_3_1-4, elapsedTime=72214, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_3_1-5: TestResult(requestId=XorIsEqual_64_3_1-5, elapsedTime=72211, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_3_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor x z)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor x z) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_4_1-1: TestResult(requestId=XorIsEqual_64_4_1-1, elapsedTime=708200, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_4_1-2: TestResult(requestId=XorIsEqual_64_4_1-2, elapsedTime=146785, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_4_1-3: TestResult(requestId=XorIsEqual_64_4_1-3, elapsedTime=172372, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_4_1-4: TestResult(requestId=XorIsEqual_64_4_1-4, elapsedTime=146098, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorIsEqual_64_4_1-5: TestResult(requestId=XorIsEqual_64_4_1-5, elapsedTime=177913, resultStatus=FAILED, result=IsabelleResult(requestID=XorIsEqual_64_4_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. stamp_expr x = IntegerStamp (64::nat) xl xh \<Longrightarrow>
        wf_stamp x \<Longrightarrow>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<Longrightarrow>
        wf_stamp y \<Longrightarrow>
        stamp_expr z = IntegerStamp (64::nat) zl zh \<Longrightarrow>
        wf_stamp z \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinIntegerEquals y z)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinXor y x) +
                    Canonicalization.size (BinaryExpr BinXor z x)))
     2. stamp_expr x = IntegerStamp (64::nat) xl xh \<and>
        wf_stamp x \<and>
        stamp_expr y = IntegerStamp (64::nat) yl yh \<and>
        wf_stamp y \<and> stamp_expr z = IntegerStamp (64::nat) zl zh \<and> wf_stamp z \<longrightarrow>
        BinaryExpr BinIntegerEquals (BinaryExpr BinXor y x)
         (BinaryExpr BinXor z x) \<sqsupseteq>
        BinaryExpr BinIntegerEquals y z
    variables:
        xh, xl, yh, yl, zh, zl :: int
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorSelfIsFalse_1-1: TestResult(requestId=XorSelfIsFalse_1-1, elapsedTime=125941, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=XorSelfIsFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI less_numeral_extra(3) less_one size_binary_lhs size_pos), using exp_xor_self_is_false by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorSelfIsFalse_1-2: TestResult(requestId=XorSelfIsFalse_1-2, elapsedTime=155999, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=XorSelfIsFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI less_numeral_extra(3) less_one size_binary_lhs size_pos), using exp_xor_self_is_false by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorSelfIsFalse_1-3: TestResult(requestId=XorSelfIsFalse_1-3, elapsedTime=147000, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=XorSelfIsFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI not_less_eq size_binary_rhs size_pos), using default_stamp exp_xor_self_is_false by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorSelfIsFalse_1-4: TestResult(requestId=XorSelfIsFalse_1-4, elapsedTime=126000, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=XorSelfIsFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI not_less_eq size_binary_lhs size_pos), using default_stamp exp_xor_self_is_false by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorSelfIsFalse_1-5: TestResult(requestId=XorSelfIsFalse_1-5, elapsedTime=126009, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=XorSelfIsFalse_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[apply (metis Suc_lessI not_less_eq size_binary_lhs size_pos), using default_stamp exp_xor_self_is_false by presburger], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorShiftConstantRight_1-1: TestResult(requestId=XorShiftConstantRight_1-1, elapsedTime=82412, resultStatus=FAILED, result=IsabelleResult(requestID=XorShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinXor (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinXor y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorShiftConstantRight_1-2: TestResult(requestId=XorShiftConstantRight_1-2, elapsedTime=72039, resultStatus=FAILED, result=IsabelleResult(requestID=XorShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinXor (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinXor y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorShiftConstantRight_1-3: TestResult(requestId=XorShiftConstantRight_1-3, elapsedTime=66161, resultStatus=FAILED, result=IsabelleResult(requestID=XorShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinXor (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinXor y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorShiftConstantRight_1-4: TestResult(requestId=XorShiftConstantRight_1-4, elapsedTime=71780, resultStatus=FAILED, result=IsabelleResult(requestID=XorShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinXor (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinXor y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result XorShiftConstantRight_1-5: TestResult(requestId=XorShiftConstantRight_1-5, elapsedTime=72086, resultStatus=FAILED, result=IsabelleResult(requestID=XorShiftConstantRight_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. \<not> is_ConstantExpr y \<Longrightarrow>
        Suc (Suc (Canonicalization.size y))
        < Canonicalization.size (BinaryExpr BinXor (ConstantExpr x) y)
     2. \<not> is_ConstantExpr y \<longrightarrow>
        BinaryExpr BinXor (ConstantExpr x) y \<sqsupseteq>
        BinaryExpr BinXor y (ConstantExpr x)
    variables:
        x :: Value
        y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ZeroSubtractValue_1-1: TestResult(requestId=ZeroSubtractValue_1-1, elapsedTime=65768, resultStatus=FAILED, result=IsabelleResult(requestID=ZeroSubtractValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        \<not> is_ConstantExpr x \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<and> \<not> is_ConstantExpr x \<longrightarrow>
        BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x \<sqsupseteq>
        UnaryExpr UnaryNeg x
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ZeroSubtractValue_1-2: TestResult(requestId=ZeroSubtractValue_1-2, elapsedTime=68998, resultStatus=FAILED, result=IsabelleResult(requestID=ZeroSubtractValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        \<not> is_ConstantExpr x \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<and> \<not> is_ConstantExpr x \<longrightarrow>
        BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x \<sqsupseteq>
        UnaryExpr UnaryNeg x
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ZeroSubtractValue_1-3: TestResult(requestId=ZeroSubtractValue_1-3, elapsedTime=71881, resultStatus=FAILED, result=IsabelleResult(requestID=ZeroSubtractValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        \<not> is_ConstantExpr x \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<and> \<not> is_ConstantExpr x \<longrightarrow>
        BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x \<sqsupseteq>
        UnaryExpr UnaryNeg x
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ZeroSubtractValue_1-4: TestResult(requestId=ZeroSubtractValue_1-4, elapsedTime=72032, resultStatus=FAILED, result=IsabelleResult(requestID=ZeroSubtractValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        \<not> is_ConstantExpr x \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<and> \<not> is_ConstantExpr x \<longrightarrow>
        BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x \<sqsupseteq>
        UnaryExpr UnaryNeg x
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result ZeroSubtractValue_1-5: TestResult(requestId=ZeroSubtractValue_1-5, elapsedTime=72018, resultStatus=FAILED, result=IsabelleResult(requestID=ZeroSubtractValue_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. wf_stamp x \<Longrightarrow>
        stamp_expr x = IntegerStamp b lo hi \<Longrightarrow>
        \<not> is_ConstantExpr x \<Longrightarrow>
        Suc (Suc (Canonicalization.size x))
        < Canonicalization.size
           (BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x)
     2. wf_stamp x \<and> stamp_expr x = IntegerStamp b lo hi \<and> \<not> is_ConstantExpr x \<longrightarrow>
        BinaryExpr BinSub (ConstantExpr (IntVal b (0::64 word))) x \<sqsupseteq>
        UnaryExpr UnaryNeg x
    variables:
        hi, lo :: int
        b :: nat
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result condition_bounds_x_1-1: TestResult(requestId=condition_bounds_x_1-1, elapsedTime=69314, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=condition_bounds_x_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result condition_bounds_x_1-2: TestResult(requestId=condition_bounds_x_1-2, elapsedTime=69016, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=condition_bounds_x_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result condition_bounds_x_1-3: TestResult(requestId=condition_bounds_x_1-3, elapsedTime=68687, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=condition_bounds_x_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result condition_bounds_x_1-4: TestResult(requestId=condition_bounds_x_1-4, elapsedTime=69211, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=condition_bounds_x_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result condition_bounds_x_1-5: TestResult(requestId=condition_bounds_x_1-5, elapsedTime=69180, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=condition_bounds_x_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_x(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result condition_bounds_y_1-1: TestResult(requestId=condition_bounds_y_1-1, elapsedTime=65921, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=condition_bounds_y_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_y(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result condition_bounds_y_1-2: TestResult(requestId=condition_bounds_y_1-2, elapsedTime=68651, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=condition_bounds_y_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_y(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result condition_bounds_y_1-3: TestResult(requestId=condition_bounds_y_1-3, elapsedTime=66268, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=condition_bounds_y_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_y(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result condition_bounds_y_1-4: TestResult(requestId=condition_bounds_y_1-4, elapsedTime=66137, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=condition_bounds_y_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_y(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result condition_bounds_y_1-5: TestResult(requestId=condition_bounds_y_1-5, elapsedTime=65984, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=condition_bounds_y_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[by (metis condition_bounds_y(1) rewrite_preservation.simps(2))], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result distribute_sub_1-1: TestResult(requestId=distribute_sub_1-1, elapsedTime=71812, resultStatus=FAILED, result=IsabelleResult(requestID=distribute_sub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result distribute_sub_1-2: TestResult(requestId=distribute_sub_1-2, elapsedTime=69245, resultStatus=FAILED, result=IsabelleResult(requestID=distribute_sub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result distribute_sub_1-3: TestResult(requestId=distribute_sub_1-3, elapsedTime=65964, resultStatus=FAILED, result=IsabelleResult(requestID=distribute_sub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result distribute_sub_1-4: TestResult(requestId=distribute_sub_1-4, elapsedTime=71836, resultStatus=FAILED, result=IsabelleResult(requestID=distribute_sub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result distribute_sub_1-5: TestResult(requestId=distribute_sub_1-5, elapsedTime=71951, resultStatus=FAILED, result=IsabelleResult(requestID=distribute_sub_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. Canonicalization.size (BinaryExpr BinSub y x)
        < Suc (Suc (Canonicalization.size (BinaryExpr BinSub x y)))
     2. UnaryExpr UnaryNeg (BinaryExpr BinSub x y) \<sqsupseteq> BinaryExpr BinSub y x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result flipX2_1-1: TestResult(requestId=flipX2_1-1, elapsedTime=29240, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=flipX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result flipX2_1-2: TestResult(requestId=flipX2_1-2, elapsedTime=42000, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=flipX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result flipX2_1-3: TestResult(requestId=flipX2_1-3, elapsedTime=35990, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=flipX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result flipX2_1-4: TestResult(requestId=flipX2_1-4, elapsedTime=42011, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=flipX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result flipX2_1-5: TestResult(requestId=flipX2_1-5, elapsedTime=35999, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=flipX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result flipX_1-1: TestResult(requestId=flipX_1-1, elapsedTime=39006, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=flipX_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result flipX_1-2: TestResult(requestId=flipX_1-2, elapsedTime=44992, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=flipX_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result flipX_1-3: TestResult(requestId=flipX_1-3, elapsedTime=32998, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=flipX_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result flipX_1-4: TestResult(requestId=flipX_1-4, elapsedTime=38991, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=flipX_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result flipX_1-5: TestResult(requestId=flipX_1-5, elapsedTime=39000, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=flipX_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result normalizeX2_1-1: TestResult(requestId=normalizeX2_1-1, elapsedTime=28798, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=normalizeX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result normalizeX2_1-2: TestResult(requestId=normalizeX2_1-2, elapsedTime=39003, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=normalizeX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result normalizeX2_1-3: TestResult(requestId=normalizeX2_1-3, elapsedTime=38988, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=normalizeX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result normalizeX2_1-4: TestResult(requestId=normalizeX2_1-4, elapsedTime=48002, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=normalizeX2_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result normalizeX2_1-5: TestResult(requestId=normalizeX2_1-5, elapsedTime=29999, resultStatus=FOUND_AUTO_PROOF, result=IsabelleResult(requestID=normalizeX2_1, status=FOUND_AUTO_PROOF, message=null, counterexample=null, proofs=null, isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result normalizeX_1-1: TestResult(requestId=normalizeX_1-1, elapsedTime=78550, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=normalizeX_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using normalizeX(1) by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result normalizeX_1-2: TestResult(requestId=normalizeX_1-2, elapsedTime=68490, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=normalizeX_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using normalizeX(1) by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result normalizeX_1-3: TestResult(requestId=normalizeX_1-3, elapsedTime=69621, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=normalizeX_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using normalizeX(1) by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result normalizeX_1-4: TestResult(requestId=normalizeX_1-4, elapsedTime=67266, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=normalizeX_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using normalizeX(1) by fastforce], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result normalizeX_1-5: TestResult(requestId=normalizeX_1-5, elapsedTime=67071, resultStatus=FOUND_PROOF, result=IsabelleResult(requestID=normalizeX_1, status=FOUND_PROOF, message=null, counterexample=null, proofs=[using normalizeX(1) by auto], isabelleMessages=null, stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_DivisionByOneIsSelf32_1-1: TestResult(requestId=opt_DivisionByOneIsSelf32_1-1, elapsedTime=66090, resultStatus=FAILED, result=IsabelleResult(requestID=opt_DivisionByOneIsSelf32_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinDiv x (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq> x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_DivisionByOneIsSelf32_1-2: TestResult(requestId=opt_DivisionByOneIsSelf32_1-2, elapsedTime=71809, resultStatus=FAILED, result=IsabelleResult(requestID=opt_DivisionByOneIsSelf32_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinDiv x (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq> x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_DivisionByOneIsSelf32_1-3: TestResult(requestId=opt_DivisionByOneIsSelf32_1-3, elapsedTime=71973, resultStatus=FAILED, result=IsabelleResult(requestID=opt_DivisionByOneIsSelf32_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinDiv x (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq> x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_DivisionByOneIsSelf32_1-4: TestResult(requestId=opt_DivisionByOneIsSelf32_1-4, elapsedTime=66220, resultStatus=FAILED, result=IsabelleResult(requestID=opt_DivisionByOneIsSelf32_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinDiv x (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq> x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_DivisionByOneIsSelf32_1-5: TestResult(requestId=opt_DivisionByOneIsSelf32_1-5, elapsedTime=71729, resultStatus=FAILED, result=IsabelleResult(requestID=opt_DivisionByOneIsSelf32_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. BinaryExpr BinDiv x (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq> x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_conditional_eliminate_known_less_1-1: TestResult(requestId=opt_conditional_eliminate_known_less_1-1, elapsedTime=72728, resultStatus=FAILED, result=IsabelleResult(requestID=opt_conditional_eliminate_known_less_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. (stamp_under (stamp_expr x) (stamp_expr y) \<or>
         stpi_upper (stamp_expr x) = stpi_lower (stamp_expr y)) \<and>
        wf_stamp x \<and> wf_stamp y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerLessThan x y) x y \<sqsupseteq> x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_conditional_eliminate_known_less_1-2: TestResult(requestId=opt_conditional_eliminate_known_less_1-2, elapsedTime=69000, resultStatus=FAILED, result=IsabelleResult(requestID=opt_conditional_eliminate_known_less_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. (stamp_under (stamp_expr x) (stamp_expr y) \<or>
         stpi_upper (stamp_expr x) = stpi_lower (stamp_expr y)) \<and>
        wf_stamp x \<and> wf_stamp y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerLessThan x y) x y \<sqsupseteq> x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_conditional_eliminate_known_less_1-3: TestResult(requestId=opt_conditional_eliminate_known_less_1-3, elapsedTime=66110, resultStatus=FAILED, result=IsabelleResult(requestID=opt_conditional_eliminate_known_less_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. (stamp_under (stamp_expr x) (stamp_expr y) \<or>
         stpi_upper (stamp_expr x) = stpi_lower (stamp_expr y)) \<and>
        wf_stamp x \<and> wf_stamp y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerLessThan x y) x y \<sqsupseteq> x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_conditional_eliminate_known_less_1-4: TestResult(requestId=opt_conditional_eliminate_known_less_1-4, elapsedTime=71773, resultStatus=FAILED, result=IsabelleResult(requestID=opt_conditional_eliminate_known_less_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. (stamp_under (stamp_expr x) (stamp_expr y) \<or>
         stpi_upper (stamp_expr x) = stpi_lower (stamp_expr y)) \<and>
        wf_stamp x \<and> wf_stamp y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerLessThan x y) x y \<sqsupseteq> x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_conditional_eliminate_known_less_1-5: TestResult(requestId=opt_conditional_eliminate_known_less_1-5, elapsedTime=72027, resultStatus=FAILED, result=IsabelleResult(requestID=opt_conditional_eliminate_known_less_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. (stamp_under (stamp_expr x) (stamp_expr y) \<or>
         stpi_upper (stamp_expr x) = stpi_lower (stamp_expr y)) \<and>
        wf_stamp x \<and> wf_stamp y \<longrightarrow>
        ConditionalExpr (BinaryExpr BinIntegerLessThan x y) x y \<sqsupseteq> x
    variables:
        x, y :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_normalize_x_original_1-1: TestResult(requestId=opt_normalize_x_original_1-1, elapsedTime=71183, resultStatus=FAILED, result=IsabelleResult(requestID=opt_normalize_x_original_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) (0::int) (1::int) \<and> wf_stamp x \<longrightarrow>
        ConditionalExpr
         (BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal32 (0::'a))))
         (ConstantExpr (IntVal32 (0::'a))) (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq>
        x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_normalize_x_original_1-2: TestResult(requestId=opt_normalize_x_original_1-2, elapsedTime=66180, resultStatus=FAILED, result=IsabelleResult(requestID=opt_normalize_x_original_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) (0::int) (1::int) \<and> wf_stamp x \<longrightarrow>
        ConditionalExpr
         (BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal32 (0::'a))))
         (ConstantExpr (IntVal32 (0::'a))) (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq>
        x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_normalize_x_original_1-3: TestResult(requestId=opt_normalize_x_original_1-3, elapsedTime=69012, resultStatus=FAILED, result=IsabelleResult(requestID=opt_normalize_x_original_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) (0::int) (1::int) \<and> wf_stamp x \<longrightarrow>
        ConditionalExpr
         (BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal32 (0::'a))))
         (ConstantExpr (IntVal32 (0::'a))) (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq>
        x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_normalize_x_original_1-4: TestResult(requestId=opt_normalize_x_original_1-4, elapsedTime=71829, resultStatus=FAILED, result=IsabelleResult(requestID=opt_normalize_x_original_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) (0::int) (1::int) \<and> wf_stamp x \<longrightarrow>
        ConditionalExpr
         (BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal32 (0::'a))))
         (ConstantExpr (IntVal32 (0::'a))) (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq>
        x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result opt_normalize_x_original_1-5: TestResult(requestId=opt_normalize_x_original_1-5, elapsedTime=66069, resultStatus=FAILED, result=IsabelleResult(requestID=opt_normalize_x_original_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (1 subgoal):
     1. stamp_expr x = IntegerStamp (32::nat) (0::int) (1::int) \<and> wf_stamp x \<longrightarrow>
        ConditionalExpr
         (BinaryExpr BinIntegerEquals x (ConstantExpr (IntVal32 (0::'a))))
         (ConstantExpr (IntVal32 (0::'a))) (ConstantExpr (IntVal32 (1::'a))) \<sqsupseteq>
        x
    variables:
        IntVal32 :: 'a \<Rightarrow> Value
        x :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_add_1-1: TestResult(requestId=redundant_lhs_add_1-1, elapsedTime=95659, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_add_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinAdd x y) z)
     2. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinAdd x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_add_1-2: TestResult(requestId=redundant_lhs_add_1-2, elapsedTime=86760, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_add_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinAdd x y) z)
     2. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinAdd x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_add_1-3: TestResult(requestId=redundant_lhs_add_1-3, elapsedTime=83644, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_add_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinAdd x y) z)
     2. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinAdd x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_add_1-4: TestResult(requestId=redundant_lhs_add_1-4, elapsedTime=82606, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_add_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinAdd x y) z)
     2. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinAdd x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_add_1-5: TestResult(requestId=redundant_lhs_add_1-5, elapsedTime=83844, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_add_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinAdd x y) z)
     2. and (IRExpr_up y) (IRExpr_down z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinAdd x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_x_or_1-1: TestResult(requestId=redundant_lhs_x_or_1-1, elapsedTime=86704, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd y z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd y z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_x_or_1-2: TestResult(requestId=redundant_lhs_x_or_1-2, elapsedTime=80912, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd y z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd y z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_x_or_1-3: TestResult(requestId=redundant_lhs_x_or_1-3, elapsedTime=88957, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd y z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd y z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_x_or_1-4: TestResult(requestId=redundant_lhs_x_or_1-4, elapsedTime=72667, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd y z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd y z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_x_or_1-5: TestResult(requestId=redundant_lhs_x_or_1-5, elapsedTime=80624, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd y z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd y z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_y_or_1-1: TestResult(requestId=redundant_lhs_y_or_1-1, elapsedTime=81068, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_y_or_1-2: TestResult(requestId=redundant_lhs_y_or_1-2, elapsedTime=73933, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_y_or_1-3: TestResult(requestId=redundant_lhs_y_or_1-3, elapsedTime=80347, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_y_or_1-4: TestResult(requestId=redundant_lhs_y_or_1-4, elapsedTime=77314, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_lhs_y_or_1-5: TestResult(requestId=redundant_lhs_y_or_1-5, elapsedTime=81215, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_lhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd x z)
        < Canonicalization.size (BinaryExpr BinAnd (BinaryExpr BinOr x y) z)
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd (BinaryExpr BinOr x y) z \<sqsupseteq> BinaryExpr BinAnd x z
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_rhs_x_or_1-1: TestResult(requestId=redundant_rhs_x_or_1-1, elapsedTime=82754, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_rhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z y)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z y
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_rhs_x_or_1-2: TestResult(requestId=redundant_rhs_x_or_1-2, elapsedTime=76239, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_rhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z y)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z y
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_rhs_x_or_1-3: TestResult(requestId=redundant_rhs_x_or_1-3, elapsedTime=77880, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_rhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z y)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z y
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_rhs_x_or_1-4: TestResult(requestId=redundant_rhs_x_or_1-4, elapsedTime=87581, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_rhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z y)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z y
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_rhs_x_or_1-5: TestResult(requestId=redundant_rhs_x_or_1-5, elapsedTime=76757, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_rhs_x_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z y)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up x) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z y
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_rhs_y_or_1-1: TestResult(requestId=redundant_rhs_y_or_1-1, elapsedTime=77401, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_rhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z x)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z x
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_rhs_y_or_1-2: TestResult(requestId=redundant_rhs_y_or_1-2, elapsedTime=82806, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_rhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z x)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z x
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_rhs_y_or_1-3: TestResult(requestId=redundant_rhs_y_or_1-3, elapsedTime=79326, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_rhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z x)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z x
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.443+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_rhs_y_or_1-4: TestResult(requestId=redundant_rhs_y_or_1-4, elapsedTime=82471, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_rhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z x)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z x
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Test Result redundant_rhs_y_or_1-5: TestResult(requestId=redundant_rhs_y_or_1-5, elapsedTime=81693, resultStatus=FAILED, result=IsabelleResult(requestID=redundant_rhs_y_or_1, status=FAILED, message=null, counterexample=null, proofs=null, isabelleMessages=[Failed to finish proof:
    goal (2 subgoals):
     1. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<Longrightarrow>
        Canonicalization.size (BinaryExpr BinAnd z x)
        < Suc (Suc (Canonicalization.size z +
                    Canonicalization.size (BinaryExpr BinOr x y)))
     2. and (IRExpr_up y) (IRExpr_up z) = (0::64 word) \<longrightarrow>
        BinaryExpr BinAnd z (BinaryExpr BinOr x y) \<sqsupseteq> BinaryExpr BinAnd z x
    variables:
        x, y, z :: IRExpr], stackTrace=null))
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AbsIdempotence_1: TestResult(requestId=AbsIdempotence_1, elapsedTime=36860, resultStatus=MALFORMED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AbsNegate_1: TestResult(requestId=AbsNegate_1, elapsedTime=40200, resultStatus=MALFORMED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AddLeftNegateToSub_1: TestResult(requestId=AddLeftNegateToSub_1, elapsedTime=113999, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AddNeutral_1: TestResult(requestId=AddNeutral_1, elapsedTime=71807, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AddNeutral_2: TestResult(requestId=AddNeutral_2, elapsedTime=68394, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AddNot2_1: TestResult(requestId=AddNot2_1, elapsedTime=123323, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AddNot_1: TestResult(requestId=AddNot_1, elapsedTime=69010, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AddRightNegateToSub_1: TestResult(requestId=AddRightNegateToSub_1, elapsedTime=69127, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AddShiftConstantRight_1: TestResult(requestId=AddShiftConstantRight_1, elapsedTime=69027, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AddShiftConstantRight_2: TestResult(requestId=AddShiftConstantRight_2, elapsedTime=70787, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AndEqual_1: TestResult(requestId=AndEqual_1, elapsedTime=66408, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AndEqual_2: TestResult(requestId=AndEqual_2, elapsedTime=37106, resultStatus=MALFORMED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AndLeftFallthrough_1: TestResult(requestId=AndLeftFallthrough_1, elapsedTime=38999, resultStatus=MALFORMED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AndNeutral_1: TestResult(requestId=AndNeutral_1, elapsedTime=71214, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AndNeutral_2: TestResult(requestId=AndNeutral_2, elapsedTime=37384, resultStatus=MALFORMED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AndNots_1: TestResult(requestId=AndNots_1, elapsedTime=72351, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AndRightFallthrough_1: TestResult(requestId=AndRightFallthrough_1, elapsedTime=36848, resultStatus=MALFORMED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AndSelf2_1: TestResult(requestId=AndSelf2_1, elapsedTime=67193, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AndSelf_1: TestResult(requestId=AndSelf_1, elapsedTime=145211, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AndShiftConstantRight_1: TestResult(requestId=AndShiftConstantRight_1, elapsedTime=70471, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AndShiftConstantRight_2: TestResult(requestId=AndShiftConstantRight_2, elapsedTime=69610, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for AndSignExtend_1: TestResult(requestId=AndSignExtend_1, elapsedTime=69110, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for BinaryFoldConstant_1: TestResult(requestId=BinaryFoldConstant_1, elapsedTime=96600, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for BinaryFoldConstant_2: TestResult(requestId=BinaryFoldConstant_2, elapsedTime=94805, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for ConditionalEliminateKnownLess_1: TestResult(requestId=ConditionalEliminateKnownLess_1, elapsedTime=71385, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for ConditionalEliminateKnownLess_2: TestResult(requestId=ConditionalEliminateKnownLess_2, elapsedTime=38605, resultStatus=MALFORMED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for ConditionalEliminateKnownLess_3: TestResult(requestId=ConditionalEliminateKnownLess_3, elapsedTime=38399, resultStatus=MALFORMED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for ConditionalEqualBranches_1: TestResult(requestId=ConditionalEqualBranches_1, elapsedTime=39001, resultStatus=FOUND_AUTO_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for ConditionalEqualBranches_2: TestResult(requestId=ConditionalEqualBranches_2, elapsedTime=38999, resultStatus=FOUND_AUTO_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for ConditionalEqualIsRHS_1: TestResult(requestId=ConditionalEqualIsRHS_1, elapsedTime=72577, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for ConditionalEqualIsRHS_2: TestResult(requestId=ConditionalEqualIsRHS_2, elapsedTime=69601, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for ConditionalExtractCondition2_1: TestResult(requestId=ConditionalExtractCondition2_1, elapsedTime=66667, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for ConditionalExtractCondition_1: TestResult(requestId=ConditionalExtractCondition_1, elapsedTime=68902, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for ConditionalIntegerEquals_1_1: TestResult(requestId=ConditionalIntegerEquals_1_1, elapsedTime=74488, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for ConditionalIntegerEquals_2_1: TestResult(requestId=ConditionalIntegerEquals_2_1, elapsedTime=73225, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for DefaultFalseBranch_1: TestResult(requestId=DefaultFalseBranch_1, elapsedTime=37057, resultStatus=FOUND_AUTO_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for DefaultTrueBranch_1: TestResult(requestId=DefaultTrueBranch_1, elapsedTime=39601, resultStatus=FOUND_AUTO_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for DistributeSubtraction_1: TestResult(requestId=DistributeSubtraction_1, elapsedTime=71122, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for DivItself_1: TestResult(requestId=DivItself_1, elapsedTime=130513, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for EliminateRHS_64_1: TestResult(requestId=EliminateRHS_64_1, elapsedTime=71257, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for EliminateRedundantFalse_1: TestResult(requestId=EliminateRedundantFalse_1, elapsedTime=67512, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for EliminateRedundantFalse_2: TestResult(requestId=EliminateRedundantFalse_2, elapsedTime=68492, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for EliminateRedundantNegative_1: TestResult(requestId=EliminateRedundantNegative_1, elapsedTime=71288, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for MaskOutRHS_1: TestResult(requestId=MaskOutRHS_1, elapsedTime=38999, resultStatus=NO_SUBGOAL, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for MulEliminator_1: TestResult(requestId=MulEliminator_1, elapsedTime=74791, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for MulEliminator_2: TestResult(requestId=MulEliminator_2, elapsedTime=37407, resultStatus=MALFORMED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for MulNegate_1: TestResult(requestId=MulNegate_1, elapsedTime=73007, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for MulNegate_2: TestResult(requestId=MulNegate_2, elapsedTime=37993, resultStatus=MALFORMED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for MulNeutral_1: TestResult(requestId=MulNeutral_1, elapsedTime=69643, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for MulNeutral_2: TestResult(requestId=MulNeutral_2, elapsedTime=66950, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for MulPower2Add1_1: TestResult(requestId=MulPower2Add1_1, elapsedTime=72655, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for MulPower2Sub1_1: TestResult(requestId=MulPower2Sub1_1, elapsedTime=68942, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for MulPower2_1: TestResult(requestId=MulPower2_1, elapsedTime=67971, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for NegateCancel_1: TestResult(requestId=NegateCancel_1, elapsedTime=70368, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for NegateConditionFlipBranches_1: TestResult(requestId=NegateConditionFlipBranches_1, elapsedTime=71416, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for NegativeShift_1: TestResult(requestId=NegativeShift_1, elapsedTime=70348, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for NeverEqNotSelf_1: TestResult(requestId=NeverEqNotSelf_1, elapsedTime=137939, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for NotCancel_1: TestResult(requestId=NotCancel_1, elapsedTime=67601, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for NotXorToXor_1: TestResult(requestId=NotXorToXor_1, elapsedTime=188000, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for OrEqual_1: TestResult(requestId=OrEqual_1, elapsedTime=66785, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for OrInverse2_1: TestResult(requestId=OrInverse2_1, elapsedTime=136572, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for OrInverse_1: TestResult(requestId=OrInverse_1, elapsedTime=64740, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for OrNotOperands_1: TestResult(requestId=OrNotOperands_1, elapsedTime=69535, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for OrShiftConstantRight_1: TestResult(requestId=OrShiftConstantRight_1, elapsedTime=68354, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for RedundantAddSub_1: TestResult(requestId=RedundantAddSub_1, elapsedTime=70456, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for RedundantAddSub_2: TestResult(requestId=RedundantAddSub_2, elapsedTime=38999, resultStatus=MALFORMED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for RedundantSubAdd2_1: TestResult(requestId=RedundantSubAdd2_1, elapsedTime=140401, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for RedundantSubAdd_1: TestResult(requestId=RedundantSubAdd_1, elapsedTime=71204, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for RedundantSubAdd_2: TestResult(requestId=RedundantSubAdd_2, elapsedTime=37392, resultStatus=MALFORMED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for ReturnXOnZeroShift_1: TestResult(requestId=ReturnXOnZeroShift_1, elapsedTime=71312, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for SubAfterAddLeft_1: TestResult(requestId=SubAfterAddLeft_1, elapsedTime=72248, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for SubAfterAddRight_1: TestResult(requestId=SubAfterAddRight_1, elapsedTime=69625, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for SubAfterSubLeft_1: TestResult(requestId=SubAfterSubLeft_1, elapsedTime=70116, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for SubNegativeConstant_1: TestResult(requestId=SubNegativeConstant_1, elapsedTime=36860, resultStatus=NO_SUBGOAL, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for SubNegativeConstant_2: TestResult(requestId=SubNegativeConstant_2, elapsedTime=40799, resultStatus=FOUND_COUNTEREXAMPLE, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for SubNegativeValue_1: TestResult(requestId=SubNegativeValue_1, elapsedTime=72281, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for SubSelfIsZero_1: TestResult(requestId=SubSelfIsZero_1, elapsedTime=68069, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for SubSelfIsZero_2: TestResult(requestId=SubSelfIsZero_2, elapsedTime=177647, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for SubThenAddLeft_1: TestResult(requestId=SubThenAddLeft_1, elapsedTime=81001, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for SubThenAddRight_1: TestResult(requestId=SubThenAddRight_1, elapsedTime=70799, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for SubThenSubLeft_1: TestResult(requestId=SubThenSubLeft_1, elapsedTime=152999, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for SubtractZero_1: TestResult(requestId=SubtractZero_1, elapsedTime=74214, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for UnaryConstantFold_1: TestResult(requestId=UnaryConstantFold_1, elapsedTime=37382, resultStatus=MALFORMED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for WrongAddSub_1: TestResult(requestId=WrongAddSub_1, elapsedTime=71529, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorEqNeg1_64_1: TestResult(requestId=XorEqNeg1_64_1, elapsedTime=69817, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorEqZero_64_1: TestResult(requestId=XorEqZero_64_1, elapsedTime=133486, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorFallThrough1_1: TestResult(requestId=XorFallThrough1_1, elapsedTime=69892, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorFallThrough2_1: TestResult(requestId=XorFallThrough2_1, elapsedTime=68280, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorFallThrough3_1: TestResult(requestId=XorFallThrough3_1, elapsedTime=69723, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorFallThrough4_1: TestResult(requestId=XorFallThrough4_1, elapsedTime=70649, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorInverse2_1: TestResult(requestId=XorInverse2_1, elapsedTime=145068, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorInverse_1: TestResult(requestId=XorInverse_1, elapsedTime=68197, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorIsEqual_64_1_1: TestResult(requestId=XorIsEqual_64_1_1, elapsedTime=228393, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorIsEqual_64_2_1: TestResult(requestId=XorIsEqual_64_2_1, elapsedTime=72007, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorIsEqual_64_3_1: TestResult(requestId=XorIsEqual_64_3_1, elapsedTime=71484, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorIsEqual_64_4_1: TestResult(requestId=XorIsEqual_64_4_1, elapsedTime=270273, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorSelfIsFalse_1: TestResult(requestId=XorSelfIsFalse_1, elapsedTime=136189, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for XorShiftConstantRight_1: TestResult(requestId=XorShiftConstantRight_1, elapsedTime=72895, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for ZeroSubtractValue_1: TestResult(requestId=ZeroSubtractValue_1, elapsedTime=70139, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for condition_bounds_x_1: TestResult(requestId=condition_bounds_x_1, elapsedTime=69081, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for condition_bounds_y_1: TestResult(requestId=condition_bounds_y_1, elapsedTime=66592, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for distribute_sub_1: TestResult(requestId=distribute_sub_1, elapsedTime=70161, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for flipX2_1: TestResult(requestId=flipX2_1, elapsedTime=37048, resultStatus=FOUND_AUTO_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for flipX_1: TestResult(requestId=flipX_1, elapsedTime=38997, resultStatus=FOUND_AUTO_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for normalizeX2_1: TestResult(requestId=normalizeX2_1, elapsedTime=36958, resultStatus=FOUND_AUTO_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for normalizeX_1: TestResult(requestId=normalizeX_1, elapsedTime=70199, resultStatus=FOUND_PROOF, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for opt_DivisionByOneIsSelf32_1: TestResult(requestId=opt_DivisionByOneIsSelf32_1, elapsedTime=69564, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for opt_conditional_eliminate_known_less_1: TestResult(requestId=opt_conditional_eliminate_known_less_1, elapsedTime=70327, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for opt_normalize_x_original_1: TestResult(requestId=opt_normalize_x_original_1, elapsedTime=68854, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for redundant_lhs_add_1: TestResult(requestId=redundant_lhs_add_1, elapsedTime=86502, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for redundant_lhs_x_or_1: TestResult(requestId=redundant_lhs_x_or_1, elapsedTime=81972, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for redundant_lhs_y_or_1: TestResult(requestId=redundant_lhs_y_or_1, elapsedTime=78775, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for redundant_rhs_x_or_1: TestResult(requestId=redundant_rhs_x_or_1, elapsedTime=80242, resultStatus=FAILED, result=null)
    2024-05-02T13:21:10.444+10:00  INFO 6172 --- [veritest] [    Test worker] c.v.v.VerioptTest                        : Summary for redundant_rhs_y_or_1: TestResult(requestId=redundant_rhs_y_or_1, elapsedTime=80739, resultStatus=FAILED, result=null)